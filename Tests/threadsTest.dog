// threadsTest.dog

//LinuxBuild: Platform='Linux' Lang='CPP';
JavaBuild: Platform='Java'  Lang='Java';
//SwiftBuild: Platform='Swift' Lang='Swift';

Title = "Threads Test"
FileName = "threadsTest"
Version = "1.0"
CopyrightMesg = "Public Domain"
Authors = "Bruce Long"
Description = "This is a test for Threads Libraries"
ProgramOrLibrary = "program"

featuresNeeded = [Threads]

LicenseText = `Public Domain`


runCode=`
    testThreads()
    //tryPThreadMtx()
    //testMutex()
    //testMutexMgr()
    //testPThreadCond()
    //testSyncLock()
`

struct GLOBAL{
    //me pthread_mutex_t: pMtx
    me Mutex: mtx
    //me pthread_cond_t: pT_condV
    me SyncLock: syncLk
    me bool: printThread <- false
    me bool: printValue  <- false
    me int: waitCount    <- 0

    void: testThreads() <- {
        print("TEST THREADS!\n")
        me ThreadTester: tester
        tester.start()
        withEach num in RANGE(1..1000){
            print("\nVALUE:", num)
        }
        printThread <- false
        tester.waitForExit()
    }
    /*void: tryPThreadMtx() <- {
        print("TEST P_THREAD MUTEX!\n")
        me PT_MTX_TESTER: tester
        tester.start()
        withEach num in RANGE(1..10000){
            if(num==1){printThread<-true}
            if(num % 5 == 0){
                pthread_mutex_lock(pMtx)
                if(printValue){
                    print("\nA")
                    print("\nB")
                    print("\nC")
                    print("\nD")
                }
                pthread_mutex_unlock(pMtx)
            }
            else{
                pthread_mutex_lock(pMtx)
                if(printValue){
                    print("\nVALUE:", num)
                }
                pthread_mutex_unlock(pMtx)
            }
        }
        printThread <- false
        tester.waitForExit()
    }*/
    void: testMutex() <- {
        print("TEST MUTEX!\n")
        me MutexTester: tester
        tester.start()
        withEach num in RANGE(1..10000){
            if(num==1){printThread<-true}
            if(num % 5 == 0){
                mtx.lock()
                if(printValue){
                    print("\nA")
                    print("\nB")
                    print("\nC")
                    print("\nD")
                }
                mtx.unlock()
            }
            else{
                mtx.lock()
                if(printValue){
                    print("\nVALUE:", num)
                }
                mtx.unlock()
            }
        }
        printThread <- false
        tester.waitForExit()
    }
    void: testMutexMgr() <- {
        print("TEST MUTEXMGR!\n")
        me MutexMgrTester: tester
        tester.start()
        withEach num in RANGE(1..10000){
            if(num==1){printThread<-true}
            if(num % 5 == 0){
                protect(mtx){
                    if(printValue){
                        print("\nA")
                        print("\nB")
                        print("\nC")
                        print("\nD")
                    }
                }
            }
            else{
                protect(mtx){
                    if(printValue){
                        print("\nVALUE:", num)
                    }
                }
            }
        }
        printThread <- false
        tester.waitForExit()
    }
    /*void: testPThreadCond() <- {
        print("TEST PTHREAD CONDITION VARIABLE!\n")
        me PT_CONDVAR_TESTER: tester
        tester.start()
        pthread_mutex_lock(pMtx)
        while(waitCount < 200){
            pthread_cond_wait(pT_condV, pMtx);
        }
        pthread_mutex_unlock(pMtx)
        withEach num in RANGE(1..500){
            if(printValue){
                pthread_mutex_lock(pMtx)
                    print("\nVALUE:", num)
                pthread_mutex_unlock(pMtx)
            }
        }
        tester.waitForExit()
    }*/
    void: testSyncLock() <- {
        print("TEST SYNCLOCK!\n")
        me SyncLockTester: tester
        tester.start()
        protect(mtx){
            while(waitCount < 200){
                syncLk.wait(mtxMgr);
            }
        }
        withEach num in RANGE(1..500){
            if(printValue){
                protect(mtx){
                    print("\nVALUE:", num)
                }
            }
        }
        tester.waitForExit()
    }
}

struct ThreadTester: inherits=Threads{
    void: run()<-{
        withEach n in RANGE(1..1000){
            print("\n            THREAD:", n)
        }
        printValue  <- false
    }

}
/*struct PT_MTX_TESTER: inherits=Threads{
    void: run()<-{
        withEach n in RANGE(1..1000){
            if(n==1){printValue<-true}
            pthread_mutex_lock(pMtx)
            if(printThread){print("\n            THREAD:", n)}
            pthread_mutex_unlock(pMtx)
        }
        printValue  <- false
    }
}*/
struct MutexTester: inherits=Threads{
    void: run()<-{
        withEach n in RANGE(1..1000){
            if(n==1){printValue<-true}
            mtx.lock()
            if(printThread){print("\n            THREAD:", n)}
            mtx.unlock()
        }
        printValue  <- false
    }
}
struct MutexMgrTester: inherits=Threads{
    void: run()<-{
        withEach n in RANGE(1..1000){
            if(n==1){printValue<-true}
            protect(mtx){
                if(printThread){print("\n            THREAD:", n)}
            }
        }
        printValue  <- false
    }
}
/*struct PT_CONDVAR_TESTER: inherits=Threads{
    void: run()<-{
        withEach n in RANGE(1..700){
            if(n==1){printValue<-true}
            pthread_mutex_lock(pMtx)
            waitCount <- n
            if (n == 200) {
                pthread_cond_signal(pT_condV)
            }
            if(n>200){print("\n            THREAD:", n)}
            pthread_mutex_unlock(pMtx)
        }
        printValue  <- false
    }
}*/
struct SyncLockTester: inherits=Threads{
    void: run()<-{
        withEach n in RANGE(1..700){
            if(n==1){printValue<-true}
            protect(mtx){
                waitCount <- n
                if (n == 200) {
                    syncLk.notifyOne()
                }
                if(n>200){print("\n            THREAD:", n)}
            }
        }
        printValue  <- false
    }
}

//// LINKS /////////////////////////////////////////////////////////////
// Swift pthreads: https://rderik.com/blog/multithreading-with-pthreads-in-swift/
