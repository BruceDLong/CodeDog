// minimalGame.dog

LinuxBuild: Platform='Linux' CPU='amd64' Lang='CPP' LangVersion='GNU' optimize='speed';
//WindowsBuild: Platform='Windows' CPU='amd64' Lang='CPP' LangVersion='MSVC' optimize='speed';
//SwingBuild: Platform='Java' CPU='JavaVM' Lang='Java' optimize='speed';
//AndroidBuild: Platform='Android' CPU='JavaVM' Lang='Java' optimize='power';
//iPhoneBuild: Platform='IOS' CPU='amd64' Lang='Swift' optimize='speed';

Title = "minimalGame"
FileName = "minimalGame"
Version = "1.0"
CopyrightMesg = "Public Domain"
Authors = "Bruce Long"
Description = "This is an example of a very minimal game"
ProgramOrLibrary = "program"

featuresNeeded = [GameToolkit, List]

LicenseText = `Public Domain`

runCode=`
    initializeGraphics(true)
    setUpGame()
    gameLooper.play(1, 40)
    deinitGraphics()
`
////////////   A p p l i c a t i o n   a n d   G l o b a l s

struct AlienShip{
    me double: x
    me double: y
}
struct AlienArmada{
    me List<our AlienShip>: aliens
    me int: alien1Width
    me int: alien1Height
    me int: leftMostPos
    me int: rightMostPos
    me int: alienSpeed
    me int: alienAdvance
    me mode [goingLeft, goingRight]: direction
    me GameImage: alien1Img

    void: update() <- {
        leftMostPos  <- windowW
        rightMostPos <- 0
        me double: xToMove
        me double: yToMove <- 0
        withEach alien in aliens{
            if(alien.x > rightMostPos){
                rightMostPos <- alien.x
            }
            if(alien.x < leftMostPos){
                leftMostPos  <- alien.x
            }
        }
        if(direction == goingLeft){
            if(leftMostPos < 10){
                direction <- goingRight
                yToMove   <- alienAdvance

            }
        }else if(direction == goingRight){
            if(rightMostPos > windowW - alien1Width - 10){
                direction <- goingLeft
                yToMove   <- alienAdvance
            }
        }
        if(direction == goingLeft){
            xToMove <- -alienSpeed
        }else if(direction == goingRight){
            xToMove <- alienSpeed
        }
        withEach ship in aliens{
            ship.x <- ship.x + xToMove
            ship.y <- ship.y + yToMove
            if (randInt(alienShotOdds) == 0) {
                our Bullet:: newBullet
                newBullet.x <- ship.x + alien1Width/2
                newBullet.y <- ship.y + alien1Height
                newBullet.owner <- theirBullet
                gamePlayScreen.bullets.pushFirst(newBullet)
                gamePlayScreen.alienFires.play()
            }
        }
    }
    void: draw(their GUI_ctxt: cr) <- {
        withEach alien in aliens{
            alien1Img.draw(cr, alien.x, alien.y, scaleFactor)
        }
    }
    void: addAlienRow(me int: yPos, me int: numAliens)<-{
        me int: rowWidth <- numAliens * (alien1Width + 15)
        me int: rowStart; rowStart <- (windowW - rowWidth) / 2
        me int: crntPos  <- rowStart
        withEach pos in RANGE (0..numAliens){
            our AlienShip:: alien
            alien.x <- crntPos
            alien.y <- yPos
            crntPos <- crntPos + alien1Width + 15
            aliens.pushLast(alien)
        }
    }
    void: addAliens(me int: level)<-{
        if(level == 1){
            addAlienRow(10, 5)
            addAlienRow(100, 6)
        }
    }
    void: init() <-{
        aliens.clear()
        alien1Img.loadFromFile("assets/greenAlien.png")
        alien1Width  <- alien1Img.width/scaleFactor
        alien1Height <- alien1Img.height/scaleFactor
        addAliens(1)
        alienSpeed <- 5
        alienAdvance <- 30
    }
}
struct Bullet{
    me int: x
    me int: y
    mode[ourBullet, theirBullet]: owner

    me bool: update() <- {
        me bool: deleteIt <- false
        if(owner == ourBullet){
            y <- y - bulletSpeed
        }
        else if(owner == theirBullet){
            y <- y + bulletSpeed
        }
        if(y < 0 or y > windowH){
            deleteIt <- true
        }
        return(deleteIt)
    }
    void: draw(their GUI_ctxt: cr) <- {
        if(owner == ourBullet){
            cr.setColor(Styler.White)
            cr.setLineWidth(8)
            cr.moveTo(x, y)
            cr.lineTo(x, y+15)
        } else if(owner == theirBullet) {
            cr.setColor(Styler.Yellow)
            cr.setLineWidth(8)
            cr.moveTo(x, y)
            cr.lineTo(x, y-15)
        }
        cr.strokeNow()
    }
}
struct GameMenuScreen: inherits=GameMode{
    me int: textY

    void: update() <- {}
    void: draw(their GUI_ctxt: cr, me double: interpolation) <- {
        textY <- 100
        cr.setColor(Styler.DarkSlateBlue)
        cr.rectangle(0,0,windowW, windowH)
        cr.fillNow()

        cr.setColor(Styler.White)
        our fontSpec:: testFont {"Ariel", 20, 0}
        if (winner) {
            renderTextCentered(cr, "WINNER!", testFont, windowW/2, textY)
            textY <+- 100
        }
        if (finalScore) {
            renderTextCentered(cr, "Final Score: " + toString(finalScore), testFont, windowW/2, textY)
            textY <+- 100
            renderTextCentered(cr, "Press Space to Play Again!", testFont, windowW/2, textY)
            textY <+- 100
        } else {
            renderTextCentered(cr, "Press Space to Play!", testFont, windowW/2, textY)
            textY <+- 100
        }
        renderTextCentered(cr, "Press Escape to Exit", testFont, windowW/2, textY)
        textY <+- 100
        cr.strokeNow()
        window.requestRedraw()
    }
    void: pause() <- {}
    void: resume() <- {}
    void: keyDownEventHandler(their KeyInfo: event) <- {
        switch (event.sym){
            case SDLK_SPACE:{
                setUpGame()
                looper.setGameMode(gamePlayScreen)
            }
            case SDLK_ESCAPE:{
                looper.quitGame()
            }
        }
    }
    void: init(our GameLooper: ourLooper) <- {looper <- ourLooper}
    void: deInit() <- {}
}
struct GamePauseScreen: inherits=GameMode{
    void: update() <- {}
    void: draw(their GUI_ctxt: cr, me double: interpolation) <- {
        cr.setColor(Styler.White)
        our fontSpec:: testFont {"Ariel", 20, 0}
        renderTextCentered(cr, "PAUSED", testFont, windowW/2, 200)
        renderTextCentered(cr, "Press Space to Continue Playing", testFont, windowW/2, 300)
        renderTextCentered(cr, "Press Escape to Exit", testFont, windowW/2, 400)
        cr.strokeNow()
        window.requestRedraw()
    }
    void: pause() <- {}
    void: resume() <- {}
    void: keyDownEventHandler(their KeyInfo: event) <- {
        switch (event.sym){
            case SDLK_SPACE:{
                looper.setGameMode(gamePlayScreen)
            }
            case SDLK_ESCAPE:{
                finalScore <- playerScore
                looper.setGameMode(gameMenuScreen)
            }
        }
    }
    void: init(our GameLooper: ourLooper) <- {looper <- ourLooper}
    void: deInit() <- {}
}
struct GamePlayScreen: inherits=GameMode{
    me GameSound: playerFires
    me GameSound: alienFires
    me GameSound: explosion1
    me int: playerPosition
    me int: shipWidth
    me int: shipOffsetY
    me List<our Bullet>: bullets
    me AlienArmada: armada

    void: update() <- {
        if(movingLeft){playerPosition <- max(shipWidth/2, playerPosition - playerMovement)}
        if(movingRight) {playerPosition <- min(windowW-shipWidth/2, playerPosition + playerMovement)}
        me int: bulletIdx <- 0
        while (bulletIdx < bullets.size()){
            our Bullet: bullet <- bullets[bulletIdx]
            if(bullet.update()){
                bullets.deleteNth(bulletIdx)
            }else{
                bulletIdx <- bulletIdx + 1
            }
        }
        armada.update()
        detectCollisions()
    }
    void: draw(their GUI_ctxt: cr, me double: interpolation) <- {
        displayBackgroundImage(cr, "assets/level1Background.png")
        shipOffsetY <- windowH/10
        displayImage(cr, "assets/ship1.png", playerPosition-shipWidth/2, windowH-shipOffsetY, scaleFactor, scaleFactor)
        armada.draw(cr)
        withEach bullet in bullets{
            bullet.draw(cr)
        }
        cr.setColor(Styler.White)
        our fontSpec:: scoreFont {"Ariel", 20, 0}
        renderText(cr, "Score: " + toString(playerScore), scoreFont, 10, 40)
        window.requestRedraw()
    }
    bool: pointIsInRectangle(me int: ptX, me int: ptY, me int: RectX, me int: rectY, me int: rectWidth, me int: rectHeight)<- {
        return ((ptX >= RectX) and (ptX <= RectX + rectWidth) and (ptY >= rectY) and (ptY <= rectY + rectHeight))
    }
    void: detectCollisions() <- {
        // Bullet on ship collisions
        me int: bulletIdx <- 0
        while (bulletIdx < bullets.size()){
            our Bullet: bullet <- bullets[bulletIdx]
            if(bullet.owner == ourBullet){              // alien is hit
                me int: alienIdx <- 0
                while(alienIdx < armada.aliens.size()){
                    our AlienShip: alien <- armada.aliens[alienIdx]
                    if(pointIsInRectangle(bullet.x, bullet.y, alien.x, alien.y, armada.alien1Width, armada.alien1Height)){
                        explosion1.play()
                        bullets.deleteNth(bulletIdx)
                        armada.aliens.deleteNth(alienIdx)
                        playerScore <+- 1
                        bulletIdx <-- 1
                        alienIdx  <-- 1
                        if (armada.aliens.size() == 0) {        // last alien is hit
                            winner <- true
                            finalScore <- playerScore
                            looper.setGameMode(gameMenuScreen)
                        }
                    }
                    alienIdx  <- alienIdx  + 1
                }
            }else if(bullet.owner == theirBullet){      // player is hit
                if(pointIsInRectangle(bullet.x, bullet.y, playerPosition - shipWidth/2, windowH - shipOffsetY, shipWidth, 100)){
                    explosion1.play()
                    finalScore <- playerScore
                    looper.setGameMode(gameMenuScreen)
                }
            }
            bulletIdx <- bulletIdx + 1
        }
        // Ship on ship collisions
        me int: alienIdx <- 0
        while(alienIdx < armada.aliens.size()){
            our AlienShip: alien <- armada.aliens[alienIdx]
            if(pointIsInRectangle(alien.x, alien.y, playerPosition, windowH - shipOffsetY, shipWidth, 100)){
                explosion1.play()
                finalScore <- playerScore
                looper.setGameMode(gameMenuScreen)
            }
            alienIdx  <- alienIdx  + 1
        }
    }
    void: pause() <- {}
    void: resume() <- {}
    void: keyDownEventHandler(their KeyInfo: event) <- {
        switch (event.sym){
            case SDLK_SPACE:{
                our Bullet:: newBullet
                newBullet.x <- playerPosition
                newBullet.y <- windowH - shipOffsetY
                newBullet.owner <- ourBullet
                bullets.pushFirst(newBullet)
                playerFires.play()
            }
            case SDLK_ESCAPE:{
                pause()
                looper.setGameMode(gamePauseScreen)
            }
            case SDLK_LEFT:{
                movingLeft <- true

            }
            case SDLK_RIGHT:{
                movingRight <- true

            }
            case SDLK_f:{toggleFullScreen()}
        }
    }
    void: keyUpEventHandler(their KeyInfo: event) <- {
        switch (event.sym){
            case SDLK_SPACE:{
                our Bullet:: newBullet
                newBullet.x <- playerPosition
                newBullet.y <- windowH - shipOffsetY
                newBullet.owner <- ourBullet
                bullets.pushFirst(newBullet)
                playerFires.play()
            }
            case SDLK_ESCAPE:{
                pause()
                looper.setGameMode(gamePauseScreen)
            }
            case SDLK_LEFT:{
                movingLeft <- false
            }
            case SDLK_RIGHT:{
                movingRight <- false
            }
            case SDLK_f:{toggleFullScreen()}
        }
    }
    void: init(our GameLooper: ourLooper) <- {
        looper <- ourLooper
        playerPosition <- windowW/2
        shipWidth      <- 136/scaleFactor
        bullets.clear()
        playerFires.loadFromFile("assets/fire1.wav")
        alienFires.loadFromFile("assets/fire2.wav")
        explosion1.loadFromFile("assets/explosion1.wav")
        armada.init()
        movingLeft <- false
        movingRight <- false
    }
    void: deInit() <- {}
}
struct GLOBAL{
    me int: fontSize
    our GameLooper:: gameLooper
    our GameMenuScreen:: gameMenuScreen
    our GamePauseScreen:: gamePauseScreen
    our GamePlayScreen:: gamePlayScreen
    me bool: movingLeft
    me bool: movingRight

    // SETTINGS
    const int: scaleFactor <- 2
    const int: bulletSpeed <- 30
    const int: playerMovement <- 25
    const int: alienShotOdds <- 500     // the lower the number, the more they shoot

    me int: playerScore
    me int: finalScore
    me bool: winner

    void: setUpGame() <- {
        playerScore <- 0
        winner <- false
        gameMenuScreen.init(gameLooper)
        gamePauseScreen.init(gameLooper)
        gamePlayScreen.init(gameLooper)
        gameLooper.setGameMode(gameMenuScreen)
    }
    void: toggleFullScreen() <- {
        if(getFullScreenMode()){
            fullScreenModeOff()
        }else{
            fullScreenModeOn()
        }
    }
}

// TODO:
// clean opening screen
// Music playing
// Mouse Events
// Animations
// ANDROID
// * Multiple Levels
// * Multiple lives
