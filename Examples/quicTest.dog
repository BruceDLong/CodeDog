// Quic test
LinuxBuild: Platform='Linux' CPU='amd64' Lang='CPP' optimize='speed';

Title = "Quic Protocol"
FileName = "Quic"
Version = "1.0"
CopyrightMesg = "Copyright 2020-2021 Bruce Long; All rights reserved."
Authors = "Bruce Long"
Description = "Quic Protocol"
ProgramOrLibrary = "program"

featuresNeeded = [Logger, Quic]

LicenseText = `All rights reserved.`

runCode = `
    logMgr.init(OFile)
    me ClientAndServer: clientAndServer;
    clientAndServer.runTest()
`
struct PingProtocol: inherits=QProtocol {
    me bool: doStep() <- {return(true)}
    our QProtocol: createClone() <- {
        our PingProtocol:: retval
        retval <deep- self
        return(retval)
    }
    void: INIT() <- {
        protocolIDPrefix <- "slip/ping"
    }
}
struct IDProtocol: inherits=QProtocol {
    me bool: doStep() <- {return(true)}
    our QProtocol: createClone() <- {
        our IDProtocol:: retval
        retval <deep- self
        return(retval)
    }
    void: INIT() <- {
        protocolIDPrefix <- "slip/ID"
    }
}
struct CloneProtocol: inherits=QProtocol {
    me bool: doStep() <- {return(true)}
    our QProtocol: createClone() <- {
        our CloneProtocol:: retval
        retval <deep- self
        return(retval)
    }
    void: INIT() <- {
        protocolIDPrefix <- "slip/clone"
    }
}


struct ClientAndServer{
    void: runTest() <- {
        our PingProtocol::  pingProtocol
        our IDProtocol::    idProtocol
        our CloneProtocol:: cloneProtocol

        me QuicEngine_Server: server
        server.init("SFile", true, false)
        server.addProtocol(pingProtocol)
        server.addProtocol(idProtocol)
        server.addProtocol(cloneProtocol)
        server.run()

        me QuicEngine_Client: client
        client.init("CFile", false, false)
        client.run()
    }
}
