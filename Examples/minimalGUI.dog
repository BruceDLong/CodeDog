// minimalGUI.dog

LinuxBuild: Platform='Linux' CPU='amd64' Lang='CPP' LangVersion='GNU' optimize='speed';
//WindowsBuild: Platform='Windows' CPU='amd64' Lang='CPP' LangVersion='MSVC' optimize='speed';
//SwingBuild: Platform='Java' CPU='JavaVM' Lang='Java' optimize='speed';
//AndroidBuild: Platform='Android' CPU='JavaVM' Lang='Java' optimize='power';
//iPhoneBuild: Platform='IOS' CPU='amd64' Lang='Swift' optimize='speed';
//MacBuild: Platform='MacOS' Lang='Swift' optimize='speed';

Title = "minimalGUI"
FileName = "minimalGUI"
Version = "1.0"
CopyrightMesg = "Public Domain"
Authors = "Bruce Long"
Description = "This is an example of a very minimal GUI"
ProgramOrLibrary = "program"

featuresNeeded = [GUI_ToolKit, Dashboard, List]

LicenseText = `Public Domain`

runCode=``

mainStyle = {}

do makeStyler(mainStyle)
do makeGUI(GUI_Spec)

////////////   A p p l i c a t i o n   a n d   G l o b a l s

struct testWidget: inherits=DashboardWidget{

    void: draw(their GUI_ctxt: cr) <- {
        print("In DRAW TEST WIDGET!!!!!!!()\n")
        me cdColor: lineColor <- cdColor(255,0,0,255)
        cr.setColor(lineColor)
        cr.setLineWidth(5)
        cr.moveTo(0, 0)
        cr.lineTo(1200, 1200)
        cr.moveTo(1200, 0)
        cr.lineTo(0, 1200)
        cr.strokeNow()

        me cdColor: lineColor2 <- cdColor(0,250,255,255)
        cr.setColor(lineColor2)
        our fontSpec:: testFont{"Ariel", "20"}
        renderText(cr, "Hello World!", testFont, 150, 100)
        cr.strokeNow()

        cr.setRGB(0,255,0)
        cr.circle(200, 200, 50)
        cr.rectangle(300,100, 10, 200)
        cr.strokeNow()

        cr.setRGBA(0,0,255,0.5)
        cr.moveTo(300,300)
        cr.lineTo(300,400)
        cr.lineTo(400,400)
        cr.lineTo(400,300)
        cr.closePath()
        cr.strokeNow()

        // Here you can add tests for other drawing functions:
        //    setScale()
        //    moveRel(), lineRel()
        //    curveTo(), curveRel()
        //    fillNow(), etc
        //    setFillPattern() and gradient control functions.
    }

    me bool: primaryClick(their GUI_ButtonEvent: event) <- {
        me GUI_Scalar: eventX <- event.x
        me GUI_Scalar: eventY <- event.y
        print("CLICK! (x:", eventX, ", y:", eventY, ")\n")
        return(true)
    }

    me bool: secondaryClick(their GUI_ButtonEvent: event) <- {
        me GUI_Scalar: eventX <- event.x
        me GUI_Scalar: eventY <- event.y
        print("SECONDARY CLICK! (x:", eventX, ", y:", eventY, ")\n")
        return(true)
    }
    me bool: primaryUp(their GUI_ButtonEvent: event) <- {
        me GUI_Scalar: eventX <- event.x
        me GUI_Scalar: eventY <- event.y
        print("Primary up! (x:", eventX, ", y:", eventY, ")\n")
        return(true)
    }

    me bool: mouseMoved(their GUI_ButtonEvent: event) <- {
        me GUI_Scalar: eventX <- event.x
        me GUI_Scalar: eventY <- event.y
        print("MOVE CLICK! (x:", eventX, ", y:", eventY, ")\n")
        return(true)
    }
    me bool: primaryDn(their GUI_ButtonEvent: event) <- {
        me GUI_Scalar: eventX <- event.x
        me GUI_Scalar: eventY <- event.y
        print("Primary Down! (x:", eventX, ", y:", eventY, ")\n")
        return(true)
    }
}

struct GLOBAL{
    their GUI_canvas: drawing_area
    their testWidget: drawAnX
    me int: fontSize
}

struct APP{
    me void: createAppArea(me GUI_Frame: frame) <- {
        Allocate(drawAnX)
        drawing_area  <- gui.newCanvas()
        drawing_area.setParent(drawAnX)
        gui.setWidgetSize(drawing_area, 1200, 1200)
        EventDispatcher.registerWidgetForEventDispatcher(drawing_area, drawAnX)
        addToContainerAndExpand (frame, drawing_area)
    }
}
