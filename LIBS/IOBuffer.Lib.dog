// IOBuffer.Lib.dog
featuresNeeded = [Threads]

struct strInnerBuf{
    me string: buf
    me int64: myOffset
    me int64: refCount
    me int64: endingLineNumber
    their strInnerBuf: next
    their strInnerBuf: prev
}

struct strBufItr{
    their strBuf: theStrBuf
    their strInnerBuf: crntInnerBuf
    me int64: crntRelPos
    me int64: crntAbsPos() <- {return(crntInnerBuf.myOffset + crntRelPos)}
    me mode[bfWaiting, bfOK, bfEOB, bfError]: status
    me char: ch() <- {
        return(crntInnerBuf.buf[crntRelPos])
    }
    me int: goNext() <- {
        crntRelPos <+- 1
        if(crntRelPos >= crntInnerBuf.buf.size()){
            their strInnerBuf: prevInnerBuf <- crntInnerBuf
            crntInnerBuf <- theStrBuf.findInrBufWithPos(crntAbsPos())
            if(prevInnerBuf === crntInnerBuf){return(bfOK)}
            if(crntInnerBuf==NULL){
                if(theStrBuf.bufferClosed){status <- bfEOB}
                else{status <- bfError}
            }else{
                crntRelPos <- 0
                status <- bfOK
            }
        }
        return(status)
    }
    me string: stringify() <- {
        me string: retVal
        if(crntInnerBuf){retVal <- "'"+crntInnerBuf.buf +"'("+toString(crntRelPos)+ ")\n"}
        else{retVal <- "NULL"}
        return(retVal)
    }
}

struct strBufRange{
    their strBuf: theStrBuf
    me int64: startPos
    me int64: endPos
    void: INIT(me int64: start, me int64: end) <- {}  // inc RefCount
    void: DEINIT() <- {} // dec RefCOunt
}

struct strBuf{
    their strInnerBuf: head
    their strInnerBuf: tail
    me int64: crntStreamSize
    me Mutex: bufMutex
    me SyncLock: bufLock
    me bool: bufferClosed
    me string: streamName
    me bool: interactiveMode     // If true, allow tail of buffer to be tentative / modifiable.
    me bool: pre_parse_only      // If true, do not release for parsing; wait for 'submit'
    me int64: firstTentativeByte // The first byte that may be changed or deleted.
    me int64: consumerStatus       // Use for setting the status of the consumer/parser; if needed.

    void: putStr(me string: data) <- {
        //log("PUTTING:"+data)
        me MutexMngr: bufMtxMgr{bufMutex}
        if(bufferClosed){
            log("WARNING: Buffer already closed in putStr:"+data)
            return()
        }
        their strInnerBuf:: innerBuf
        innerBuf.buf <- data
        innerBuf.myOffset <- crntStreamSize
        innerBuf.refCount <- 1
        crntStreamSize <+- data.size()
        me int64: newLines <- numNewlines(data)
        if(tail==NULL){
            head <- innerBuf
            innerBuf.endingLineNumber <- newLines
        } else {
            tail.next <- innerBuf
            innerBuf.prev <- tail
            innerBuf.endingLineNumber <- innerBuf.prev.endingLineNumber + newLines
        }
        tail <- innerBuf
        //log("NOTIFYING:")
        //log("endingLineNumber of InnerBuf:"+toString(innerBuf.endingLineNumber))
        bufLock.notifyOne()
    }
    their strInnerBuf: findInrBufWithPos(me int64: pos) <- {
        //log("in FindInrBufWithPos(): "+ toString(pos))
        me MutexMngr: bufMtxMgr{bufMutex}
        while(tail==NULL or (tail.myOffset + tail.buf.size() <= pos)){
            if(bufferClosed){return(NULL)}
            //log("WAITING(findInrBufWithPos)")
            bufLock.wait(bufMtxMgr)
            //log("DONE_WAITING(findInrBufWithPos)")
        }
        their strInnerBuf: bufr <- tail
        while(bufr!=NULL){
            if(bufr.myOffset <= pos and bufr.myOffset + bufr.buf.size() > pos){
                return(bufr)
            }
            bufr <- bufr.prev
        }
        return(NULL)
    }
    me char: at(me int64: pos) <- {
        their strInnerBuf: crntInnerBuf <- findInrBufWithPos(pos)
        if(crntInnerBuf==NULL){return(0)}
        me char: retChar <- crntInnerBuf.buf[pos-crntInnerBuf.myOffset]
        return(retChar)
    }
    our strBufItr: getItrAt(me int64: pos) <- {
        their strInnerBuf: crntInnerBuf <- findInrBufWithPos(pos)
        if(crntInnerBuf==NULL){return(NULL)}
        our strBufItr:: retVal
        retVal.theStrBuf    <- self
        retVal.crntInnerBuf <- crntInnerBuf
        retVal.crntRelPos   <- pos - retVal.crntInnerBuf.myOffset
        retVal.status       <- bfOK
        return(retVal)
    }
    me string:atSafe(me int64: pos) <- {
        // Use this to print or log; Won't return 0 or block
        if(tail==NULL){return("BufEmpty")}
        if(tail.myOffset + tail.buf.size() <= pos){return("PastEOB")}
        their strInnerBuf: bufr <- tail
        while(bufr!=NULL){
            if(bufr.myOffset <= pos and bufr.myOffset + bufr.buf.size() > pos){
                me char: ch <- bufr.buf[pos-bufr.myOffset]
                if(ch=="\n"){return("\\n")}
                if(ch=="\t"){return("\\t")}
                if(ch<" "){me int: chNum<-ch; return("\\"+toString(chNum))}
                me string: S; S <+- ch
                return(S)
            }
            bufr <- bufr.prev
        }
        return("BufERROR")
    }
        // call findInrBufWithPos to get the inr buf with the character prev.EndingLineNumber and count up to current position
    me string: getLocationAtCharPos(me int64: charPos) <- {
        their strInnerBuf: bufWithChar <- findInrBufWithPos(charPos)
        me int64: lastLinePos <- 0
        me int64: errLineNum <- 1
        me int64: errCharPos <- 0
        if(bufWithChar.prev){
            errLineNum <- bufWithChar.prev.endingLineNumber
        }
        me int: bufSize <- bufWithChar.buf.size()
        withEach idx in RANGE(0..bufSize) {
            if(bufWithChar.myOffset + idx > charPos){
                break()
            }
            if(bufWithChar.buf[idx] == "\n"){
                errLineNum <+- 1
                lastLinePos <- idx
            }
        }
        errCharPos <- charPos-(lastLinePos+bufWithChar.myOffset)
        return(streamName+":"+toString(errLineNum)+":"+toString(errCharPos))
    }
    void: notifyWaitingThread() <- {bufLock.notifyOne()}
    void: close() <- {
        me MutexMngr: bufMtxMgr{bufMutex}
        bufferClosed <- true
        bufLock.notifyOne()
        //log("CLOSE-NOTIFYING:")
    }
    me int64: size() <- {
        return(crntStreamSize)
    }
    me int64: numNewlines(me string: data) <- {
        me int64: dataSize <- data.size()
        me int64: newLines <- 0
        withEach idx in RANGE(0..dataSize){
            if(data[idx] == "\n"){
                newLines <+- 1
            }
        }
        return(newLines)
    }
    me string: stringify() <- {
        me string: retVal
        their strInnerBuf: crnt <- head
        while(crnt!=NULL){
            retVal <- "'"+crnt.buf + "'\n"
            crnt <- crnt.next
        }
        return(retVal)
    }
    void: init(me string: StreamName) <- {
        head <- NULL
        tail <- NULL
        crntStreamSize <- 0
        bufferClosed   <- false
        streamName <- StreamName
    }
    void: initForString(me string: data, me string: StreamName) <- {
        init(StreamName)
        putStr(data)
        close()
    }

////////////////////////////////////////////////////////
// Interactive mode utilities

    void: submitForPreParse() <- {
        pre_parse_only  <- true
        notifyWaitingThread()
    }
    void: submitForParse() <- {
        pre_parse_only  <- false
        notifyWaitingThread()
    }

    void: deleteTentativeChars(me int64: pos, me int64:N) <- { // And shorten buffer by N
        me MutexMngr: bufMtxMgr{bufMutex}
        crntStreamSize <-- N
        me int64: innerPos <- pos-tail.myOffset
        tail.endingLineNumber <-- numNewlines(tail.buf.subStr(innerPos, innerPos+N))
        tail.buf <- tail.buf.subStr(0, innerPos-1) + tail.buf.subStr(innerPos+N)
        bufLock.notifyOne()
    }
    void: insertTentativeStr(me int64: pos, me string: data) <- { // And lengthen buffer by data.size() then fill with data
        if(tail==NULL){
            firstTentativeByte <- 0
            putStr(data)
        } else {
            me MutexMngr: bufMtxMgr{bufMutex}
            crntStreamSize <+- data.size()
            me int64: innerPos <- pos-tail.myOffset
            tail.buf <- tail.buf.subStr(0, innerPos-1) + data + tail.buf.subStr(innerPos)
            tail.endingLineNumber <+- numNewlines(data)
            bufLock.notifyOne()
        }
    }
    void: putTentativeStr(me string: data) <- {
        if(tail==NULL){
            firstTentativeByte <- 0
            putStr(data)
        } else {
            me MutexMngr: bufMtxMgr{bufMutex}
            crntStreamSize <+- data.size()
            tail.buf <+- data
            tail.endingLineNumber <+- numNewlines(data)
            bufLock.notifyOne()
        }
    }

////////////////////////////////////////////////////////
// Stream parsing utilities
    me int64: chkStr(me int64: pos, me string: s) <- {
        me int64: L <- s.size()
        our strBufItr: txtItr <- getItrAt(pos)
        withEach i in RANGE(0 .. L){
            if(txtItr == NULL or txtItr.status!=bfOK or txtItr.ch() != s[i]){return(-1)}
            txtItr.goNext()
        }
        return(L)
    }
    me int64: scrapeUntil(me int64: pos, me string:endStr) <- {
        me char: ender <- endStr[0]
        our strBufItr: txtItr <- getItrAt(pos)
        while(txtItr != NULL and txtItr.status==bfOK){
            me char: ch <- txtItr.ch()
            if(ch==ender){
                me int64: p <- txtItr.crntAbsPos()
                me int64: nxtLen <- chkStr(p, endStr)
                if(nxtLen>0){return((p+nxtLen)-pos)}
            }
            txtItr.goNext()
        }
        return(-1)
    }
    me int64: escapedScrapeUntil(me int64:pos, me string:endChar) <- {
        me string: prevCharStr <- " "
        me char: prevChar <- prevCharStr[0]
        me char: ender <- endChar[0]
        me string: escCharStr <- "\\ "
        me char: escChar <- escCharStr[0]
        our strBufItr: txtItr <- getItrAt(pos)
        while(txtItr != NULL and txtItr.status==bfOK){
            me char: ch <- txtItr.ch()
            me int64: p <- txtItr.crntAbsPos()
            if(prevChar!=escChar and ch==ender){return(p-pos)}
            if(prevChar==escChar and ch==escChar) {prevChar<-escCharStr[1]}
            else {prevChar <- ch}
            txtItr.goNext()
        }
        return(-1)
    }
    me int64: scrapeUTF8Char(me int64: pos, their int32: out) <- {
        our strBufItr: txtItr <- getItrAt(pos)
        me int: count <- 0
        me int: expectedBytes <- -1
        me string: bufr <- ""
        while(txtItr != NULL and txtItr.status==bfOK){
            me char: ch <- txtItr.ch()
            if(count==0){
                expectedBytes <- remainingOctets(ch) + 1
            }
            bufr <+- ch
            count <+- 1
            if(count==expectedBytes){break()}
            txtItr.goNext()
        }
        if(count!=expectedBytes){return(-1)}
        me int64: p<-0
        packUTF8Char(bufr, p, out)
        return(expectedBytes)
    }
    me int64: scrapeAlphaSeq(me int64: pos) <- {
        me int64: charsUsed <- 0
        our strBufItr: txtItr <- getItrAt(pos)
        while(txtItr != NULL and txtItr.status==bfOK){
            me char: ch <- txtItr.ch()
            if(!isalpha(ch)){
                if(charsUsed==0){return(-1)}
                else{return(charsUsed)}
            }
            txtItr.goNext()
            charsUsed <+- 1
        }
        return(charsUsed)
    }
    me int64: scrapeUintSeq(me int64: pos) <- {
        me int64: charsUsed <- 0
        our strBufItr: txtItr <- getItrAt(pos)
        while(txtItr != NULL and txtItr.status==bfOK){
            me char: ch <- txtItr.ch()
            if(!isdigit(ch)){
                if(charsUsed==0){return(-1)}
                else{return(charsUsed)}
            }
            txtItr.goNext()
            charsUsed <+- 1
        }
        return(charsUsed)
    }
    me int64: scrapeHexNum(me int64: pos) <- {
        me int64: charsUsed <- 0
        our strBufItr: txtItr <- getItrAt(pos)
        while(txtItr != NULL and txtItr.status==bfOK){
            me char: ch <- txtItr.ch()
            if(!isxdigit(ch)){
                if(charsUsed==0){return(-1)}
                else{return(charsUsed)}
            }
            txtItr.goNext()
            charsUsed <+- 1
        }
        return(charsUsed)
    }
    me int64: scrapeBinNum(me int64: pos) <- {
        me int64: charsUsed <- 0
        our strBufItr: txtItr <- getItrAt(pos)
        while(txtItr != NULL and txtItr.status==bfOK){
            me char: ch <- txtItr.ch()
            if(!isxdigit(ch)){
                if(charsUsed==0){return(-1)}
                else{return(charsUsed)}
            }
            txtItr.goNext()
            charsUsed <+- 1
        }
        return(charsUsed)
    }
    me int64: scrapeAlphaNumSeq(me int64: pos) <- {
        me int64: charsUsed <- 0
        our strBufItr: txtItr <- getItrAt(pos)
        while(txtItr != NULL and txtItr.status==bfOK){
            me char: ch <- txtItr.ch()
            if(!isalnum(ch)){
                if(charsUsed==0){return(-1)}
                else{return(charsUsed)}
            }
            txtItr.goNext()
            charsUsed <+- 1
        }
        return(charsUsed)
    }
    me int64: scrapeFlexNum(me int64: pos) <- {
        me int64: charsUsed <- 0
        me bool: sepCharFound <- false  // '.' or '/' was found.
        our strBufItr: txtItr <- getItrAt(pos)
        if(txtItr.ch()=="." or txtItr.ch()=="/"){return(-1)}
        me char: prevCH <- " "
        while(txtItr != NULL and txtItr.status==bfOK){
            me char: ch <- txtItr.ch()
            if(!(isdigit(ch) or ((ch=="." or ch=="/") and !sepCharFound))){
                if(charsUsed==0){return(-1)}
                else{
                    if(prevCH!="." and prevCH!="/"){return(charsUsed)}
                    else{return(-1)}
                }
            }
            if(ch=="." or ch=="/"){sepCharFound <- true}
            prevCH <- ch
            txtItr.goNext()
            charsUsed <+- 1
        }
        return(charsUsed)
    }
    me int64: scrapeAlphaNum_Seq(me int64: pos) <- {
        me int64: charsUsed <- 0
        our strBufItr: txtItr <- getItrAt(pos)
        while(txtItr != NULL and txtItr.status==bfOK){
            me char: ch <- txtItr.ch()
            if (!(isalnum(ch) or ch=="_")){
                if(charsUsed==0){return(-1)}
                else{return(charsUsed)}
            }
            txtItr.goNext()
            charsUsed <+- 1
        }
        return(charsUsed)
    }
    me int64: scrapeUnicodeWordContinue(me int64: pos) <- {
        me int64: charsUsed <- 0
        our strBufItr: txtItr <- getItrAt(pos)
        while(txtItr != NULL and txtItr.status==bfOK){
            me int32: ch
            me int64: bytesUsed <- scrapeUTF8Char(pos, ch)
            if(charsUsed==0 and bytesUsed<=0){return(-1)}
            if (!(unicodeMgr.isUnicodeWordContinue(ch))){
                if(charsUsed==0){return(-1)}
                else{return(charsUsed)}
            }
            pos <+- bytesUsed
            txtItr.goNext()
            charsUsed <+- bytesUsed
        }
        if(charsUsed==0){return(-1)}
        return(charsUsed)
    }
    me int64: scrapePrintableSeq(me int64: pos) <- {
        me int64: charsUsed <- 0
        our strBufItr: txtItr <- getItrAt(pos)
        while(txtItr != NULL and txtItr.status==bfOK){
            me char: ch <- txtItr.ch()
            if(!isprint(ch)){
                if(charsUsed==0){return(-1)}
                else{return(charsUsed)}
            }
            txtItr.goNext()
            charsUsed <+- 1
        }
        return(charsUsed)
    }
    me int64: scrapeCComment(me int64: pos) <- {
        me char: ch <- at(pos)
        if(ch=="/"){
            me char: nextCh <- at(pos+1)
            if(nextCh=="/"){
                return(scrapeToEOL(pos))
            } else if(nextCh=="*"){
                return(scrapeUntil(pos+2, "*/")+2)
            }
        }
        return(0)
    }
    me int64: scrapeWSC(me int64: pos) <- {
        me int64: charsUsed <- 0
        me int64: p <- pos
        while(true){
            me int64: prevP <- p
            me char: ch <- at(p)
            if(isspace(ch)){p <+- 1; charsUsed <+- 1}
            else if(ch=="/"){
                me int64: cmntLen <- scrapeCComment(p)
                if(cmntLen>0){p <+- cmntLen; charsUsed <+- cmntLen}
            }
            if(prevP == p){  // !WSC(ch)
                if(charsUsed==0){return(0)}
                else{return(charsUsed)}
            }
        }
        return(0) // Never reached
    }
    me int64: scrapeWS(me int64: pos) <- {
        me int64: charsUsed <- 0
        our strBufItr: txtItr <- getItrAt(pos)
        while(txtItr != NULL and txtItr.status==bfOK){
            me char: ch <- txtItr.ch()
            if(!isspace(ch)){
                if(charsUsed==0){return(0)}
                else{return(charsUsed)}
            }
            txtItr.goNext()
            charsUsed <+- 1
        }
        return(charsUsed)
    }
    me int64: scrapeQuotedStr(me int64: pos) <- {
        me string: ch <- ""
        ch <+- at(pos)
        if(ch != "'" and ch != "\""){return(-1)}
        else{pos <+- 1}
        me int64: sLen <- escapedScrapeUntil(pos, ch)
        if(sLen<0){return(-1)}
        return(sLen+2)
    }
    me int64: scrapeQuotedStr1(me int64: pos) <- {
        if(chkStr(pos, "'")>=0){pos <- pos+1}else{return(-1)}
        me int64: sLen <- escapedScrapeUntil(pos, "'")
        if(sLen<0){return(-1)}
        return(sLen+2)
    }
    me int64: scrapeQuotedStr2(me int64: pos) <- {
        if(chkStr(pos, "\"")>=0){pos <- pos+1}else{return(-1)}
        me int64: sLen <- escapedScrapeUntil(pos, "\"")
        if(sLen<0){return(-1)}
        return(sLen+2)
    }
    me int64: scrapeCID(me int64: pos) <- {
        me char: ch <- at(pos)
        if(isalpha(ch)){
            return(scrapeAlphaNum_Seq(pos))
        }
        return(-1)
    }
    me int64: scrapeUniID(me int64: pos) <- {
        me int32: ch
        me int64: bytesUsed <- scrapeUTF8Char(pos, ch)
        if(bytesUsed<=0){return(-1)}
        me int: tmpCh <- ch
     //    log("UNICODESTR:'"+toString(bytesUsed) +"  val:"+toString(tmpCh))
        if(unicodeMgr.isUnicodeWordStart(ch)){
            me int64: charsUsed <- scrapeUnicodeWordContinue(pos+bytesUsed)
            if(charsUsed==-1){charsUsed<-0}
            me string:TXT
            withEach idx in RANGE(pos..pos+charsUsed+bytesUsed){
                me char: tChr <- at(idx)
                TXT <+- tChr
            }
            //~ log("scrapeUniID A:"+TXT+": "+toString(charsUsed+bytesUsed)+" bytesUsed:"+toString(bytesUsed))
            if(charsUsed<0){return(1)}
            else{return(charsUsed+bytesUsed)}
        }
        return(-1)
    }
    me int64: scrapeIntSeq(me int64: pos) <- {
        me int64: initialChars <- 0
        me char: ch <- at(pos)
        if(ch=="+" or ch=="-"){initialChars <- 1}
        me int64: numDigits <- scrapeUintSeq(pos+initialChars)
        if(numDigits>0){return(numDigits+initialChars)}
        return(-1)
    }
    // TODO: me int64: scrapeRdxSeq(me int64: pos) <- { }
    me int64: scrapeToEOL(me int64: pos) <- {
        return(scrapeUntil(pos, "\n"))
    }
}
