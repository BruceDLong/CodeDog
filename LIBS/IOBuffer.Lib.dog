// IOBuffer.Lib.dog
featuresNeeded = [Threads]

struct strInnerBuf{
    me string: buf
    me int64: myOffset
    me int64: refCount
    me int64: endingLineNumber
    their strInnerBuf: next
    their strInnerBuf: prev
}

struct strBuf{
    their strInnerBuf: head
    their strInnerBuf: tail
    me int64: crntStreamSize
    me Mutex: bufMutex
    me SyncLock: bufLock
    me bool: bufferClosed
    me string: streamName

    void: putStr(me string: data) <- {
        log("PUTTING:"+data)
        me MutexMngr: bufMtxMgr{bufMutex}
        if(bufferClosed){
            log("WARNING: Buffer already closed in putStr:"+data)
            return()
        }
        their strInnerBuf:: innerBuf
        innerBuf.buf <- data
        innerBuf.myOffset <- crntStreamSize
        innerBuf.refCount <- 1
        me int64: dataSize <- data.size()
        crntStreamSize <+- dataSize
        me int64: newLines <- 0
        withEach idx in RANGE(0..dataSize){
            if(data[idx] == "\n"){
                newLines <+- 1
            }
        }
        if(tail==NULL){
            head <- innerBuf
            innerBuf.endingLineNumber <- newLines
        } else {
            tail.next <- innerBuf
            innerBuf.prev <- tail
            innerBuf.endingLineNumber <- innerBuf.prev.endingLineNumber + newLines
        }
        tail <- innerBuf
        //log("NOTIFYING:")
        //log("endingLineNumber of InnerBuf:"+toString(innerBuf.endingLineNumber))
        bufLock.notifyOne()
    }
    their strInnerBuf: findInrBufWithPos(me int64: pos) <- {
        //log("in FindInrBufWithPos(): "+ toString(pos))
        me MutexMngr: bufMtxMgr{bufMutex}
        while(tail==NULL or (tail.myOffset + tail.buf.size() <= pos)){
            if(bufferClosed){return(NULL)}
            //log("WAITING(findInrBufWithPos)")
            bufLock.wait(bufMtxMgr)
            //log("DONE_WAITING(findInrBufWithPos)")
        }
        their strInnerBuf: bufr <- tail
        while(bufr!=NULL){
            if(bufr.myOffset <= pos and bufr.myOffset + bufr.buf.size() > pos){
                return(bufr)
            }
            bufr <- bufr.prev
        }
        return(NULL)
    }
    me char: at(me int64: pos) <- {
        their strInnerBuf: crntInnerBuf <- findInrBufWithPos(pos)
        if(crntInnerBuf==NULL){return(0)}
        me char: retChar <- crntInnerBuf.buf[pos-crntInnerBuf.myOffset]
        return(retChar)
    }
    our strBufItr: getItrAt(me int64: pos) <- {
        their strInnerBuf: crntInnerBuf <- findInrBufWithPos(pos)
        if(crntInnerBuf==NULL){return(NULL)}
        our strBufItr:: retVal
        retVal.theStrBuf    <- self
        retVal.crntInnerBuf <- crntInnerBuf
        retVal.crntRelPos   <- pos - retVal.crntInnerBuf.myOffset
        retVal.status       <- bfOK
        return(retVal)
    }
    me string:atSafe(me int64: pos) <- {
        // Use this to print or log; Won't return 0 or block
        if(tail==NULL){return("BufEmpty")}
        if(tail.myOffset + tail.buf.size() <= pos){return("PastEOB")}
        their strInnerBuf: bufr <- tail
        while(bufr!=NULL){
            if(bufr.myOffset <= pos and bufr.myOffset + bufr.buf.size() > pos){
                me char: ch <- bufr.buf[pos-bufr.myOffset]
                if(ch=="\n"){return("\\n")}
                if(ch=="\t"){return("\\t")}
                if(ch<" "){me int: chNum<-ch; return("\\"+toString(chNum))}
                me string: S; S <+- ch
                return(S)
            }
            bufr <- bufr.prev
        }
        return("BufERROR")
    }
        // call findInrBufWithPos to get the inr buf with the character prev.EndingLineNumber and count up to current position
    me string: getLocationAtCharPos(me int64: charPos) <- {
        their strInnerBuf: bufWithChar <- findInrBufWithPos(charPos)
        me int64: lastLinePos <- 0
        me int64: errLineNum <- 1
        me int64: errCharPos <- 0
        if(bufWithChar.prev){
            errLineNum <- bufWithChar.prev.endingLineNumber
        }
        me int: bufSize <- bufWithChar.buf.size()
        withEach idx in RANGE(0..bufSize) {
            if(bufWithChar.myOffset + idx > charPos){
                break()
            }
            if(bufWithChar.buf[idx] == "\n"){
                errLineNum <+- 1
                lastLinePos <- idx
            }
        }
        errCharPos <- charPos-(lastLinePos+bufWithChar.myOffset)
        return(streamName+":"+toString(errLineNum)+":"+toString(errCharPos))
    }

    void: close() <- {
        me MutexMngr: bufMtxMgr{bufMutex}
        bufferClosed <- true
        bufLock.notifyOne()
        //log("CLOSE-NOTIFYING:")
    }
    me int64: size() <- {
        return(crntStreamSize)
    }
    me string: stringify() <- {
        me string: retVal
        their strInnerBuf: crnt <- head
        while(crnt!=NULL){
            retVal <- "'"+crnt.buf + "'\n"
            crnt <- crnt.next
        }
        return(retVal)
    }
    void: init(me string: StreamName) <- {
        head <- NULL
        tail <- NULL
        crntStreamSize <- 0
        bufferClosed   <- false
        streamName <- StreamName
    }
}

struct strBufItr{
    their strBuf: theStrBuf
    their strInnerBuf: crntInnerBuf
    me int64: crntRelPos
    me int64: crntAbsPos() <- {return(crntInnerBuf.myOffset + crntRelPos)}
    me mode[bfWaiting, bfOK, bfEOB, bfError]: status
    me char: ch() <- {
        return(crntInnerBuf.buf[crntRelPos])
    }
    me int: goNext() <- {
        crntRelPos <+- 1
        if(crntRelPos >= crntInnerBuf.buf.size()){
            crntInnerBuf <- theStrBuf.findInrBufWithPos(crntAbsPos())
            if(crntInnerBuf==NULL){
                if(theStrBuf.bufferClosed){status <- bfEOB}
                else{status <- bfError}
            }else{
                crntRelPos <- 0
                status <- bfOK
            }
        }
        return(status)
    }
    me string: stringify() <- {
        me string: retVal
        if(crntInnerBuf){retVal <- "'"+crntInnerBuf.buf +"'("+toString(crntRelPos)+ ")\n"}
        else{retVal <- "NULL"}
        return(retVal)
    }
}

struct strBufRange{
    their strBuf: theStrBuf
    me int64: startPos
    me int64: endPos
    void: INIT(me int64: start, me int64: end) <- {}  // inc RefCount
    void: DEINIT() <- {} // dec RefCOunt
}
