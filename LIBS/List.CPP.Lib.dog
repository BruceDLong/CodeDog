// List.CPP.Lib.dog
requirements = [
    [tagOneOf, Lang, [CPP]]
]

interface={
    provides = [List_implementation]
    libFiles = []
    headers  = []
}

LibDescription ={
    useStatus   = dynamic
    description = 'List in routines for CPP'
}

struct CPP_Deque<nodeType>: implements=List wraps=deque native=lang specs={insert=linear append=constant prepend=constant}{
    void: append(nodeType: value)               <- <%!push_back(%1)%>
    nodeType: at(me int: position)              <- <%!at(%1)%>
    void: clear()                               <- <%!clear()%>
    void: clipToSize(me int: size)              <- <%!resize(%1)%>
    itr nodeType: deleteNth(me int: position)   <- <%!%0.erase(%0.begin()+%1)%>
    itr nodeType: end()                         <- <%!end()%>           // returns itr to past-the-end element
    itr nodeType: erase(itr nodeType: position) <- <%!%0.erase(%0.begin()+%1)%>
    itr nodeType: eraseInterval(itr nodeType: start, itr nodeType: end) <- <%!erase(%1, %2)%>
    nodeType: first()                           <- <%!front()%>
    itr nodeType: front()                       <- <%!begin()%>
    nodeType: __getAt(me int: position)         <- <%!at(%1)%>
    itr nodeType: insert(itr nodeType: position, nodeType: value) <- <%!insert(%1, %2)%>
    itr nodeType: insertIdx(me int: position, nodeType: value)    <- <%!%0.insert((%0.begin()+%1), %2)%>
    me bool: isEmpty()                          <- <%!empty()%>
    nodeType: last()                            <- <%!back()%>
    itr nodeType: nthItr()                      <- <%!(%0.begin()+%1)%>
    nodeType: popFirst()                        <- <%!%0.front(); %0.pop_front()%>
    nodeType: popLast()                         <- <%!%0.back(); %0.pop_back()%>
    me void: prepend(nodeType: value)           <- <%!push_front(%1)%>
    itr nodeType: __putAt(itr nodeType: position, nodeType: value) <- <%!insert(%1, %2)%>
    void: resize(me int: size)                  <- <%!resize(%1)%>
    me uint: size()                             <- <%!size()%>
    /////////////////////////////////////////
    me void: pushFirst(nodeType: value)         <- <%!push_front(%1)%>
    me void: pushLast(nodeType: value)          <- <%!push_back(%1)%>
    // TODO: need Reverse Iterators working first
    //itr nodeType: back() <- <%!rbegin()%>             // returns reverse iterator to the reverse beginning of the sequence container
}
