// CodeDog Map model

requirements = [
    [require, Map_implementation]
]

model Map<keyType, valueType>{
    const model: MapNode(keyType: key, valueType: value) <- {
        me keyType: key
        me valueType: value
        their Node_RBTree<keyType, valueType>: goNext()
        their Node_RBTree<keyType, valueType>: goPrev()
    }
    const model: MapItr(keyType: key, valueType: value) <- {
        our MapNode<keyType, valueType>: node
        our MapNode<keyType, valueType>: goNext()
        //our MapNode<keyType, valueType>: goPrev()
        me valueType: val()
    }

    valueType: at(keyType)
    void: clear()
    me bool: containsKey(keyType: key)
    our MapItr: end()
    void: erase(keyType: key)
    our MapItr: find(keyType: key)
    valueType: first()
    our MapItr: front()
    our MapItr: insert(keyType: key, valueType: value)
    me bool:  isEmpty()
    valueType: last()
    //itr valueType: lower_bound(keyType: key)
    me uint:  size()
}

////////////////////////////////////////////////////////
struct RBTreeMap<keyType, valueType>: implements=Map native=codeDog specs={insert=logarithmic find=logarithmic at=logarithmic}{// find=logarithmic at=logarithmic}{  // constant
    const struct: Node_RBTree(keyType: key, valueType: value): implements=MapNode <- {
        me keyType: key
        me valueType: value
        me bool: isBlack
        me bool: isLeaf
        their Node_RBTree<keyType, valueType>: left
        their Node_RBTree<keyType, valueType>: right
        their Node_RBTree<keyType, valueType>: parent
        // CONSTRUCTORS
        me none: Node_RBTree(keyType: _key, valueType: _val) <-{
            key   <- _key
            value <- _val
        }
    }
    const struct: iterator_RBTreeMap(keyType: key, valueType: value):  implements=MapItr native=codeDog <- {
        their Node_RBTree<keyType, valueType>: node
        their RBTreeMap<keyType, valueType>: container
        their Node_RBTree<keyType, valueType>: goNext() <- {
            if(node.right != NULL and !node.right.isLeaf){
                node <- findSmallest(node.right)
                if(node==NULL or node.isLeaf){node <- container.edge}
                return(node)
            }
            their Node_RBTree<keyType, valueType>: parentTemp <- node.parent
            their Node_RBTree<keyType, valueType>: nodeTemp   <- node
            while(parentTemp!=NULL and nodeTemp===parentTemp.right){
                nodeTemp   <- parentTemp
                parentTemp <- parentTemp.parent
            }
            node <- parentTemp
            if(node==NULL or node.isLeaf){node <- container.edge}
            return(node)
        }
        their Node_RBTree<keyType, valueType>: findSmallest(their Node_RBTree<keyType, valueType>: crntNode) <- {
            their Node_RBTree<keyType, valueType>: prevNode <- NULL
            while(!(crntNode == NULL or crntNode.isLeaf)){
                prevNode <- crntNode
                crntNode <- crntNode.left
            }
            if(prevNode != NULL){return(prevNode)}
            return(crntNode)
        }
        itr iterator_RBTreeMap<keyType, valueType>: __opAssign(itr iterator_RBTreeMap<keyType, valueType>: RHS) <- {
            node <- RHS.node
            return(self)
        }
        their iterator_RBTreeMap<keyType, valueType>: __inc() <- { // Prefix ++ overload
            if(node){
                node <- goNext()
            }
            return(self)
        }
        me bool: __notEqual(itr iterator_RBTreeMap<keyType, valueType>: RHS) <- {
            return(node !== RHS.node)
        }
        me valueType: __derefPtr() <- {return(node.value)}
        me bool: __isEqual(itr iterator_RBTreeMap<keyType, valueType>: RHS) <- {
            return(node === RHS.node)
        }
        their iterator_RBTreeMap<keyType, valueType>: __opPtr() <- {
            return(self)
        }
        me valueType: val()                         <- <%!%0%>
        me valueType: key()                         <- <%!.node->key%>
    }

    their Node_RBTree<keyType, valueType>: Root
    their Node_RBTree<keyType, valueType>: Leaf
    their Node_RBTree<keyType, valueType>: edge
    me uint: mapSize

    valueType: at(keyType: searchKey) <- {
        their Node_RBTree<keyType, valueType>: node
        node <- getNode(Root, searchKey)
        return(node.value)
    }
    void: clear() <- {
        Root <- NULL
        Leaf <- NULL
        mapSize <- 0
    }
    me bool: containsKey(keyType: key) <- {
        if(getNode(Root, key)){return(true)}
        else{return(false)}
    }
    itr iterator_RBTreeMap<keyType, valueType>: end() <- {
        itr iterator_RBTreeMap<keyType, valueType>: retItr
        retItr.node <- edge
        return(retItr)
    }
    me void: erase(keyType: key) <- {
        their Node_RBTree<keyType, valueType>: node
        node <- getNode(Root, key)
        removeHelper(node, key)
    }
    itr iterator_RBTreeMap<keyType, valueType>: find(keyType: key) <- {
        their Node_RBTree<keyType, valueType>: retNode <- getNode(Root, key)
        if(retNode==NULL){retNode <- edge}
        itr iterator_RBTreeMap<keyType, valueType>: retItr; retItr.node <- retNode
        return(retItr)
    }
    valueType: first() <- {
        their Node_RBTree<keyType, valueType>: smallestNode <- findSmallest(Root)
        return(smallestNode.value)
    }
    itr iterator_RBTreeMap<keyType, valueType>: front() <- {
        itr iterator_RBTreeMap<keyType, valueType>: retItr; retItr.node <- findSmallest(Root)
        retItr.container <- self
        return(retItr)
    }
    their Node_RBTree<keyType, valueType>: insert(keyType: key, valueType: value) <- {
        their Node_RBTree<keyType, valueType>: newNode
        if(Root == NULL){
            Allocate(Leaf)
            Allocate(edge)
            Leaf.isBlack <-true
            Leaf.isLeaf  <-true
            Allocate(newNode, key, value)
            newNode.isBlack <-true
            newNode.left <- Leaf
            newNode.right <- Leaf
            Root <- newNode
            mapSize <- mapSize + 1
            return(newNode)
        }
        Allocate(newNode, key, value)
        newNode.left <- Leaf
        newNode.right <- Leaf
        BSTInsert(Root, newNode)
        mapSize <- mapSize + 1
        checkColor(newNode)
        return(newNode)
    }
    me bool: isEmpty() <- {
        if(Root==NULL){return(true)}
        return(false)
    }
    valueType: last() <- {
        their Node_RBTree<keyType, valueType>: crntNode <- Root
        their Node_RBTree<keyType, valueType>: prevNode
        while(!(crntNode === Leaf)){
            prevNode <- crntNode
            crntNode <- crntNode.right
        }
        return(prevNode.value)
    }
    //itr valueType: lower_bound(keyType: key) <- {}
    void: set(keyType: key, valueType: value) <- {
        their Node_RBTree<keyType, valueType>: node
        node <- getNode(Root, key)
        node.value <- value
    }
    me uint:  size() <- {return(mapSize)}
    valueType: __index(keyType: searchKey) <- {
        itr iterator_RBTreeMap<keyType, valueType>: retItr <- find(searchKey)
        if(retItr.node == edge){
            me valueType: newVal
            retItr.node <- insert(searchKey, newVal)
        }
        return(retItr.node.value)
    }
    ////////////////////////////////////////////////////////////////////
    me bool: isLeftChild(their Node_RBTree<keyType, valueType>: node) <- {
        if(node.parent != NULL and node === node.parent.left){return(true)}
        {return(false)}
    }

    me void: leftRotate(their Node_RBTree<keyType, valueType>: node, me bool: changeColor) <- {
        their Node_RBTree<keyType, valueType>: temp <- node.right
        node.right <- temp.left
        node.right.parent <- node
        if(node.parent == NULL){
            Root <- temp
            temp.parent <- NULL
        }else{
            temp.parent <- node.parent
            if(isLeftChild(node)){temp.parent.left <- temp}
            else{temp.parent.right <- temp}
        }
        temp.left <- node
        node.parent <- temp
        if(changeColor == true){
            node.isBlack <- true
            node.parent.isBlack <- false
        }
    }

    me void: rightRotate(their Node_RBTree<keyType, valueType>: node, me bool: changeColor) <- {
        their Node_RBTree<keyType, valueType>: temp <- node.left
        node.left <- temp.right
        node.left.parent <- node
        if(node.parent == NULL){
            Root <- temp
            temp.parent <- NULL
        }else{
            temp.parent <- node.parent
            if(isLeftChild(node) == false){temp.parent.right <- temp}
            else{temp.parent.left <- temp}
        }
        temp.right <- node
        node.parent <- temp
        if(changeColor == true){
            node.isBlack <- true
            node.parent.isBlack <- false
        }
    }

    me void: rotate(their Node_RBTree<keyType, valueType>: node)<-{
        their Node_RBTree<keyType, valueType>: GParentNode <- node.parent.parent
        if(isLeftChild(node) == true){
            if(isLeftChild(node.parent) == true){
                rightRotate(GParentNode, false)
                node.isBlack <-false
                node.parent.isBlack <- true
                node.parent.right.isBlack <- false
                return()
            }
            rightRotate(node.parent, false)
            leftRotate(GParentNode, false)
            node.isBlack <-true
            node.right.isBlack <- false
            node.left.isBlack <- false
            return()
        }
        //// rotate for right child
        if(isLeftChild(node.parent) == false){
            leftRotate(GParentNode, false)
            node.isBlack <-false
            node.parent.isBlack <- true
            node.parent.left.isBlack <- false
            return()
        }
        leftRotate(node.parent, false)
        rightRotate(GParentNode, false)
        node.isBlack <-true
        node.right.isBlack <- false
        node.left.isBlack <- false
        return()
    }

    me void: correctTree(their Node_RBTree<keyType, valueType>: node)<-{
        if(node.parent===Root){
            print ("ERROR: PARENT ", node.parent.key," is Root.  Node key is ", node.key, "\n")
            exit(1)
        }
        //// PARENT IS LEFT CHILD
        if(isLeftChild(node.parent) == true){
            //// BLACK AUNT ROTATE
            if(node.parent.parent.right.isBlack == true){
                rotate(node)
                return()
            }
            //// RED AUNT COLOR FLIP
            node.parent.parent.right.isBlack <- true
            node.parent.parent.isBlack <- false
            node.parent.isBlack <- true
            return()
        }
        //// PARENT IS RIGHT CHILD
        //// BLACK AUNT ROTATE
        if(node.parent.parent.left.isBlack == true){
            rotate(node)
            return()
        }
        //// RED AUNT COLOR FLIP
        node.parent.parent.left.isBlack <- true
        node.parent.parent.isBlack <- false
        node.parent.isBlack <- true
        return()
    }

    me void: checkColor(their Node_RBTree<keyType, valueType>: node) <-{
        if(node === Root or node === Leaf){
            Root.isBlack <- true
            return()
        }
        if(node.isBlack == false and node.parent.isBlack == false){correctTree(node)}
        if(node.parent!=NULL){checkColor(node.parent)}
    }

    me void: BSTInsert(their Node_RBTree<keyType, valueType>: root, their Node_RBTree<keyType, valueType>: newNode) <- {
        if(newNode.key > root.key){
            if(root.right === Leaf){
                root.right <- newNode
                newNode.parent <- root
                return()
            }
            BSTInsert(root.right, newNode)
            return()
        }
        if(root.left === Leaf){
            root.left <- newNode
            newNode.parent <-root
            return()
        }
        BSTInsert(root.left, newNode)
        return()
    }

    me int: height()<-{
        if(Root == NULL){return(0)}
        return(heightHelper(Root)-1)
    }

    me int: heightHelper(their Node_RBTree<keyType, valueType>: node)<-{
        if(node == NULL){return(0)}
        me int: leftHeight <- heightHelper(node.left)+1
        me int: rightHeight <- heightHelper(node.right)+1
        if(leftHeight > rightHeight){return(leftHeight)}
        return(rightHeight)
    }

    me void: removeHelper(their Node_RBTree<keyType, valueType>: node, keyType: key) <- {
        if(node === Leaf or node == NULL){return()}
        if(node.key == key){
            if(node.right === Leaf or node.left === Leaf){deleteOneChild(node)}
            else{
                their Node_RBTree<keyType, valueType>: inorderSuccessor <- findSmallest(node.right)
                node.key <- inorderSuccessor.key
                removeHelper(node.right, node.key)
            }
        }
        if(node.key < key){removeHelper(node.right, key)}
        else{removeHelper(node.left, key)}
    }

    me void: deleteOneChild(their Node_RBTree<keyType, valueType>: nodeToBeDelete) <- {
        their Node_RBTree<keyType, valueType>: child
        if(nodeToBeDelete.right === Leaf){child <- nodeToBeDelete.left}
        else{child <- nodeToBeDelete.right}
        replaceNode(nodeToBeDelete, child)
        if(nodeToBeDelete.isBlack == true){
            if(child.isBlack == false){child.isBlack <- true}
            else{deleteCase1(child)}
        }
    }

    me void: replaceNode(their Node_RBTree<keyType, valueType>: node, their Node_RBTree<keyType, valueType>: child) <- {
        child.parent <- node.parent
        if(node.parent == NULL){Root <-child}
        else{
            if(isLeftChild(node)){node.parent.left <- child}
            else{node.parent.right <- child}
        }
    }

    their Node_RBTree<keyType, valueType>: findSmallest(their Node_RBTree<keyType, valueType>: crntNode) <- {
        their Node_RBTree<keyType, valueType>: prevNode <- NULL
        while(!(crntNode == NULL or crntNode === Leaf)){
            prevNode <- crntNode
            crntNode <- crntNode.left
        }
        if(prevNode != NULL){return(prevNode)}
        return(crntNode)
    }

    me void: deleteCase1(their Node_RBTree<keyType, valueType>: doubleBlackNode) <- {
        print ("deleteCase1: ", doubleBlackNode.key, "\n")
        if(doubleBlackNode === Leaf){print("    Leaf\n")}
        if(doubleBlackNode.parent == NULL){
            Root <- doubleBlackNode
            return()
        }
        deleteCase2(doubleBlackNode)
    }

    me void: deleteCase2(their Node_RBTree<keyType, valueType>: doubleBlackNode) <- {
        print ("deleteCase2: ", doubleBlackNode.key, "\n")
        their Node_RBTree<keyType, valueType>: siblingNode
        siblingNode <- findSiblingNode(doubleBlackNode)
        if(siblingNode.isBlack == false){
            if(isLeftChild(siblingNode)){rightRotate(siblingNode, true)}
        else{leftRotate(siblingNode, true)}
            if(siblingNode.parent == NULL){Root <- siblingNode}
        }
        deleteCase3(doubleBlackNode)
    }

    me void: deleteCase3(their Node_RBTree<keyType, valueType>: doubleBlackNode) <- {
        print ("deleteCase3: ", doubleBlackNode.key, "\n")
        their Node_RBTree<keyType, valueType>: siblingNode <- findSiblingNode(doubleBlackNode)
        if(doubleBlackNode.parent.isBlack == true and siblingNode.isBlack == true and siblingNode.left.isBlack == true and siblingNode.right.isBlack == true){
            siblingNode.isBlack <- false
            deleteCase1(doubleBlackNode.parent)
        }else{deleteCase4(doubleBlackNode)}
    }

    me void: deleteCase4(their Node_RBTree<keyType, valueType>: doubleBlackNode) <- {
        print ("deleteCase4: ", doubleBlackNode.key, "\n")
        their Node_RBTree<keyType, valueType>: siblingNode <- findSiblingNode(doubleBlackNode)
        if(doubleBlackNode.parent.isBlack == false and siblingNode.isBlack == true and siblingNode.left.isBlack == true and siblingNode.right.isBlack == true){
            siblingNode.isBlack <- false
            doubleBlackNode.parent.isBlack <- true
            return()
        }else{deleteCase5(doubleBlackNode)}
    }

    me void: deleteCase5(their Node_RBTree<keyType, valueType>: doubleBlackNode) <- {
        print ("deleteCase5: ", doubleBlackNode.key, "\n")
        their Node_RBTree<keyType, valueType>: siblingNode <- findSiblingNode(doubleBlackNode)
        if(siblingNode.isBlack == true){
            if(isLeftChild(doubleBlackNode) == true and siblingNode.right.isBlack == true and siblingNode.left.isBlack == false){
                rightRotate(siblingNode.left, true)
            }else if(isLeftChild(doubleBlackNode) == false and siblingNode.left.isBlack == true and siblingNode.right.isBlack == false){
                leftRotate(siblingNode.right, true)
            }
        }
        deleteCase6(doubleBlackNode)
    }

    me void: deleteCase6(their Node_RBTree<keyType, valueType>: doubleBlackNode) <- {
        print ("deleteCase6: ", doubleBlackNode.key, "\n")
        their Node_RBTree<keyType, valueType>: siblingNode <- findSiblingNode(doubleBlackNode)
        siblingNode.isBlack <- siblingNode.parent.isBlack
        siblingNode.parent.isBlack <- true
        if(isLeftChild(doubleBlackNode) == true){
            siblingNode.right.isBlack <- true
            leftRotate(siblingNode, false)
        }else{
            siblingNode.left.isBlack <- true
            rightRotate(siblingNode, false)
        }
        if(siblingNode.parent == NULL){Root <- siblingNode}
    }

    their Node_RBTree<keyType, valueType>: findSiblingNode(their Node_RBTree<keyType, valueType>: node) <- {
        their Node_RBTree<keyType, valueType>: parent<- node.parent
        if(isLeftChild(node) == true){return(parent.right)}
        else{return(parent.left)}
    }

    their Node_RBTree<keyType, valueType>: getNode(their Node_RBTree<keyType, valueType>: node, keyType: searchKey) <- {
        while(!(node === Leaf)){
            if(searchKey < node.key){node <- node.left}
            else if(searchKey > node.key){node <- node.right}
            else if(searchKey == node.key){return(node)}
        }
        return(NULL)
    }

    me void: traverse() <- {
        print("_____________________________________\n")
        print("height: ", height(), "\n")
        print("T R A V E R S E\n")
        traverseHelper(Root, "")
        print("_____________________________________\n")
    }

    me void: traverseHelper(their Node_RBTree<keyType, valueType>: node, me string: indent) <- {
        me string: isBlackStr
        if(node === Leaf){return()}
        traverseHelper(node.left, indent+"    ")
        if(node.isBlack == true){isBlackStr<-"B"}
        else{isBlackStr<-"R"}
        print(indent, node.key, ":", isBlackStr, "\n")
        traverseHelper(node.right, indent+"    ")
    }

    me int: blackNodes(their Node_RBTree<keyType, valueType>: node) <- {
        if(node === Root){return(1)}
        me int: rightBlackNodes <- blackNodes(node.right)
        me int: leftBlackNodes <- blackNodes(node.left)
        if(rightBlackNodes!=leftBlackNodes){print("ERROR blackNodes: ", rightBlackNodes, ", ", leftBlackNodes)}
        if(node.isBlack){leftBlackNodes <- leftBlackNodes + 1}
        return(leftBlackNodes)
    }

}
