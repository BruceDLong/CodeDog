// CodeDog Map model

requirements = [
    [require, Map_implementation]
]

model Map<keyType, valueType>{
    const model: MapNode(keyType: key, valueType: value) <- {
        me keyType: key
        me valueType: value
        our MapNode<keyType, valueType>: goNext()
        our MapNode<keyType, valueType>: goPrev()
    }
    const model: MapItr(keyType: key, valueType: value) <- {
        our MapNode<keyType, valueType>: node
        our MapNode<keyType, valueType>: goNext()
        //our MapNode<keyType, valueType>: goPrev()
        me valueType: val()
    }

    valueType: at(keyType)
    void: clear()
    me bool: containsKey(keyType: key)
    our MapItr: end()
    void: erase(keyType: key)
    our MapItr: find(keyType: key)
    valueType: first()
    our MapItr: front()
    our MapItr: insert(keyType: key, valueType: value)
    me bool:  isEmpty()
    valueType: last()
    //itr valueType: lower_bound(keyType: key)
    me uint:  size()
}

////////////////////////////////////////////////////////
struct RBTreeMap<keyType, valueType>: implements=Map native=codeDog specs={insert=logarithmic find=logarithmic at=logarithmic}{// find=logarithmic at=logarithmic}{  // constant
    // Thanks to: https://www.programiz.com/dsa/red-black-tree
    const struct: Node_RBTree(keyType: key, valueType: value): implements=[MapNode, Equatable] <- {
        me keyType: key
        me valueType: value
        me bool: isBlack
        me bool: isLeaf
        our Node_RBTree<keyType, valueType>: left
        our Node_RBTree<keyType, valueType>: right
        our Node_RBTree<keyType, valueType>: parent
        // CONSTRUCTORS
        me none: Node_RBTree(keyType: _key, valueType: _val) <-{
            key     <- _key
            value   <- _val
            isBlack <- true
            left    <- NULL
            right   <- NULL
            parent  <- NULL
        }
    }
    const struct: iterator_RBTreeMap(keyType: key, valueType: value):  implements=MapItr native=codeDog <- {
        our Node_RBTree<keyType, valueType>: node
        their RBTreeMap<keyType, valueType>: container

        our Node_RBTree<keyType, valueType>: goNext() <- {
            if(node.right != NULL and !node.right.isLeaf){
                node <- findSmallest(node.right)
                if(node==NULL  or node.isLeaf){node <- container.edge}
                return(node)
            }
            our Node_RBTree<keyType, valueType>: parentTemp <- node.parent
            our Node_RBTree<keyType, valueType>: nodeTemp   <- node
            while(parentTemp!=NULL and nodeTemp===parentTemp.right){
                nodeTemp   <- parentTemp
                parentTemp <- parentTemp.parent
            }
            node <- parentTemp
            if(node==NULL or node.isLeaf){node <- container.edge}
            return(node)
        }
        our Node_RBTree<keyType, valueType>: findSmallest(our Node_RBTree<keyType, valueType>: crntNode) <- {
            our Node_RBTree<keyType, valueType>: prevNode <- NULL
            while(!(crntNode == NULL or crntNode.isLeaf)){
                prevNode <- crntNode
                crntNode <- crntNode.left
            }
            if(prevNode != NULL){return(prevNode)}
            return(crntNode)
        }
        their iterator_RBTreeMap<keyType, valueType>: __opAssign(itr iterator_RBTreeMap<keyType, valueType>: RHS) <- {
            node <- RHS.node
            return(self)
        }
        their iterator_RBTreeMap<keyType, valueType>: __inc() <- { // Prefix ++ overload
            if(node){
                node <- goNext()
            }
            return(self)
        }
        me bool: __notEqual(itr iterator_RBTreeMap<keyType, valueType>: RHS) <- {
            return(node !== RHS.node)
        }
        me valueType: __derefPtr() <- {return(node.value)}
        me bool: __isEqual(itr iterator_RBTreeMap<keyType, valueType>: RHS) <- {
            return(node === RHS.node)
        }
        their iterator_RBTreeMap<keyType, valueType>: __opPtr() <- {
            return(self)
        }
        me valueType: val()                         <- <%!%0.node->value%>
        me valueType: key()                         <- <%!%0.node->key%>
    }

    our Node_RBTree<keyType, valueType>: Root
    our Node_RBTree<keyType, valueType>: Leaf
    our Node_RBTree<keyType, valueType>: edge
    me uint: mapSize

    valueType: at(keyType: searchKey) <- {
        our Node_RBTree<keyType, valueType>: node
        node <- getNode(Root, searchKey)
        return(node.value)
    }
    void: clear() <- {
        Leaf    <- NULL
        Root    <- Leaf
        mapSize <- 0
    }
    me bool: containsKey(keyType: key) <- {
        if(getNode(Root, key)){return(true)}
        else{return(false)}
    }
    itr iterator_RBTreeMap<keyType, valueType>: end() <- {
        itr iterator_RBTreeMap<keyType, valueType>: retItr{edge, self}
        return(retItr)
    }
    me void: erase(keyType: key) <- {
        our Node_RBTree<keyType, valueType>: node
        node <- getNode(Root, key)
        removeHelper(node, key)
    }
    itr iterator_RBTreeMap<keyType, valueType>: find(keyType: key) <- {
        our Node_RBTree<keyType, valueType>: retNode <- getNode(Root, key)
        if(retNode==NULL){retNode <- edge}
        itr iterator_RBTreeMap<keyType, valueType>: retItr{retNode, self}
        return(retItr)
    }
    valueType: first() <- {
        our Node_RBTree<keyType, valueType>: smallestNode <- findSmallest(Root)
        return(smallestNode.value)
    }
    itr iterator_RBTreeMap<keyType, valueType>: front() <- {
        itr iterator_RBTreeMap<keyType, valueType>: retItr{findSmallest(Root), self}
        retItr.container <- self
        return(retItr)
    }
    our Node_RBTree<keyType, valueType>: insert(keyType: key, valueType: value) <- {
        if(containsKey(key)){
            our Node_RBTree<keyType, valueType>: node
            node <- getNode(Root, key)
            node.value <- value
            return(node)
        }else{
            our Node_RBTree<keyType, valueType>:: newNode
            newNode.parent  <- NULL
            newNode.key     <- key
            newNode.value   <- value
            newNode.left    <- Leaf
            newNode.right   <- Leaf
            newNode.isBlack <- false
            our Node_RBTree<keyType, valueType>: temp <- NULL
            our Node_RBTree<keyType, valueType>: next <- Root
            while(next!=Leaf){
                temp <- next
                if(newNode.key < next.key){next <- next.left}
                else{next <- next.right}
            }
            newNode.parent <- temp
            if(temp==NULL){Root <- newNode}
            else if(newNode.key < temp.key){temp.left <- newNode}
            else{temp.right <- newNode}
            mapSize <- mapSize + 1
            if(newNode.parent==NULL){
                newNode.isBlack <- true
                return(newNode)
            }
            if(newNode.parent.parent == NULL){
                return(newNode)
            }
            insertFix(newNode)
            return(newNode)
        }
    }
    me bool: isEmpty() <- {
        if(Root==Leaf){return(true)}
        return(false)
    }
    valueType: last() <- {
        our Node_RBTree<keyType, valueType>: crntNode <- Root
        our Node_RBTree<keyType, valueType>: prevNode
        while(!(crntNode === Leaf)){
            prevNode <- crntNode
            crntNode <- crntNode.right
        }
        return(prevNode.value)
    }
    //itr valueType: lower_bound(keyType: key) <- {}
    void: set(keyType: key, valueType: value) <- {
        our Node_RBTree<keyType, valueType>: node
        node <- getNode(Root, key)
        node.value <- value
    }
    me uint:  size() <- {return(mapSize)}
    valueType: __index(keyType: searchKey) <- {
        itr iterator_RBTreeMap<keyType, valueType>: retItr <- find(searchKey)
        if(retItr.node == edge){
            me valueType: newVal
            retItr.node <- insert(searchKey, newVal)
        }
        return(retItr.node.value)
    }
    ////////////////////////////////////////////////////////////////////
    me void: leftRotate(our Node_RBTree<keyType, valueType>: node) <- {
        our Node_RBTree<keyType, valueType>: temp <- node.right
        node.right <- temp.left
        if(temp.left != Leaf){
            temp.left.parent <- node
        }
        temp.parent <- node.parent
        if(node.parent == NULL){                // Node is ROOT
            Root <- temp
        }else if(node == node.parent.left){     // Node is LEFT child
            node.parent.left <- temp
        }else{                                  // Node is RIGHT child
            node.parent.right <- temp
        }
        temp.left <- node
        node.parent <- temp
    }

    me void: rightRotate(our Node_RBTree<keyType, valueType>: node) <- {
        our Node_RBTree<keyType, valueType>: temp <- node.left
        node.left <- temp.right
        if(temp.right != Leaf){
            temp.right.parent <- node
        }
        temp.parent <- node.parent
        if(node.parent == NULL){                  // Node is ROOT
            Root <- temp
        }else if(node == node.parent.right){         // Node is RIGHT child
            node.parent.right <- temp
        }else{                                 // Node is LEFT child
            node.parent.left <- temp
        }
        temp.right <- node
        node.parent <- temp
    }

    me void: insertFix(our Node_RBTree<keyType, valueType>: node) <- {
        our Node_RBTree<keyType, valueType>: aunt
        while(node.parent.isBlack==false){
            if(node.parent==node.parent.parent.right){
                aunt <- node.parent.parent.left
                if(aunt.isBlack == false){
                    aunt.isBlack <- true
                    node.parent.isBlack <- true
                    node.parent.parent.isBlack <- false
                    node <- node.parent.parent
                }else{
                    if(node==node.parent.left){
                        node <- node.parent
                        rightRotate(node)
                    }
                    node.parent.isBlack <- true
                    node.parent.parent.isBlack <- false
                    leftRotate(node.parent.parent)
                }
            }else{
                aunt <- node.parent.parent.right
                if(aunt.isBlack==false){
                    aunt.isBlack <- true
                    node.parent.isBlack <- true
                    node.parent.parent.isBlack <- false
                    node <- node.parent.parent
                }else{
                    if(node==node.parent.right){
                        node <- node.parent
                        leftRotate(node)
                    }
                    node.parent.isBlack <- true
                    node.parent.parent.isBlack <- false
                    rightRotate(node.parent.parent)
                }
            }
            if(node == Root){
                break()
            }
        }
        Root.isBlack <- true
    }

    me void: deleteFix(our Node_RBTree<keyType, valueType>: node) <- {
        our Node_RBTree<keyType, valueType>: sibling
        while(node!=Root and node.isBlack==true){
            if(node==node.parent.left){
                sibling <- node.parent.right
                if(sibling.isBlack==false){
                    sibling.isBlack     <- true
                    node.parent.isBlack <- false
                    leftRotate(node.parent)
                    sibling <- node.parent.right
                }
                if(sibling.left.isBlack==true and sibling.right.isBlack==true){
                    sibling.isBlack <- false
                    node <- node.parent
                }else{
                    if(sibling.right.isBlack==true){
                        sibling.left.isBlack <- true
                        sibling.isBlack      <- false
                        rightRotate(sibling)
                        sibling <- node.parent.right
                    }
                    sibling.isBlack <- node.parent.isBlack
                    node.parent.isBlack <- true
                    sibling.right.isBlack <- true
                    leftRotate(node.parent)
                    node <- Root
                }
            }else{
                sibling <- node.parent.left
                if(sibling.isBlack==false){
                    // TODO: test case
                    sibling.isBlack     <- true
                    node.parent.isBlack <- false
                    rightRotate(node.parent)
                    sibling <- node.parent.left
                }
                if(sibling.right.isBlack==true and sibling.right.isBlack==true){
                    sibling.isBlack <- false
                    node <- node.parent
                }else{
                    if(sibling.left.isBlack==true){
                        sibling.right.isBlack <- true
                        sibling.isBlack       <- false
                        leftRotate(sibling)
                        sibling <- node.parent.left
                    }
                    sibling.isBlack <- node.parent.isBlack
                    node.parent.isBlack  <- true
                    sibling.left.isBlack <- true
                    rightRotate(node.parent)
                    node <- Root
                }
          }
        }
        node.isBlack <- true
    }

    me void: removeHelper(our Node_RBTree<keyType, valueType>: node, keyType: key) <- {
        if(node === Leaf or node == NULL){return()}
        our Node_RBTree<keyType, valueType>: temp <- node
        our Node_RBTree<keyType, valueType>: child
        me bool: startIsBlack <- node.isBlack
        if(node.left.isLeaf==true or node.left==Leaf){           // node Left child is leaf
            child <- node.right
            replaceNode(node, child)
        }else if(node.right.isLeaf==true or node.right==Leaf){  // node Right child is leaf
            child <- node.left
            replaceNode(node, child)
        }else{                            // node no child is leaf
            temp         <- findSmallest(node.right)
            startIsBlack <- temp.isBlack
            child        <- temp.right
            if(temp.parent == node) {   // if temp is a child of node
                child.parent <- temp
            } else {
                replaceNode(temp, temp.right)
                temp.right        <- node.right
                temp.right.parent <- temp
            }
            replaceNode(node, temp)
            temp.left        <- node.left
            temp.left.parent <- temp
            temp.isBlack     <- node.isBlack
        }
        // TODO: delete node: handle memory leak
        if(startIsBlack==true){  // if color is black
            deleteFix(child)
        }
        mapSize <- mapSize - 1
    }

    me void: replaceNode(our Node_RBTree<keyType, valueType>: node, our Node_RBTree<keyType, valueType>: child) <- {
        if(node.parent==NULL or node==Root){    // node is ROOT
            Root <- child
        }else if(node == node.parent.left){     // node is LEFT child of parent
            node.parent.left <- child
        }else{                                  // node is RIGHT child of parent
            node.parent.right <- child
        }
        child.parent <- node.parent
    }

    our Node_RBTree<keyType, valueType>: findSmallest(our Node_RBTree<keyType, valueType>: crntNode) <- {
        our Node_RBTree<keyType, valueType>: prevNode <- NULL
        while(!(crntNode == NULL or crntNode === Leaf)){
            prevNode <- crntNode
            crntNode <- crntNode.left
        }
        if(prevNode != NULL){return(prevNode)}
        return(crntNode)
    }

    our Node_RBTree<keyType, valueType>: getNode(our Node_RBTree<keyType, valueType>: node, keyType: searchKey) <- {
        while(!(node === Leaf)){
            if(searchKey < node.key){node <- node.left}
            else if(searchKey > node.key){node <- node.right}
            else if(searchKey == node.key){return(node)}
        }
        return(NULL)
    }

    me void: traverse() <- {
        print("_____________________________________\n")
        print("T R A V E R S E\n")
        traverseHelper(Root, "")
        print("_____________________________________\n")
    }

    me void: traverseHelper(our Node_RBTree<keyType, valueType>: node, me string: indent) <- {
        me string: isBlackStr
        if(node === Leaf){return()}
        traverseHelper(node.left, indent+"    ")
        if(node.isBlack == true){isBlackStr<-"B"}
        else{isBlackStr<-"R"}
        print(indent, node.key, ":", isBlackStr, "\n")
        traverseHelper(node.right, indent+"    ")
    }

    me void: INIT() <- {
        Allocate(Leaf)
        Leaf.isBlack <- true
        Leaf.isLeaf  <- true
        Leaf.left    <- NULL
        Leaf.right   <- NULL
        Root         <- Leaf
        Allocate(edge)
    }
}
