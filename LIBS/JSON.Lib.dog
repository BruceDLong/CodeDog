/-Lib.JSON.dog
requirements = [
    [require, JSONObject_implementation]
]

interface={
    provides=[JSON]
    libFiles=[]
    headers=[]
}

LibDescription ={
    useStatus   = dynamic 
    description ='JSON parser'
    features    =[JSON]
    platforms   =[Linux, OS-X_Devices, Windows]
    bindings    =[C, CPP, perl, python]
    CPUs        =[i386, amd64, arm7]
}

struct JSON {
    me string: textToParse
    me string: ErrorMesg
    me string: chars

    void: init(me string: strToParse) <- {
        chars <- "-{[tfn]}\",:"
        textToParse <- strToParse
        ErrorMesg <- ""
    }

    me int: scrapeIntSeq(me int: pos) <- {
        me char: ch <- textToParse[pos]
        me int: txtSize <- textToParse.size()
        me int: initialChars <- 0
        me string: chars <- "+-"
        if(pos >= txtSize){
            /- Set I/O Error: Read past EOS
            ErrorMesg <- "Integer went past end of JSON string."
            return(-1)
        }
        if(ch==chars[0] or ch==chars[1]){ initialChars <- 1}
        return(scrapeUintSeq(pos)+initialChars)
    }

    me int: scrapeUintSeq(me int: pos) <- {
        me char: ch
        me int: txtSize <- textToParse.size()
        withEach p in RANGE(pos .. txtSize) {
            ch <- textToParse[p]
            if(isdigit(ch)){}else{if(p==pos){return(-1)} else{return(p-pos)}}
        }
        return(txtSize-pos)
    }

    me int: scrapeQuotedStr2(me int: pos) <- {
        if(chkStr(pos, "\"")>=0){pos <- pos+1}else{return(-1)}
        me int: sLen <- escapedScrapeUntil(pos, "\"")
        if(sLen<0){
            ErrorMesg <- "Missing end quote."
            return(-1)
        }
        return(sLen+2)
    }

    me int: escapedScrapeUntil(me int:pos, me string:endChar) <- {
        me char: ch
        me string: prevCharStr <- " "
        me char: prevChar <- prevCharStr[0]
        me char: ender <- endChar[0]
        me int: txtSize <- textToParse.size()
        me string: escCharStr <- "\\ "
        me char: escChar <- escCharStr[0]
        withEach p in RANGE(pos .. txtSize) {
            ch <- textToParse[p]
            if(prevChar!=escChar and ch==ender){return(p-pos)}
            if(prevChar==escChar and ch==escChar) {prevChar<-escCharStr[1]}
            else {prevChar <- ch}
        }
        return(-1)
    }

    me int: chkStr(me int: pos, me string: s) <- {
        me int: L <- s.size()
        if(pos+L > textToParse.size()){
            ErrorMesg <- "Expected '"+s+"' but went past end of JSON string."
            return(-1)
        }
        withEach i in RANGE(0 .. L) {
            if( s[i] != textToParse[pos+i]) {
                ErrorMesg <- "Expected '" + s + "'."
                return(-1)
            }
        }
        return(L)
    }

    me int: scrapeWS(me int: pos) <- {
        me char: ch
        me int: txtSize <- textToParse.size()
        withEach p in RANGE(pos .. txtSize) {
            ch <- textToParse[p]
            if(isspace(ch)){}else{if(p==pos){return(0)} else{return(p-pos)}}
        }
        return(txtSize-pos)
    }

    me char: peek(me int: pos) <-{
        me int: newPos <- scrapeWS(pos)
        return(textToParse[pos+newPos])
    }

    me int: parse(me int: pos, their JSONValue: JV, me string: indent) <-{
        if(pos >= textToParse.size()){print("POS is out of bounds: ", pos, "\n"); exit(1)}
        me int: startPos <- pos
        me int: length <- 0
        pos <- pos + scrapeWS(pos)
        me char: ch <- textToParse[pos]

        if(isdigit(ch) or ch==chars[0]){
            length <- scrapeIntSeq(pos)
            if (length != -1){JV.setAsInt(stoi(textToParse.subStr(pos, length)))}
        }else if(ch == chars[8]){                               /- '"'
            length <- scrapeQuotedStr2(pos)
            if (length != -1){JV.setAsString(textToParse.subStr(pos, length))}

        }else if(ch==chars[1]){                                 /- ""
            pos <- pos + 1
            pos <- pos + scrapeWS(pos)
            me char: nxtChar <- peek(pos)
            JV.setAsObject()
            while(nxtChar != chars[7]){       /- ""
                pos <- pos + scrapeWS(pos)
                me int: keyStart <- pos
                me int: keyLen <- scrapeQuotedStr2(pos);              if(ErrorMesg != ""){return(-1)}
                me string: key <- textToParse.subStr(keyStart, keyLen)
                pos <- pos + keyLen
                pos <- pos + scrapeWS(pos)
                pos <- pos + chkStr(pos, ":");                          if(ErrorMesg != ""){return(-1)}
                their JSONValue: inner_JV; Allocate(inner_JV)
                pos <- pos + parse(pos, inner_JV, indent + "|     ");      if(ErrorMesg != ""){return(-1)}
                JV.addObjectMember(key, inner_JV)
                pos <- pos + scrapeWS(pos)
                nxtChar <- peek(pos)
                if(nxtChar == chars[9]){pos <- pos + 1}         /- ","
                else{
                    if(nxtChar == chars[7]){pos <- pos + 1}     /- ""
                    else {ErrorMesg <- "'}' or ',' expected."; return(-1)}
                }
            }
        }else if(ch==chars[2]){                                 /- "["
            pos <- pos + 1
            pos <- pos + scrapeWS(pos)
            me char: nxtChar <- peek(pos)
            JV.setAsArray()
            withEach count in WHILE(nxtChar != chars[6]) {       /- "]"
                their JSONValue: inner_JV; Allocate(inner_JV)
                pos <- pos + parse(pos, inner_JV, indent + "|     ")
                if(ErrorMesg != ""){return(-1)}
                JV.pushArrayItem(count, inner_JV)
                pos <- pos + scrapeWS(pos)
                nxtChar <- peek(pos)
                if(nxtChar == chars[9]){pos <- pos + 1}         /- ","
                else{
                    if(nxtChar == chars[6]){pos <- pos + 1}
                    else {ErrorMesg <- ("']' or ',' expected."); return(-1)}
                }
            }
        }else if (ch==chars[3]){                                /- "t"
            length <- chkStr(pos, "true")
            if (length != -1){JV.setAsBool(true)}
        }else if (ch==chars[4]){                                /- "f"
            length <- chkStr(pos, "false")
            if (length != -1){JV.setAsBool(false)}
        }else if (ch==chars[5]){                                /- "n"
            length <- chkStr(pos, "null")
            if (length != -1){JV.setAsNull()}
        }else{print(indent +"unknown character in parse ", ch, "\n")}

        pos <- pos + length
        return(pos - startPos)
    }

    me string: JVtoString(their JSONValue: JV) <- {
        me string: retVal <- ""
        me int: type <- JV.getType()
        if(type == 0){          retVal <- "null"}
        else if(type == 1){     retVal <- toString(JV.getAsInt())}
        else if(type == 2){}   /- UintType
        else if(type == 3){}   /- doubleType
        else if(type == 4){    retVal <- JV.getAsString()}
        else if(type == 5){
            if(JV.getAsBool()== 1){retVal<-"true"}
            else{retVal<-"false"}
        }
        else if(type == 6){    /- arrayType
            their JSONValue[their map string]: JV_Map <- JV.getAsMap()
            retVal <- retVal + "["
            me int: arraySize <- JV_Map.size()
            withEach count in RANGE(0..arraySize) {
                if(count>0){retVal <- retVal + ", "}
                retVal <- retVal + JVtoString(JV_Map.at(toString(count)))
            }
            retVal <- retVal + "]"
        }
        else if(type == 7){    /- objectType
            their JSONValue[their map string]: JV_Map <- JV.getAsMap()
            retVal <- retVal + "{"
            me int: count <- 0
            withEach node in JV_Map {
                if(count>0){retVal <- retVal + ", "}
                count <- count +1
                retVal <- retVal + node_key +": "+ JVtoString(node)
            }
            retVal <- retVal + "}"
        } else{}
        return (retVal)
    }
    
    me string: query(their JSONValue: JV, me string: key) <- {
	me string: JV_key <- ""
	me int: cc <- 0
	while(key[cc] != "." and cc < key.size()){
	    JV_key <- JV_key + key[cc]
	    cc <- cc + 1
	}
	me string: restOfKey 
	if(cc < key.size()) {restOfKey <- key.subStr(cc+1, 1000)}
	me int: type <- JV.getType()
        if(type == 0){          return("null")}
        else if(type == 1){     return(toString(JV.getAsInt()))}
        else if(type == 2){}   /- UintType
        else if(type == 3){}   /- doubleType
        else if(type == 4){    return(JV.getAsString())}
        else if(type == 5){
            if(JV.getAsBool()== 1){return("true")}
            else{return("false")}
        }
        else if(type == 6){    /- arrayType
            their JSONValue[their map string]: JV_Map <- JV.getAsMap()
            me int: arraySize <- JV_Map.size()
            withEach count in RANGE(0..arraySize) {
		if(toString(count) == JV_key) {
		    their JSONValue: node <- JV_Map.at(toString(count))
		    if(restOfKey != ""){return(query(node, restOfKey))
		    } else {return(JVtoString(node))}
		}
            }
        }
        else if(type == 7){    /- objectType
            their JSONValue[their map string]: JV_Map <- JV.getAsMap()
            me int: count <- 0
            withEach node in JV_Map {
                count <- count +1
		if(node_key == "\"" + JV_key + "\"") {
		    if(restOfKey != ""){return(query(node, restOfKey))
		    } else {return(JVtoString(node))}
		}
            }
        } else{}
        return ("NOT_FOUND")
    }
}
