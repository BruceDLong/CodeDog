//############ Quic.cpp.Lib.dog
requirements = [
    [tagOneOf, Lang, [CPP]]
]

interface={
    provides=[Quic_implementation]
    packages = [
        { packageName = 'boringssl'
          fetchMethod = 'git:https://github.com/google/boringssl@commit=251b516'
          updateWhen  = 'never'    // Updating isn't implemented
          buildCmds   = {
              Linux   = {buildCmd = 'cmake . && make'
                         installFiles = ['ssl/libssl.a', 'crypto/libcrypto.a', 'include']
                  }
              Windows = {buildCmd = 'cmake . && make'}
            }
        },
        { packageName = 'libev'
          fetchMethod = 'zip:http://dist.schmorp.de/libev/libev-4.33.tar.gz'
          buildCmds   = {
              Linux   = {installFiles = ['.']}
            }
        },
        { packageName = 'lsQuic'
          fetchMethod = 'git:https://github.com/litespeedtech/lsquic.git@commit=692a910' // could start with git, zip, file, system, etc. (system = apt install lib...)
          updateWhen  = 'never'    // Updating isn't implemented
          buildCmds   = {
              Linux   = {buildCmd = 'git submodule init && git submodule update && cmake -DBORINGSSL_DIR="$boringssl" . && make'
                         installFiles = ['src/liblsquic/liblsquic.a', 'include/lsquic.h', 'include/lsquic_types.h']
                     }
             // Windows =  ['cmake -DBORINGSSL_INCLUDE="/home/bruce/devl/CodeDog/Examples/LinuxBuild/boringssl/boringssl/include" . && make', ['src/lsquic.dll', 'includes/lsquic.h']]
            }
        }

    ]
    tools=[golang-go]
    libFiles=[pthread, lsquic, ssl, crypto, z, m]
    headers=[netinet/in.h, netinet/ip.h, arpa/inet.h, sys/types.h, sys/socket.h, netdb.h, openssl/pem.h, openssl/x509.h, openssl/ssl.h, ev.c, lsquic.h]
}

featuresNeeded = [Logger]

embedAboveIncludes = `
#define EV_STANDALONE 1
#define MAX(a, b) ((a) > (b) ? (a) : (b))
`

embedVeryHigh = `

struct lsQuicMgr{
    // Common elements needed by both client and server:
    enum {
        IS_SERVER  = 1 << 0,
    }                           flags;
    int                         sock_fd;    /* socket */
    ev_io                       sock_w;     /* socket watcher */
    ev_timer                    timer;
    struct ev_loop             *loop;
    lsquic_engine_t            *engine;
    struct sockaddr_storage     local_sas;
    union
    {
        struct client
        {
            ev_io               stdin_w;    /* stdin watcher */
            struct lsquic_conn *conn;
            size_t              sz;         /* Size of bytes read is stored here */
            char                buf[0x100]; /* Read up to this many bytes */
        }   c;
    } u;
    lsQuicMgr(){memset(this, 0, sizeof(lsQuicMgr));};
};

static void process_conns(lsQuicMgr *);  // Forward decl

//// Log file routines
static int log_buf (void *ctx, const char *buf, size_t len){
    FILE *out = (FILE*)ctx;
    fwrite(buf, 1, len, out);
    fflush(out);
    return 0;
}
static const struct lsquic_logger_if logger_if = { log_buf, };

static FILE *logFileHandle;
static int s_verbose;
static void LOGX (const char *fmt, ...){
    if (s_verbose){
        va_list ap;
        fprintf(logFileHandle, "LOG: ");
        va_start(ap, fmt);
        (void) vfprintf(logFileHandle, fmt, ap);
        va_end(ap);
        fprintf(logFileHandle, "\n");
    }
}

static SSL_CTX *s_ssl_ctx;

static int load_cert(string cert_file, string key_file){
    int rv = -1;

    s_ssl_ctx = SSL_CTX_new(TLS_method());
    if (!s_ssl_ctx){
        LOGX("SSL_CTX_new failed");
        goto end;
    }
    SSL_CTX_set_min_proto_version(s_ssl_ctx, TLS1_3_VERSION);
    SSL_CTX_set_max_proto_version(s_ssl_ctx, TLS1_3_VERSION);
    SSL_CTX_set_default_verify_paths(s_ssl_ctx);
    if (1 != SSL_CTX_use_certificate_chain_file(s_ssl_ctx, cert_file.data())){
        LOGX("SSL_CTX_use_certificate_chain_file failed");
        goto end;
    }
    if (1 != SSL_CTX_use_PrivateKey_file(s_ssl_ctx, key_file.data(), SSL_FILETYPE_PEM)){
        LOGX("SSL_CTX_use_PrivateKey_file failed");
        goto end;
    }
    rv = 0;

  end:
    if (rv != 0){
        if (s_ssl_ctx)
            SSL_CTX_free(s_ssl_ctx);
        s_ssl_ctx = NULL;
    }
    return rv;
}
static SSL_CTX *get_ssl_ctx (void *peer_ctx){
    return s_ssl_ctx;
}
enum ctl_what{
    CW_SENDADDR = 1 << 0,
    CW_ECN      = 1 << 1,
};

//////////

static void setup_control_msg (struct msghdr *msg, enum ctl_what cw, const struct lsquic_out_spec *spec, unsigned char *buf, size_t bufsz){
    struct cmsghdr *cmsg;
    struct sockaddr_in *local_sa;
    struct sockaddr_in6 *local_sa6;
    struct in_pktinfo info;
    struct in6_pktinfo info6;
    size_t ctl_len;

    msg->msg_control    = buf;
    msg->msg_controllen = bufsz;

    /* Need to zero the buffer due to a bug(?) in CMSG_NXTHDR.  See
     * https://stackoverflow.com/questions/27601849/cmsg-nxthdr-returns-null-even-though-there-are-more-cmsghdr-objects
     */
    memset(buf, 0, bufsz);

    ctl_len = 0;
    int CW = (int)cw;
    for (cmsg = CMSG_FIRSTHDR(msg); CW && cmsg; cmsg = CMSG_NXTHDR(msg, cmsg))
    {
        if (CW & CW_SENDADDR)
        {
            if (AF_INET == spec->dest_sa->sa_family)
            {
                local_sa = (struct sockaddr_in *) spec->local_sa;
                memset(&info, 0, sizeof(info));
                info.ipi_spec_dst = local_sa->sin_addr;
                cmsg->cmsg_level    = IPPROTO_IP;
                cmsg->cmsg_type     = IP_PKTINFO;
                cmsg->cmsg_len      = CMSG_LEN(sizeof(info));
                ctl_len += CMSG_SPACE(sizeof(info));
                memcpy(CMSG_DATA(cmsg), &info, sizeof(info));
            }
            else
            {
                local_sa6 = (struct sockaddr_in6 *) spec->local_sa;
                memset(&info6, 0, sizeof(info6));
                info6.ipi6_addr = local_sa6->sin6_addr;
                cmsg->cmsg_level    = IPPROTO_IPV6;
                cmsg->cmsg_type     = IPV6_PKTINFO;
                cmsg->cmsg_len      = CMSG_LEN(sizeof(info6));
                memcpy(CMSG_DATA(cmsg), &info6, sizeof(info6));
                ctl_len += CMSG_SPACE(sizeof(info6));
            }
            CW &= ~CW_SENDADDR;
        }
        else if (CW & CW_ECN)
        {
            if (AF_INET == spec->dest_sa->sa_family)
            {
                const int tos = spec->ecn;
                cmsg->cmsg_level = IPPROTO_IP;
                cmsg->cmsg_type  = IP_TOS;
                cmsg->cmsg_len   = CMSG_LEN(sizeof(tos));
                memcpy(CMSG_DATA(cmsg), &tos, sizeof(tos));
                ctl_len += CMSG_SPACE(sizeof(tos));
            }
            else
            {
                const int tos = spec->ecn;
                cmsg->cmsg_level = IPPROTO_IPV6;
                cmsg->cmsg_type  = IPV6_TCLASS;
                cmsg->cmsg_len   = CMSG_LEN(sizeof(tos));
                memcpy(CMSG_DATA(cmsg), &tos, sizeof(tos));
                ctl_len += CMSG_SPACE(sizeof(tos));
            }
            CW &= ~CW_ECN;
        }
        else
            assert(0);
    }

    msg->msg_controllen = ctl_len;
}

static int packets_out_v1 (void *packets_out_ctx, const struct lsquic_out_spec *specs, unsigned count){
// A more complicated version of ea_packets_out -- this one sets source IP address and ECN.
    lsQuicMgr *const quicMgr = (lsQuicMgr*)packets_out_ctx;
    unsigned n;
    int fd, s = 0;
    struct msghdr msg;
    int cw;
    union {
        /* cmsg(3) recommends union for proper alignment */
        unsigned char buf[
            CMSG_SPACE(MAX(sizeof(struct in_pktinfo),
                sizeof(struct in6_pktinfo))) + CMSG_SPACE(sizeof(int))
        ];
        struct cmsghdr cmsg;
    } ancil;

    if (0 == count)
        return 0;

    n = 0;
    msg.msg_flags = 0;
    do
    {
        fd                 = (int) (uint64_t) specs[n].peer_ctx;
        msg.msg_name       = (void *) specs[n].dest_sa;
        msg.msg_namelen    = (AF_INET == specs[n].dest_sa->sa_family ?
                                            sizeof(struct sockaddr_in) :
                                            sizeof(struct sockaddr_in6)),
        msg.msg_iov        = specs[n].iov;
        msg.msg_iovlen     = specs[n].iovlen;

        /* Set up ancillary message */
        if (quicMgr->flags & quicMgr->IS_SERVER)
            cw = CW_SENDADDR;
        else
            cw = 0;
        if (specs[n].ecn)
            cw |= CW_ECN;
        if (cw)
            setup_control_msg(&msg, (enum ctl_what)cw, &specs[n], ancil.buf,
                                                    sizeof(ancil.buf));
        else
        {
            msg.msg_control    = NULL;
            msg.msg_controllen = 0;
        }

        s = sendmsg(fd, &msg, 0);
        if (s < 0)
        {
            LOGX("sendmsg failed: %s", strerror(errno));
            break;
        }
        ++n;
    }
    while (n < count);

    if (n < count) LOGX("could not send all of them");

    if (n > 0) return n;
    else{
        assert(s < 0);
        return -1;
    }
}
static void read_stdin (EV_P_ ev_io *w, int revents){
// Read one byte at a time -- when user hits enter, send line to server
    lsQuicMgr *const quicMgr = (lsQuicMgr*)w->data;
    ssize_t nr;

    assert(quicMgr->u.c.sz < sizeof(quicMgr->u.c.buf));

    nr = read(w->fd, quicMgr->u.c.buf + quicMgr->u.c.sz, 1);
    if (nr > 0)
    {
        quicMgr->u.c.sz += nr;
        if (quicMgr->u.c.buf[quicMgr->u.c.sz - 1] == '\n'
                            || sizeof(quicMgr->u.c.buf) == quicMgr->u.c.sz)
        {
            LOGX("read up to newline (or filled buffer): make new stream");
            lsquic_conn_make_stream(quicMgr->u.c.conn);
            ev_io_stop(quicMgr->loop, w);
            process_conns(quicMgr);
        }
    }
    else if (nr == 0)
    {
        LOGX("read EOF: stop reading from stdin, close connection");
        ev_io_stop(quicMgr->loop, w);
        ev_io_stop(quicMgr->loop, &quicMgr->u.c.stdin_w);
        lsquic_conn_close(quicMgr->u.c.conn);
        process_conns(quicMgr);
    }
    else
    {
        LOGX("error reading from stdin: %s", strerror(errno));
        ev_break(quicMgr->loop, EVBREAK_ONE);
    }
}
static int set_nonblocking (int fd){
    int flags;

    flags = fcntl(fd, F_GETFL);
    if (-1 == flags)
        return -1;
    flags |= O_NONBLOCK;
    if (0 != fcntl(fd, F_SETFL, flags))
        return -1;

    return 0;
}
static int set_ecn (int fd, const struct sockaddr *sa){
    // ToS is used to get ECN value
    int on, s;

    on = 1;
    if (AF_INET == sa->sa_family)
        s = setsockopt(fd, IPPROTO_IP, IP_RECVTOS, &on, sizeof(on));
    else
        s = setsockopt(fd, IPPROTO_IPV6, IPV6_RECVTCLASS, &on, sizeof(on));
    if (s != 0)
        perror("setsockopt(ecn)");

    return s;
}
static int set_origdst (int fd, const struct sockaddr *sa){
// Set up the socket to return original destination address in ancillary data
    int on, s;
    on = 1;
    if (AF_INET == sa->sa_family)
        s = setsockopt(fd, IPPROTO_IP,
#if defined(IP_RECVORIGDSTADDR)
                                       IP_RECVORIGDSTADDR,
#else
                                       IP_PKTINFO,
#endif
                                                           &on, sizeof(on));
    else
        s = setsockopt(fd, IPPROTO_IPV6, IPV6_RECVPKTINFO, &on, sizeof(on));

    if (s != 0)
        perror("setsockopt");

    return s;
}
static void timer_expired (EV_P_ ev_timer *timer, int revents){
    process_conns((lsQuicMgr*)timer->data);
}

static void process_conns (struct lsQuicMgr *quicMgr){
    int diff;
    ev_tstamp timeout;

    ev_timer_stop(quicMgr->loop, &quicMgr->timer);
    lsquic_engine_process_conns(quicMgr->engine);

    if (lsquic_engine_earliest_adv_tick(quicMgr->engine, &diff))
    {
        if (diff >= LSQUIC_DF_CLOCK_GRANULARITY)
            /* Expected case: convert to seconds */
            timeout = (ev_tstamp) diff / 1000000;
        else if (diff <= 0)
            /* It should not happen often that the next tick is in the past
             * as we just processed connections.  Avoid a busy loop by
             * scheduling an event:
             */
            timeout = 0.0;
        else
            /* Round up to granularity */
            timeout = (ev_tstamp) LSQUIC_DF_CLOCK_GRANULARITY / 1000000;
        //LOGX("converted diff %d usec to %.4lf seconds", diff, timeout);
        ev_timer_init(&quicMgr->timer, timer_expired, timeout, 0.);
        ev_timer_start(quicMgr->loop, &quicMgr->timer);
    }
}


static void proc_ancillary (struct msghdr *msg, struct sockaddr_storage *storage, int *ecn){
    const struct in6_pktinfo *in6_pkt;
    struct cmsghdr *cmsg;

    for (cmsg = CMSG_FIRSTHDR(msg); cmsg; cmsg = CMSG_NXTHDR(msg, cmsg))
    {
        if (cmsg->cmsg_level == IPPROTO_IP &&
            cmsg->cmsg_type  ==
#if defined(IP_RECVORIGDSTADDR)
                                IP_ORIGDSTADDR
#else
                                IP_PKTINFO
#endif
                                              )
        {
#if defined(IP_RECVORIGDSTADDR)
            memcpy(storage, CMSG_DATA(cmsg), sizeof(struct sockaddr_in));
#else
            const struct in_pktinfo *in_pkt;
            in_pkt = (in_pktinfo*) CMSG_DATA(cmsg);
            ((struct sockaddr_in *) storage)->sin_addr = in_pkt->ipi_addr;
#endif
        }
        else if (cmsg->cmsg_level == IPPROTO_IPV6 &&
                 cmsg->cmsg_type  == IPV6_PKTINFO)
        {
            in6_pkt = (in6_pktinfo*)CMSG_DATA(cmsg);
            ((struct sockaddr_in6 *) storage)->sin6_addr = in6_pkt->ipi6_addr;
        }
        else if ((cmsg->cmsg_level == IPPROTO_IP && cmsg->cmsg_type == IP_TOS)
                 || (cmsg->cmsg_level == IPPROTO_IPV6 && cmsg->cmsg_type == IPV6_TCLASS))
        {
            memcpy(ecn, CMSG_DATA(cmsg), sizeof(*ecn));
            *ecn &= IPTOS_ECN_MASK;
        }
    }
}


#if defined(IP_RECVORIGDSTADDR)
#   define DST_MSG_SZ sizeof(struct sockaddr_in)
#else
#   define DST_MSG_SZ sizeof(struct in_pktinfo)
#endif

#define ECN_SZ CMSG_SPACE(sizeof(int))

// Amount of space required for incoming ancillary data
#define CTL_SZ (CMSG_SPACE(MAX(DST_MSG_SZ, sizeof(struct in6_pktinfo))) + ECN_SZ)


static void read_socket (EV_P_ ev_io *w, int revents){
    lsQuicMgr* const quicMgr = (lsQuicMgr*)w->data;
    ssize_t nread;
    int ecn;
    struct sockaddr_storage peer_sas, local_sas;
    unsigned char buf[0x1000];
    struct iovec vec[1] = {{ buf, sizeof(buf) }};
    unsigned char ctl_buf[CTL_SZ];

    struct msghdr msg = {
        .msg_name       = &peer_sas,
        .msg_namelen    = sizeof(peer_sas),
        .msg_iov        = vec,
        .msg_iovlen     = 1,
        .msg_control    = ctl_buf,
        .msg_controllen = sizeof(ctl_buf),
    };
    nread = recvmsg(w->fd, &msg, 0);
    if (-1 == nread) {
        if (!(EAGAIN == errno || EWOULDBLOCK == errno))
            LOGX("recvmsg: %s", strerror(errno));
        return;
    }

    local_sas = quicMgr->local_sas;
    ecn = 0;
    proc_ancillary(&msg, &local_sas, &ecn);

    (void) lsquic_engine_packet_in(quicMgr->engine, buf, nread,
        (struct sockaddr *) &local_sas,
        (struct sockaddr *) &peer_sas,
        (void *) (uintptr_t) w->fd, ecn);

    process_conns(quicMgr);
}

//////// Quic callbacks and utilities

struct server_stream_ctx {
    size_t           tssc_sz;            /* Number of bytes in tsc_buf */
    off_t            tssc_off;           /* Number of bytes written to stream */
    unsigned char    tssc_buf[0x100];    /* Bytes read in from client */
};

static size_t tssc_read(void *ctx, void *buf, size_t count){
    server_stream_ctx *tssc = (server_stream_ctx*)ctx;

    if (count > tssc->tssc_sz - tssc->tssc_off)
        count = tssc->tssc_sz - tssc->tssc_off;
    memcpy(buf, tssc->tssc_buf + tssc->tssc_off, count);
    tssc->tssc_off += count;
    return count;
}
static size_t tssc_size(void *ctx){
    server_stream_ctx *tssc = (server_stream_ctx*)ctx;
    return tssc->tssc_sz - tssc->tssc_off;
}

static QuicConnection * QUIC_on_new_conn (void *stream_if_ctx, struct lsquic_conn *conn);
static void QUIC_client_on_hsk_done (lsquic_conn_t *conn, enum lsquic_hsk_status status);
static void QUIC_on_conn_closed (lsquic_conn_t *conn);
static lsquic_stream_ctx_t * QUIC_on_new_stream(void *stream_if_ctx, struct lsquic_stream *stream);
static void QUIC_on_read(struct lsquic_stream *stream, lsquic_stream_ctx_t *h);
static void QUIC_on_write(struct lsquic_stream *stream, lsquic_stream_ctx_t *h);
static void QUIC_on_close(struct lsquic_stream *stream, lsquic_stream_ctx_t *h);

static lsquic_stream_if quic_callbacks;

struct client_read_v2_ctx {
    lsQuicMgr  *quicMgr;
    lsquic_stream_t *stream;
};
static size_t client_readf_v2 (void *ctx, const unsigned char *data, size_t len, int fin){
    client_read_v2_ctx* v2ctx = (client_read_v2_ctx*)ctx;
    if (len)
        fwrite(data, 1, len, stdout);
    if (fin){
        fflush(stdout);
        lsquic_stream_shutdown(v2ctx->stream, 0);
        ev_io_start(v2ctx->quicMgr->loop, &v2ctx->quicMgr->u.c.stdin_w);
    }
    return len;
}


////////////////

union Addr{
    struct sockaddr     sa;
    struct sockaddr_in  addr4;
    struct sockaddr_in6 addr6;
};

void lsQuicSetupSocketsAndCallbacks(QuicEngine* quicEngine, bool asServer, string ipAddr, int portNum);
void runEngine(QuicEngine* quicEngine);

void initQuicSystem(){
    // Initialize logging
    // logFileHandle <- stderr;
    logFileHandle = fopen("quic.log", "ab");
    if (!logFileHandle) {perror("cannot open log file for writing");exit(EXIT_FAILURE);}
    setvbuf(logFileHandle, nullptr, _IOLBF, 0);
    lsquic_logger_init(&logger_if, logFileHandle, LLTS_HHMMSSUS);

    // Initialize constant structs
    quic_callbacks.on_new_conn        = QUIC_on_new_conn;
    quic_callbacks.on_goaway_received = NULL;
    quic_callbacks.on_conn_closed     = QUIC_on_conn_closed;
    quic_callbacks.on_new_stream      = QUIC_on_new_stream;
    quic_callbacks.on_read            = QUIC_on_read;
    quic_callbacks.on_write           = QUIC_on_write;
    quic_callbacks.on_close           = QUIC_on_close;
    quic_callbacks.on_hsk_done        = QUIC_client_on_hsk_done;

    // Initialize quic global engine
    if (0 != lsquic_global_init(LSQUIC_GLOBAL_SERVER | LSQUIC_GLOBAL_CLIENT)) {fprintf(stderr, "global initialization failed\n"); exit(EXIT_FAILURE);}
}
void deinitQuicSystem(){
    lsquic_global_cleanup();
}
`
embedLow = `
static QuicConnection* QUIC_on_new_conn (void *stream_if_ctx, lsquic_conn *conn){
    LOGX("created new connection");
    QuicEngine *const quicEngine = (QuicEngine*)stream_if_ctx;
    quicEngine->quicMgr.u.c.conn = conn;
    QuicConnection* connection = quicEngine->allocNewConn();
    connection->lsConn = conn;
    connection->myEngine = quicEngine;
cout<<"NEW_CONN; engine:"<<quicEngine<<"   conn:"<<conn<<"  slipConn:"<<connection<<"\n";
    quicEngine->onNewConnection_CB(connection);
    return connection;
}

static void QUIC_client_on_hsk_done (lsquic_conn_t *conn, enum lsquic_hsk_status status){
    QuicConnection* connection = (QuicConnection*)lsquic_conn_get_ctx(conn);
    QuicEngine* quicEngine = connection->myEngine;

    switch (status){
    case LSQ_HSK_OK:
    case LSQ_HSK_RESUMED_OK:
        LOGX("handshake successful, start stdin watcher");
        ev_io_start(quicEngine->quicMgr.loop, &quicEngine->quicMgr.u.c.stdin_w);
        LOGX("IO_STARTED");
        break;
    default:
        LOGX("handshake failed");
        break;
    }
}
static void QUIC_on_conn_closed (lsquic_conn_t *conn){
    LOGX("closed connection");
    QuicConnection* connection = (QuicConnection*)lsquic_conn_get_ctx(conn);
    QuicEngine* quicEngine = connection->myEngine;
    connection->onConnectionClosed_CB();
    if(!quicEngine->serverMode){ // if engine is in client mode, stop engine.
        ev_io_stop(quicEngine->quicMgr.loop, &quicEngine->quicMgr.sock_w);
    }
}
static lsquic_stream_ctx_t* QUIC_on_new_stream(void *stream_if_ctx, lsquic_stream *stream){
    server_stream_ctx *tssc;
    LOGX("created new Stream");
    QuicEngine *const quicEngine = (QuicEngine*)stream_if_ctx;
    lsquic_conn_t* conn = lsquic_stream_conn(stream);
    QuicConnection* connection = (QuicConnection*)lsquic_conn_get_ctx(conn);
    QuicStream* streamCtx = connection->allocNewStream();
    streamCtx->myConnection = connection;
    streamCtx->theStream = stream;
    connection->onNewStream_CB(streamCtx);
    return (lsquic_stream_ctx_t*)streamCtx;
}
static void QUIC_on_read( lsquic_stream *stream, lsquic_stream_ctx_t *h){
    QuicStream *const quicStream = (QuicStream*)h;
    quicStream->onRead_CB(0);
    LOGX("QUIC: onRead");
}
static void QUIC_on_write(lsquic_stream *stream, lsquic_stream_ctx_t *h){
    QuicStream *const quicStream = (QuicStream*)h;
    quicStream->onWrite_CB(0);
}
static void QUIC_on_close(lsquic_stream *stream, lsquic_stream_ctx_t *h){
    //server_stream_ctx *const tssc = (server_stream_ctx*) h;
    // call CB
   // free(tssc);
    LOGX("stream closed");
}

void lsQuicSetupSocketsAndCallbacks(QuicEngine* quicEngine, bool asServer, string ipAddr, int portNum){
    lsQuicMgr* quicMgr = &quicEngine->quicMgr;
    char errbuf[0x100];
    if(asServer){
        if (0 != load_cert(quicEngine->cert_file.data(), quicEngine->key_file.data())) { LOGX("Cannot load certificate file:%s",quicEngine->cert_file); exit(EXIT_FAILURE);}
        quicMgr->flags <- quicMgr->flags | quicMgr->IS_SERVER;
    }
    // Set Settings
    quicMgr->loop = EV_DEFAULT;
    lsquic_engine_settings* settings = new lsquic_engine_settings;
    settings->es_cc_algo = 3;
    settings->es_ecn = 1;
    lsquic_engine_init_settings(settings, asServer ? LSENG_SERVER : 0);
    settings->es_ql_bits = 0;  // Currently using the loss bits extension causes decryption failures in Wireshark.  For now we override the default.
    // Check settings
    if (0 != lsquic_engine_check_settings(settings, asServer ? LSENG_SERVER : 0, errbuf, sizeof(errbuf))) {LOGX("invalid settings: %s", errbuf); exit(EXIT_FAILURE);}

    // Set up socket addr
    Addr* addr = &quicEngine->addr;
cout<<"IPAddr:"<<ipAddr<<" port:"<<portNum<<"\n";
    if (inet_pton(AF_INET, ipAddr.data(), &addr->addr4.sin_addr)){
        addr->addr4.sin_family = AF_INET;
        addr->addr4.sin_port   = htons(portNum);
    }
    else if (memset(&addr->addr6, 0, sizeof(addr->addr6)),  inet_pton(AF_INET6, ipAddr.data(), &addr->addr6.sin6_addr)){
        addr->addr6.sin6_family = AF_INET6;
        addr->addr6.sin6_port   = htons(portNum);
    }
    else {LOGX((string("'")+ipAddr+"' is not a valid IP address").data()); exit(EXIT_FAILURE);}

    // Set up socket
    quicMgr->sock_fd = socket(addr->sa.sa_family, SOCK_DGRAM, 0);
    if (quicMgr->sock_fd < 0){perror("socket error");            exit(EXIT_FAILURE);}
    if (0 != set_nonblocking(quicMgr->sock_fd)){ perror("fcntl");exit(EXIT_FAILURE);}
    if (0 != set_ecn(quicMgr->sock_fd, &addr->sa))               exit(EXIT_FAILURE);
    if (asServer){
        if (0 != set_origdst(quicMgr->sock_fd, &addr->sa))       exit(EXIT_FAILURE);
    }
    if (asServer){
        int socklen = sizeof(Addr);
        if (0 != bind(quicMgr->sock_fd, &addr->sa, socklen)){ perror("bind");exit(EXIT_FAILURE);}
        memcpy(&quicMgr->local_sas, addr, sizeof(Addr));
    } else {
        quicMgr->local_sas.ss_family = addr->sa.sa_family;
        int socklen = sizeof(quicMgr->local_sas);
        if (0 != bind(quicMgr->sock_fd, (struct sockaddr *) &quicMgr->local_sas, socklen)){ perror("bind"); exit(EXIT_FAILURE);}
        ev_init(&quicMgr->timer, timer_expired);
    }
    ev_io_init(&quicMgr->sock_w, read_socket, quicMgr->sock_fd, EV_READ);
    ev_io_start(quicMgr->loop, &quicMgr->sock_w);

    // Initialize callbacks
    lsquic_engine_api eapi;
    memset(&eapi, 0, sizeof(eapi));
    eapi.ea_packets_out     = packets_out_v1;
    eapi.ea_packets_out_ctx = quicMgr;
    eapi.ea_stream_if       = &quic_callbacks;
    eapi.ea_stream_if_ctx   = quicEngine;
    eapi.ea_get_ssl_ctx     = get_ssl_ctx;
    //~ As needed, set up key logging. See latest lsQuic tutorial
    eapi.ea_settings = settings;

    // Create the engine
    quicMgr->engine = lsquic_engine_new(asServer ? LSENG_SERVER : 0, &eapi);
    if(!quicMgr->engine){LOGX("Cannot create quic engine"); exit(EXIT_FAILURE);}
}

void runEngine(QuicEngine* quicEngine){
    lsQuicMgr* quicMgr = &quicEngine->quicMgr;
    Addr* addr = &quicEngine->addr;
    quicMgr->timer.data  = quicMgr;
    quicMgr->sock_w.data = quicMgr;
    if (!(quicMgr->flags & quicMgr->IS_SERVER)){
        if (0 != set_nonblocking(STDIN_FILENO)){ perror("fcntl(stdin)"); exit(EXIT_FAILURE);}
        ev_io_init(&quicMgr->u.c.stdin_w, read_stdin, STDIN_FILENO, EV_READ);
        quicMgr->u.c.stdin_w.data = quicMgr;
        quicMgr->u.c.conn = lsquic_engine_connect(
            quicMgr->engine, N_LSQVER,
            (struct sockaddr *) &quicMgr->local_sas, &addr->sa,
            (void *) (uintptr_t) quicMgr->sock_fd,
            NULL, NULL, 0, NULL, 0, NULL, 0
        );
        if (!quicMgr->u.c.conn){LOGX("cannot create connection");  exit(EXIT_FAILURE);}
        process_conns(quicMgr);
    }
    ev_run(quicMgr->loop, 0);
}

`

struct QuicConnectionID:wraps=lsquic_cid_t{}

struct QuicEngine{
    me lsQuicMgr: quicMgr
    me Addr: addr
    me string: cert_file
    me string: key_file
    me string: key_log_dir
    me bool: serverMode
    me bool: doHTTP

    void: init(me string: filenameTag, me bool: ServerMode, me string: ipAddr, me int:portNum) <- {
        serverMode<-ServerMode
        doHTTP    <- false
        cert_file <- "certFile.pem"
        key_file  <- "keyFile.pem"

        if (0 != lsquic_logger_lopt("event=warn")){fprintf(stderr, "invalid log option\n");exit(EXIT_FAILURE);}
        key_log_dir <- filenameTag+"KeyLogDir"
       // lsquic_set_log_level("warn") // debug, info, notice, warning, error, alert, emerg, crit
        s_verbose <- 1             // 0=less logging
        lsQuicSetupSocketsAndCallbacks(self, serverMode, ipAddr, portNum)
    }

    void: run() <- {
        runEngine(self)
    }
}

struct QuicConnection{
    their lsquic_conn: lsConn
    ///their QuicEngine:  myEngine

    ///void: onConnectionClosed_CB()
    their QuicConnectionID: getConnectionID() <- <%!(lsquic_cid_t*)lsquic_conn_id(%0.lsConn)}%>
    void: abort() <- <%{lsquic_conn_abort(lsConn);}%>
}

struct QuicStream{
    void: setPriority(me 1..256: priority) <- <%{lsquic_stream_set_priority(theStream, priority);}%>
    void: requestRead()         <- <%{lsquic_stream_wantread(theStream, 1);}%>
    void: requestWrite()        <- <%{lsquic_stream_wantwrite(theStream, 1);}%>
    void: flushStream()         <- <%{lsquic_stream_flush(theStream);}%>
    void: shutdown(me int: how) <- <%{lsquic_stream_shutdown(theStream, how);}%>
    void: close()               <- <%{lsquic_stream_close(theStream);}%>
    me int: read(their char:buf, me int: len)   <- <%{return(lsquic_stream_read(theStream, buf, len));}%>
    me int: write(their char:buf, me int: len)  <- <%{return(lsquic_stream_write(theStream, buf, len));}%>
    their QuicConnection: getConnection()       <- <%{return((QuicConnection*)lsquic_conn_get_ctx(lsquic_stream_conn(theStream)));}%>
    their lsquic_stream: theStream
}
