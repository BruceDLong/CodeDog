//////////////  Add GUI-Toolkit features using Android
requirements = [
    [tagOneOf, Platform, [Android]]
]

interface={
    provides=[GUI_ToolKit_implementation]
    libFiles=[]
    headers=[
        androidx.appcompat.app.AppCompatActivity, androidx.appcompat.widget.Toolbar,
        android.os.Handler, android.os.Looper,  android.os.HandlerThread,
        android.content.Context,
        android.content.res.Configuration,
        android.util.DisplayMetrics,
        // VIEW
        android.view.View, android.view.ViewGroup,
        android.widget.LinearLayout, android.widget.LinearLayout.LayoutParams,
        android.widget.HorizontalScrollView, android.widget.ScrollView,
        androidx.core.widget.NestedScrollView,
        android.widget.Toast,
        // GRAPHICS
        android.graphics.Canvas, android.graphics.Color,
        android.graphics.Paint, android.graphics.Path,
        android.graphics.Rect, android.graphics.Typeface,
        android.graphics.Bitmap, android.graphics.BitmapFactory,
        android.graphics.drawable.Drawable, android.graphics.pdf.PdfDocument,
        // EVENTS & LISTENERS
        android.view.View.OnTouchListener, android.view.MotionEvent
    ]
}

LibDescription ={
    useStatus  = dynamic
    description='GUI for Android '
}

initCode = `
   GUI_threads_messagePasser <- GUIsMesgPasser()
`

embedHigh = ``

/////////////////////////////////  STRUCT CONVERTERS
struct GUI_rect                {me double: x1 me double: y1 me double: x2 me double: y2}
struct GUI_item:                wraps = View{}
struct GUI_Frame:               wraps = ViewGroup{}
struct GUI_canvas:              wraps = CanvasView{}
struct GUI_container:           wraps = ViewGroup{}
struct INK_Image:               wraps = Paint ownerMe = their{}      // How will the ink look?
struct GUI_callback:            wraps = GCallback{}
struct GUI_Scalar:              wraps = float{}
//struct GUI_Text:              wraps = ???{}
//struct GDK_KEY_Down:          wraps = ???{}
struct GUI_MouseEvent:          wraps = MotionEvent{}
struct GUI_MotionEvent:         wraps = MotionEvent{}
struct GUI_ButtonEvent:         wraps = MotionEvent{}
struct GUI_PointerEvent:        wraps = MotionEvent{}
struct GUI_KeyboardEvent:       wraps = MotionEvent{}
/////////////////////////////////  GLOBAL WIDGET FUNCTIONS
struct GLOBAL{
    me void: addToContainerAndExpand(me GUI_container: container, me GUI_item: widget) <- <%!%G%2.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.MATCH_PARENT, 0.5f)); %1.addView(%2)%>
}
/////////////////////////////////  HANDLE EVENTS

struct GUI_MouseEvent{
    me int: x <- <%!getX()%>
    me int: y <- <%!getY()%>
}

struct GUI_MotionEvent{
    me int: x <- <%!getX()%>
    me int: y <- <%!getY()%>
}

struct GUI_ButtonEvent{
    me int: x <- <%!getX()%>
    me int: y <- <%!getY()%>
}

struct GUI_PointerEvent{
    me int: x <- <%!getX()%>
    me int: y <- <%!getY()%>
}

/////////////////////////////////  EVENT DISPATCHER
struct GUI_eventDispatcher{
    their widget: topWidget

    me bool: dispatchPointerClickEvent(their GUI_MouseEvent: event) <- <%{
        boolean returnVal = false;

        switch (event.getAction()) {
        case MotionEvent.ACTION_DOWN:
            //GLOBAL.static_Global.toolbar.setTitle("ACTION_DOWN!");
            topWidget.primaryDn(event);
            returnVal= true;
            break;
        case MotionEvent.ACTION_MOVE:
            //GLOBAL.static_Global.toolbar.setTitle("ACTION_MOVE!");
            topWidget.mouseMoved(event);
            returnVal= true;
            break;
        case MotionEvent.ACTION_UP:
            //GLOBAL.static_Global.toolbar.setTitle("ACTION_UP!");
            topWidget.primaryUp(event);
            returnVal= true;
            break;
        case MotionEvent.ACTION_CANCEL:
            //GLOBAL.static_Global.toolbar.setTitle("ACTION_CANCEL!");
            returnVal= true;
            break;
        case MotionEvent.ACTION_POINTER_DOWN:
            //GLOBAL.static_Global.toolbar.setTitle("ACTION_POINTER_DOWN!");
            returnVal= true;
            break;
        case MotionEvent.ACTION_POINTER_UP:
            //GLOBAL.static_Global.toolbar.setTitle("ACTION_POINTER_UP!");
            returnVal= true;
            break;
        default:
            return false;
        }

        return returnVal;
    }%>

    me void: registerWidgetForEventDispatcher(me CanvasView: appWidget, their widget: masterWidget) <- {
        topWidget<-masterWidget
        //appWidget.addOnTouchListener(onTouchListener);
        //appWidget.setOnTouchListener(GLOBAL.static_Global.EventDispatcher);
    }
}

/////////////////////////////////  HANDLE GUI
struct CanvasView: inherits=View implements=OnTouchListener{
    me GUI_ctxt: cr
    our DashboardWidget:  parent
    me float: scaleFactor

    me none: CanvasView() <- <%{
        super(GLOBAL.static_Global);
        setOnTouchListener(this);
    }%>
    me bool: onTouch(me View: v, me MotionEvent: event) <- <%{
        scaleFactor = GLOBAL.static_Global.displayDensity;
        float scaleX = event.getX()/scaleFactor;
        float scaleY = event.getY()/scaleFactor;
        event.setLocation(scaleX,scaleY);
        boolean retVal = parent.EventDispatcher.dispatchPointerClickEvent(event);
        return retVal;
    }%>
    me void: onDraw(me Canvas: canvas) <- <%{
        super.onDraw(canvas);
        cr = new GUI_ctxt(canvas);
        canvas.save();
        scaleFactor = GLOBAL.static_Global.displayDensity;
        canvas.translate(scaleFactor, scaleFactor);
        canvas.scale(scaleFactor, scaleFactor);
        cr.cur_x=0; cr.cur_y=0;
        cr.GPath.reset();
        parent.EventDispatcher.topWidget.draw(cr);
        canvas.restore();
    }%>
    me void: setParent(our DashboardWidget: wid) <- {parent <- wid}
}

/////////////////////////////////  HANDLE GUI
struct GUI: inherits=LinearLayout{
    me LinearLayout: frame <- (GLOBAL.static_Global)
    me LinearLayout: layoutArea <- (GLOBAL.static_Global)
    me NestedScrollView: scroller

    me none: GUI() <- <%{super(GLOBAL.static_Global);}%>

    me void: GUI_PopulateAndExec() <- <% {
        frame = new LinearLayout(GLOBAL.static_Global);
        frame.setOrientation(LinearLayout.VERTICAL);
        frame.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT));
//        frame.setDefaultCloseOperation(LinearLayout.EXIT_ON_CLOSE);
        GLOBAL.static_Global.setContentView(frame);
        GLOBAL.static_Global.thisApp.createAppArea(frame);
    } %>

    me uint32: GUI_Init() <- <%{
        return(0);
    }%>

    me uint32: GUI_Run() <- <% {
        int status=0;
        GLOBAL.static_Global.thisApp.gui.GUI_PopulateAndExec();
        return(status);
    } %>

    me void: GUI_Deinit() <- {}
}

struct GUI{
    their GUI_item: newCanvas() <- <%!%Gnew CanvasView()%>
    me void: setWidgetSize(me GUI_item: widget, me uint32: width, me uint32: height) <- <%!%G%1.setLayoutParams(new LayoutParams(Math.round(%2*GLOBAL.static_Global.displayDensity), Math.round(%3*GLOBAL.static_Global.displayDensity)))%>
    their GUI_item: newScrollingWindow() <- <%!newScrollingView()%>
    me void: addMenuBar(me GUI_menuBar: menubar) <- <%!%G%>
    me void: setCallback() <- <%!%G %>
    me void: setBtnCallback()  <- <%!%G%1.setOnClickListener(new View.OnClickListener(){public void onClick(View v) {%3();}})%>
    me void: setBtnCallback2() <- <%!%G%1.setOnClickListener(new View.OnClickListener(){public void onClick(View v) {%5;}})%>
    me void: setBtnCallback3() <- <%!%G%1.setOnClickListener(new View.OnClickListener(){public void onClick(View v) {%4();}})%>
    me GUI_Frame: GUI_Frame(me string: label) <- <%!%Gnew LinearLayout(%1)%>
}

struct GUI_ctxt: inherits=Canvas{
    //me void: fetchAreaToBeDrawn(me GUI_rect: area) <- <%!cairo_clip_extents();%>
    me void: reset() <- <%!GPath = new Path()%>
    me void: setRGBA(me double: red, me double: green, me double: blue, me double: alpha) <- <%!paint.setColor(Color.argb((int)%4, %1, %2, %3))%>
    me void: setRGB (me double: red, me double: green, me double: blue) <- <%!paint.setColor(Color.rgb(%1, %2, %3))%>
    me void: setColor(me cdColor: color) <- <%!%0.paint.setColor( Color.rgb(%1.red, %1.green, %1.blue))%>
    me void: setLineWidth(me double: width) <- <%!paint.setStrokeWidth(%1)%>
    me void: finishPDF() <- <%!%GSystem.out.print("PDF Functions not given.")%>
    me void: setScale() <- <%!%G%>  // TODO: Finish setScale()
    me void: moveTo(me double: x, me double: y) <- <%!%0.cur_x=%1; %0.cur_y=%2; %0.GPath.moveTo((float)(%1), (float)(%2))%>
    me void: lineTo(me double: x, me double: y) <- <%!%0.cur_x=%1; %0.cur_y=%2; %0.GPath.lineTo((float)(%1), (float)(%2))%>
    me void: moveRel(me double: dx, me double: dy) <- <%!GPath.moveTo((float)(cr.cur_x+%1), (float)(cr.cur_y+%2))%>
    me void: lineRel(me double: dx, me double: dy) <- <%!GPath.lineTo((float)(cr.cur_x+%1), (float)(cr.cur_y+%2))%>
    me void: curveTo(me double: x1, me double: y1, me double: x2, me double: y2, me double: x3, me double: y3) <- <%!GPath.curve_to(cr, %1, %2, %3, %4, %5, %6)%>
    me void: curveRel(me double: dx1, me double: dy1, me double: dx2, me double: dy2, me double: dx3, me double: dy3) <- <%!rel_curve_to(cr, %1, %2, %3, %4, %5, %6)%>
    me void: closePath()      <- <%!GPath.close()%>
    me void: rectangle()      <- <%!%0.drawRect((float)%1, (float)%2, (float)%3, (float)%4, cr.paint)%>
    me void: paintNow()       <- <%!paint.setStyle(Paint.Style.FILL);cr.GCanvas.drawPaint(cr.paint)%>
    me void: strokeNow()      <- <%!%0.paint.setStyle(Paint.Style.STROKE); %0.GCanvas.drawPath(cr.GPath, cr.paint); cr.GPath.rewind()%>
    me void: fillNow()        <- <%!%0.paint.setStyle(Paint.Style.FILL);   %0.GCanvas.drawPath(cr.GPath, cr.paint); cr.GPath.rewind()%>
    me void: strokeKeep()     <- <%!%0.paint.setStyle(Paint.Style.STROKE); %0.GCanvas.drawPath(cr.GPath, cr.paint)%>
    me void: fillKeep()       <- <%!%0.paint.setStyle(Paint.Style.FILL);   %0.GCanvas.drawPath(cr.GPath, cr.paint)%>
    //me void: renderFrame()    <- <%!repaint()%>
    //me void: setFillPattern() <- <%!cairo_set_source(%0, %1)%>
    me void: circle(me int: centerX, me int: centerY, me int: radius) <- <%!%0.paint.setStyle(Paint.Style.STROKE);%0.paint.setStrokeWidth(2);%0.GCanvas.drawCircle(%1, %2, %3, cr.paint)%>
    me GUI_ctxt: newPDF_ctxt(me sting: filename, me double: inchesWide, me double: inchesHigh) <- <%!newAndroidPDF(%1, (int)%2, (int)%3)%>
    me GUI_ctxt: newAndroidPDF(me string: filename, me int: inchesWide, me int: inchesHigh) <- <%{
        // TODO: Finish newAndroidPDF() and confirm it works
        PdfDocument document = new PdfDocument();
        PdfDocument.PageInfo pageInfo = new PdfDocument.PageInfo.Builder(inchesWide, inchesHigh, 1).create();
        PdfDocument.Page page = document.startPage(pageInfo);
        Canvas canvas = page.getCanvas();
        document.finishPage(page);
        GUI_ctxt cr = new GUI_ctxt(canvas);
        return(cr);
    }%>
}

struct GUI_ctxt{
    me Paint: paint
    me Path: GPath
    me double: cur_x
    me double: cur_y
    me Canvas: GCanvas

    me none: GUI_ctxt () <- {
        Allocate(paint)
        Allocate(GPath)
    }

    me none: GUI_ctxt(me Canvas: canvas) <- {
        Allocate(paint)
        Allocate(GPath)
        GCanvas <- canvas
    }
}

struct APP: inherits=LinearLayout{
    me none: APP() <- <%{
        super(GLOBAL.static_Global);
        gui = new GUI();
    }%>
}
/////////////////////////////////  G L O B A L
struct GLOBAL: inherits=AppCompatActivity{
    their LinearLayout: window
    me int: widgetHeight() <- <%!%G%1.getHeight()%>
    me int: widgetWidth() <- <%!%G%1.getWidth()%>
    me long: ticksPerSec() <- <%!%G1000%>
    me Toolbar: toolbar
    me int: displayHeightPx
    me int: displayWidthPx

    // //DRAWING ROUTINES:
    me deltaSize: renderText(me GUI_ctxt: cr, me string: text, me fontSpec: font, me double: x, me double: y) <- <%{
        cr.paint.setStyle(Paint.Style.FILL);
        cr.paint.setTextSize(font.size);
        cr.paint.setTypeface(Typeface.create(font.name, Typeface.NORMAL));
        cr.GCanvas.drawText(text, (float)x, (float)y, cr.paint);
        deltaSize size = getTextSize(cr, text, font);
        return(size);
    }%>
    me deltaSize: renderTextCentered(me GUI_ctxt: cr, me string: text, me fontSpec: font, me double: x, me double: y) <- <%{
        deltaSize size = getTextSize(cr, text, font);
        cr.paint.setTextSize(font.size);
        cr.paint.setTypeface(Typeface.create(font.name, Typeface.NORMAL));
        renderText(cr, text, font, x-size.width/2, y);
        return(size);
    }%>
    me deltaSize: renderTextRotate(me GUI_ctxt: cr, me string: text, me fontSpec: font, me double: x, me double: y, me double: degrees, me string: justify) <- <%{
        double radians    = degrees*(Math.PI/180.);
        deltaSize size    = getTextSize(cr, text, font);
        double hypotenuse = size.width;
        deltaSize tmpSize = new deltaSize(0,0);
        if(justify == "right"){x=x-hypotenuse;}
        else if(justify == "center"){x=x-hypotenuse/2;}
        cr.GCanvas.save();
        cr.GCanvas.rotate(45, (float)x, (float)y);
        renderText (cr, text, font, x, y);
        cr.GCanvas.restore();
        //TODO: calculate height and width more accurately
        tmpSize.width = size.width;
        tmpSize.height = size.width;
        return(tmpSize);
    }%>
    me void: rotate(me GUI_ctxt: cr, me double: x, me double: y, me int: degrees) <- <%{
        cr.GCanvas.save();
        cr.GCanvas.rotate(degrees, (float)x, (float)y);
    }%>
    me void: restore(me GUI_ctxt: cr) <- <%!%G%1.GCanvas.restore()%>
    me deltaSize: getTextSize(me GUI_ctxt: cr, me string: text, me fontSpec: font) <- <%{
        Rect bounds = new Rect();
        deltaSize size = new deltaSize(0,0);
        cr.paint.setTextSize(font.size);
        cr.paint.setTypeface(Typeface.create(font.name, Typeface.NORMAL));
        cr.paint.getTextBounds(text, 0, text.length(), bounds);
        size.height = bounds.height();
        size.width = bounds.width();
        return(size);
    } %>
    me void: roundedRectangle(me GUI_ctxt: cr, me double: x, me double: y, me double: w, me double: h, me double: r) <- <%{} %>
    me void: displayImage(me GUI_ctxt: cr, me string: filename, me double: x, me double: y, me double: scale) <- <%{
        boolean filter = false;
        try {
            assetManager = getAssets();
            InputStream is = assetManager.open(filename);
            Bitmap  bitmap = BitmapFactory.decodeStream(is);
            int width  = Math.round((float)scale * bitmap.getWidth());
            int height = Math.round((float)scale * bitmap.getHeight());
            Bitmap newBitmap = Bitmap.createScaledBitmap(bitmap, width,height, filter);
            cr.GCanvas.drawBitmap(newBitmap, (float)x, (float)y, cr.paint);
            Log.v("TAG", "display image: " + filename);
        } catch (IOException e) {Log.e("TAG", e.getMessage());}
    }%>

    // //GUI INTERFACE:
    me void: onCreate(me Bundle: savedInstanceState) <- <%{
        super.onCreate(savedInstanceState);
        GLOBAL.static_Global = this;
        GLOBAL.static_Global.thisApp = new APP();
        GLOBAL.static_Global.initialize("");
        GLOBAL.static_Global.getMetrics();
        GLOBAL.static_Global.runDogCode();
        GLOBAL.static_Global.addToolbar();
    }%>
    me void: close_window() <- {
         // gtk_main_quit()
    }
    me void: onStart() <- {
        super.onStart()
        // The activity is about to become visible. Load state
        """ + runCode + """
    }
    me void: onResume() <- {
        super.onResume()
        // The activity has become visible (it is now "resumed"). Restart animations, etc.
    }
    me void:  onPause() <- {
        super.onPause()
        // Another activity is taking focus (this activity is about to be "paused"). Pause animations, etc.
    }
    me void:  onStop() <- {
        super.onStop()
        // The activity is no longer visible (it is now "stopped")
        // Make sure state is saved as we may quit soon.
    }
    me void:  onDestroy() <- {
        super.onDestroy()
        deinitialize()
    }
    me void: copyAssetToWritableFolder(me string: fromPath, me string: toPath)<- <%{
        try {
            InputStream inStream = GLOBAL.static_Global.getAssets().open(fromPath);
            OutputStream outStream = GLOBAL.static_Global.openFileOutput(toPath, Context.MODE_PRIVATE);
            byte[] buf = new byte[1024];
            int len;
            while ((len = inStream.read(buf)) > 0) {
                outStream.write(buf, 0, len);
            }
            outStream.close();
            inStream.close();
        } catch (Exception e) {
            System.out.print(e.getMessage());
        }
    }%>
    me void: addToolbar() <- <%{
        GLOBAL.static_Global.toolbar = new Toolbar(GLOBAL.static_Global);
        LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT, (int)(50*displayDensity));
        GLOBAL.static_Global.toolbar.setLayoutParams(layoutParams);
        GLOBAL.static_Global.toolbar.setBackgroundColor(Color.rgb(100, 149, 237));
        GLOBAL.static_Global.toolbar.setTitle(GLOBAL.static_Global.thisApp.gui.title);
        GLOBAL.static_Global.toolbar.setVisibility(View.VISIBLE);
        setSupportActionBar(GLOBAL.static_Global.toolbar);
        GLOBAL.static_Global.thisApp.gui.frame.addView(GLOBAL.static_Global.toolbar, 0);
    }%>
    me void: getMetrics() <- <%{
        DisplayMetrics metrics = new DisplayMetrics();
        getWindowManager().getDefaultDisplay().getMetrics(metrics);
        displayHeightPx  = metrics.heightPixels;
        displayWidthPx   = metrics.widthPixels;
        GLOBAL.static_Global.styler.widgetLabelBoxWidth = (int)Math.round((double)displayWidthPx*0.38);
        GLOBAL.static_Global.styler.widgetValueBoxWidth = displayWidthPx - GLOBAL.static_Global.styler.widgetLabelBoxWidth;
        displayDensity   = 1; //metrics.density;
    }%>
    me void: setFontScale() <- <%{
        Configuration configuration = getResources().getConfiguration();
        configuration.fontScale=(float) 1; //0.85 small size, 1 normal size, 1,15 big etc
        DisplayMetrics metrics = new DisplayMetrics();
        getWindowManager().getDefaultDisplay().getMetrics(metrics);
        metrics.scaledDensity = configuration.fontScale * metrics.density;
        getBaseContext().getResources().updateConfiguration(configuration, metrics);
    }%>
    me void: showWidget(me GUI_item: widget) <-  <%!%G%1.setVisibility(View.VISIBLE)%>
    me void: hideWidget(their GUI_item: widget) <- <%!%G%1.setVisibility(View.GONE)%>
    me void: markDirtyArea(me GUI_item: widget, me int32: x, me int32: y, me int32: width, me int32: height) <- <%!%G%1.invalidate()%>
    me GUI_item: newCanvas() <- <%!gtk_drawing_area_new()%>
   // me void: setWidgetSize(me GUI_item: widget, me uint32: width, me uint32: height) <- <%!%1.setLayoutParams(%2, %3)%>
}

/////////////////////////////////  INTER-THREAD COMMUNICATION
struct MessagePasser {their Looper: MessagePasser}

struct workerMsgThread: inherits=HandlerThread{
    their MessagePasser: threadsMesgPasser()         <- <%!getLooper()%>
    void: start()                                    <- <%!start()%>
    void: onLooperPrepared() <- <%{
        GLOBAL.static_Global.workerThreadMessagePasser = Looper.myLooper();
    }%>
    none: workerMsgThread(me string: threadName) <- <%{
        super(threadName);
    }%>
}
struct GLOBAL{
    their MessagePasser: GUI_threads_messagePasser   <- NULL   // Set this at beginning of the program
    their MessagePasser: workerThreadMessagePasser   <- NULL   // Set this at beginning of the program
    their MessagePasser: threadsMesgPasser()         <- <%!%G%0.getLooper()%>
    their MessagePasser: GUIsMesgPasser()            <- <%!%GLooper.getMainLooper()%>
    void: invokeFunctionInThread(their MessagePasser: mesgPasser, their void: objToCall, their void: classToCall, their void: funcToCall, their void: arguments)
        <- <%!%Gnew Handler(%1).post(%5)%>
}
