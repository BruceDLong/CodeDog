// CodeDog GUI DashBoard

// Widgets for constructing a dashboard

featuresNeeded = [GUI_ToolKit, Logger]


struct dash: inherits=widget{
    me string: title
    me GUI_Scalar: extX        // Dashes right-most extent
    me GUI_Scalar: extY        // Dashes lowest extent
    me GUI_Scalar: extC        // The current position where the next external item should be drawn
    their dash: dashParent
    me bool: isNullLike
    me bool: posIsSet
    me bool: isDirty

    void: setPos(me GUI_Scalar:x, me GUI_Scalar:y, me GUI_Scalar: extCursor) <- {
        posX <- x
        posY <- y
        extC <- extCursor
    }
    void: addDependent(me string: key, their dash: dashPtr) <- {
        if(dashPtr.dashParent==NULL){dashPtr.dashParent<-self}
        dashParent.addDependent(key, dashPtr)
    }
    their dash: dependentIsRegistered(me string: key) <- {
        if(dashParent==NULL){log("In dash.dependentIsRegistered("+key+") dashParent was NULL")}
        return(dashParent.dependentIsRegistered(key))
    }
    void: requestRedraw() <- {
        if(dashParent==NULL){log("In Dash.requestRedraw() dashParent was NULL")}
        isDirty<-true; dashParent.requestRedraw()
    }
    void: activatePropertyEditor() <- {}
    void: addRelation(me string: relationType, their dash: from, their dash: to) <- {
        if(dashParent==NULL){log("In Dash.addRelation() dashParent was NULL")}
        dashParent.addRelation(relationType, from, to)
    }

    me bool: mouseMoved(their GUI_MotionEvent: event) <- {
        if(!checkForMouseOver(event)){return(false)}
        return(true)
    }

    their DashboardWidget: getDashBrdMngr()<-{return(dashParent.getDashBrdMngr())}
}

struct Dashboard: inherits=dash{
    me List<our dash>: dashChildren
    me Map<me string, their dash>: dependentItems
    me List<our decor>: decorations
    me string: bgImageFilename
    mode[accomodateParent, accomodateContent]: sizingMode
    mode[userArranges, singleDash, verticalStack]: layoutMode
    their GUI_ctxt: myGUI_ctxt

    their dash: dependentIsRegistered(me string: key) <- {
        if(dependentItems.containsKey(key)){
            return(dependentItems.at(key))
        }
        return(NULL)
    }

    me void: addChild(our dash: child) <- {child.dashParent<-self; dashChildren.pushLast(child)}

    void: addDependent(me string: key, their dash: dashPtr) <- {
        if(! dependentItems.containsKey(key)){
            dashPtr.isHidden <- true
            dependentItems[key] <- dashPtr
        }
    }

    me void: addArrow(their dash: from, their dash: to) <- {
        me GUI_Scalar: fromX    <- from.posX+155
        me GUI_Scalar: fromY    <- from.posY+12
        me GUI_Scalar: smallToX <- to.posX
        me GUI_Scalar: largeToX <- to.posX + to.width
        me GUI_Scalar: smallToY <- to.posY
        me GUI_Scalar: largeToY <- to.posY + to.height
        our arrow: Arrow {fromX, fromY, intersectPoint(fromX, smallToX, largeToX), intersectPoint(fromY, smallToY, largeToY)}
        decorations.pushLast(Arrow)
    }

    void: addRelation(me string: relationType, their dash: from, their dash: to) <- {
        if(relationType=='arrow'){
            addArrow(from, to)
        }
    }

    void: requestRedraw() <- {
        if(dashParent==NULL){log("In Dashboard.requestRedraw() dashParent was NULL")}
        isDirty<-true;
        dashParent.requestRedraw()
    }

    me bool: basePrimaryClick(their GUI_ButtonEvent: event) <- {
        if(! isTouching(event.x, event.y)){return(false)}
        withEach child in dashChildren{
            child.primaryClick(event)
        }
        withEach Dash in dependentItems{
            if(! Dash.isHidden){
                Dash.primaryClick(event)
            }
        }
        requestRedraw()
        return(true)
    }
    me bool: primaryClick(their GUI_ButtonEvent: event) <- {return(basePrimaryClick(event))}

    me bool: baseSecondaryClick(their GUI_ButtonEvent: event) <- {
        if(! isTouching(event.x, event.y)){return(false)}
        withEach child in dashChildren{
            child.secondaryClick(event)
        }
        withEach Dash in dependentItems{
            if(! Dash.isHidden){
                Dash.secondaryClick(event)
            }
        }
        setPos(15, 15, 35)
        requestRedraw()
        return(true)
    }
    me bool: secondaryClick(their GUI_ButtonEvent: event) <- {return(baseSecondaryClick(event))}

    me bool: basePrimaryDn(their GUI_ButtonEvent: event) <- {
        if(! isTouching(event.x, event.y)){return(false)}
        withEach child in dashChildren{
            child.primaryDn(event)
        }
        withEach Dash in dependentItems{
            if(! Dash.isHidden){
                Dash.primaryDn(event)
            }
        }
        return(true)
    }
    me bool: primaryDn(their GUI_ButtonEvent: event) <- {return(basePrimaryDn(event))}

    me bool: basePrimaryUp(their GUI_ButtonEvent: event) <- {
        if(! isTouching(event.x, event.y)){return(false)}
        withEach child in dashChildren{
            child.primaryUp(event)
        }
        withEach Dash in dependentItems{
            if(! Dash.isHidden){
                Dash.primaryUp(event)
            }
        }
        return(true)
    }
    me bool: primaryUp(their GUI_ButtonEvent: event) <- {return(basePrimaryUp(event))}

    me bool: mouseMovedBase(their GUI_MotionEvent: event) <- {
        if(!checkForMouseOver(event)){return(false)}
        withEach child in dashChildren{
            child.mouseMoved(event)
        }
        withEach Dash in dependentItems{
            if(! Dash.isHidden){
                Dash.mouseMoved(event)
            }
        }
        return(true)
    }
    me bool: mouseMoved(their GUI_MotionEvent: event) <- {return(mouseMovedBase(event))}

    me void: drawToPDF(me string: filename, me double: inchesWide, me double: inchesHigh, me double: scale) <- {
        //their GUI_ctxt: PDF <- myGUI_ctxt.newPDF_ctxt(filename, inchesWide, inchesHigh)
        //PDF.setScale(scale, scale)
        //draw(PDF)
        //PDF.finishPDF()
    }

    //me bool: secondaryClick(their GUI_ButtonEvent: event) <- {print("RIGHT BUTTON!\n"); drawToPDF('infonView.pdf', 11.0, 8.5, 0.4); return(true)}

    void: init(me string: label) <- {
        title <- label+".Dashboard"
        isHidden <- false
    }

    void: update() <- {log("base::update")}

    void: setPos(me GUI_Scalar:x, me GUI_Scalar:y, me GUI_Scalar: extCursor) <- {
        me GUI_Scalar: YCursor <- y
        decorations.clear()
        width <- 10
        height <- 10
        withEach Dash in dependentItems{
            Dash.isHidden<-true
            Dash.posIsSet<-false
        }
        withEach child in dashChildren{
            extY <- YCursor+25
            child.setPos(x, YCursor, extY)
            width<-max(width, child.extX)
            height<-max(height, child.height+YCursor)
            YCursor <- child.extY + 30
        }
        withEach depDash in dependentItems{
            if(!depDash.isHidden){
                width<-max(width, depDash.extX)
                height<-max(height, depDash.extY)
            }
        }
        width <- width +30
        height <- height +30
    }
    // TODO: Support other layouts: verticalStack and userArranges
    void: layoutChildDashes() <- {
        me GUI_Scalar: verticalOffset   <- 0
        me GUI_Scalar: horizontalOffset <- 0
        if(sizingMode==accomodateContent){}
        if(layoutMode==singleDash){
            dashChildren[0].width <- width
            dashChildren[0].height <- height
        }else if(layoutMode==verticalStack){
            verticalOffset <- 15
            withEach childDash in dashChildren{
                childDash.setPos(15, verticalOffset, 0)
                verticalOffset <- childDash.extY+ 10
                horizontalOffset <- max(horizontalOffset, childDash.extX)
            }
        }else if(layoutMode==userArranges){
        }
    }

    void: baseDraw(their GUI_ctxt: cr) <- {
        if (isHidden){return()}
        layoutChildDashes()
        me cdColor: bkCol <- styler.bkGndColor
        me cdColor: fgCol <- styler.frGndColor
        if(bgImageFilename!=""){
            displayBackgroundImage(cr, bgImageFilename)
        } else {
            //    cr.setColor(bkCol)
            //    cr.paintNow()
        }

        cr.setLineWidth(2)
        withEach childDash in dashChildren{
            cr.setColor(fgCol)
            childDash.draw(cr)
        }
        withEach depDash in dependentItems{
            if(!depDash.isHidden){
                depDash.draw(cr)
            }
        }
        withEach decoration in decorations{
            decoration.draw(cr)
        }
    }
    void: draw(their GUI_ctxt: cr) <- {baseDraw(cr)}
}

struct dataField: inherits=dash{
    me string: label
    me string: value
    me int: midPos
    void: update(me int:MidPos, me int:minWidth, me string: Label, me string: Value, me bool: hideThis) <- {
        isNullLike<-hideThis
        midPos<-MidPos; label<-Label; value<-Value;
    }

   void: setPos(me GUI_Scalar:x, me GUI_Scalar:y, me GUI_Scalar: extCursor) <- {
        posIsSet <- true
        posX   <- x
        posY   <- y
        extC   <- extCursor
        height <- 15
        width  <- 180
        extX   <- posX+width
        extY   <- posY+height
    }

    void: draw(their GUI_ctxt: cr) <- {
        if (isHidden){return()}
        renderText(cr, label, styler.smallFont, posX, posY+15)
        renderText(cr, value, styler.smallFont, posX+midPos, posY+15)
    }
}

struct ptrToItem: inherits=dash{
    me dataField: header
    me bool: refHidden
    me string: symbol
    their dash: dashPtr

    void: update(me string: Label, me string: textValue, me bool: hideThis) <- {
        isNullLike<-hideThis
        symbol <- textValue
        header.update(100, 180, Label, textValue, false)
    }

    void: setPos(me GUI_Scalar:x, me GUI_Scalar:y, me GUI_Scalar: extCursor) <- {
        posIsSet <- true
        posX <- x
        posY <- y
        extC <- extCursor
        header.setPos(x, y, extY)
        height <- header.height
        width <- header.width
        dashPtr <- dependentIsRegistered(symbol)
        if((!refHidden) and dashPtr!=NULL and dashPtr.isHidden){
            dashPtr.isHidden<-false
        }
        extX <- posX+width
        extY <- posY+height
    }

    me bool: primaryClick(their GUI_ButtonEvent: event) <- {
        if(!isTouching(event.x, event.y)){return(false)}
        if(refHidden){refHidden<-false}
        else {refHidden<-true}
        return(true)
    }

    void: draw(their GUI_ctxt: cr) <- {
        if (isHidden){return()}
        header.isHidden <- false
        header.draw(cr)
    }

    void: INIT()<-{refHidden<-true}
}

struct listOfItems: inherits=dash{
    me mode[headerOnly, fullDisplay, noZeros]: displayMode
    me mode[vertical, horizontal]: orientation
    me dataField: header
    our List<our dash>: elements

    void: update(me string: Label, me string: textValue, me bool: hideThis, me bool: clear <- true) <- {
        isNullLike<-hideThis
        header.update(100, 180, Label, textValue, false)
        if(clear){
            Allocate(elements)
        }
    }

    void: updatePush(our dash: element) <- {
        elements.pushLast(element)
    }

    void: setPos(me GUI_Scalar:x, me GUI_Scalar:y, me GUI_Scalar: extCursor) <- {
        posIsSet <- true
        posX <- x;
        posY <- y;
        extC <- extCursor
        header.setPos(x, y, y)
        y <- y+header.height
        width <- header.width
        height <- y-posY
        extX <- header.extX
        extY <- max(y, extC)
        /*if(displayMode!=headerOnly){
            if(orientation==vertical){
                x <- x+8
                withEach element in elements{
                    element.dashParent <- self
                    element.isHidden <- false
                    element.setPos(x,y,extC)
                    y <- y+element.height
                    width <- max(width, element.width+8)
                    extX <- max(extX, element.extX)
                    extY <- max(extY, element.extY)
                }
                height <- y-posY
            } else if(orientation==horizontal){
                me GUI_Scalar: listX <- posX + header.width+30    // This 30 should really be calculated to compensate for nested items. Actual distance should be 40.
                me GUI_Scalar: listY <- extC
                me GUI_Scalar: listC <- extC+40;
                withEach element in elements{
                    element.dashParent <- self
                    element.isHidden <- false
                    element.setPos(listX,listY,listC)
                    extC  <- max(extC, element.extY)
                    extY  <- max(extY, extC)
                    listX <- element.extX + 20
                    extX  <- element.extX
                }
                addRelation("arrow", self, elements[0])
                if(extC > listC){
                    extC <- extC+40
                    extY <- max(extY, extC)
                }
            }
        }*/
    }

   me bool: primaryClick(their GUI_ButtonEvent: event) <- {
        me GUI_Scalar: eventX <- event.x
        me GUI_Scalar: eventY <- event.y
        if( header.isTouching(eventX, eventY)){
            if(displayMode==headerOnly){displayMode <- fullDisplay; orientation <- vertical}
            else if(displayMode==fullDisplay and orientation==vertical){
                orientation<-horizontal
            } else {displayMode <- headerOnly}
        } else {return(false)}
        return(true)
    }

    void: draw(their GUI_ctxt: cr) <- {
        if (isHidden){return()}
        header.isHidden <- false
        header.draw(cr)
        /*if(displayMode!=headerOnly){
            withEach element in elements{
                element.isHidden <- false
                element.draw(cr)
            }
            if(orientation==horizontal){
                me int:lastElIdx <- elements.size()
                if(lastElIdx>=1){
                    lastElIdx <- lastElIdx-1
                    cr.moveTo(elements[0].posX, elements[0].posY)
                    cr.lineTo(elements[lastElIdx].posX + elements[lastElIdx].width, elements[lastElIdx].posY)
                    cr.moveTo(elements[0].posX, elements[0].posY+18)
                    cr.lineTo(elements[lastElIdx].posX + elements[lastElIdx].width, elements[lastElIdx].posY+18)
                    cr.strokeNow()
                }
            }
        }*/
    }
}

struct DashboardWidget: inherits=Dashboard{
    their GUI_canvas: canvas
    their GUI_canvas: managedWidget
    me bool: showModalPopUp <- false
    me GUI_eventDispatcher: EventDispatcher
    our Dashboard: popUp

    their Dashboard: base  // This is bad. Fix calling super class then we won't need this.

    void: requestRedraw() <- {
        markDirtyArea(canvas, 0,0, widgetWidth(canvas), widgetHeight(canvas))
    }
    their DashboardWidget: getDashBrdMngr()<-{return(self)}
    their GUI_canvas: init(me string: label) <- {
        base <- self
        title   <- 'DashboardWidget.'+label
        showModalPopUp <- false
        canvas  <- thisApp.gui.newCanvas()
        canvas.setParent(self)
        width <- widgetWidth(canvas); height <- widgetHeight(canvas)
        //    their scrollerWidget:: scrollView  <- ()
        //    their GUI_ScrollingWindow: scrollerFrame <- scrollView.makeScrollerWidget(canvas)
        //    managedWidget <- scrollerFrame
        //    managedWidget <- makeYStack("")
        //    addToContainer(managedWidget, canvas)
        managedWidget <- canvas
        EventDispatcher.registerWidgetForEventDispatcher(canvas, self)
        return(managedWidget)
    }
    me bool: mouseMoved(their GUI_MotionEvent: event) <- {
        if(showModalPopUp){return(popUp.mouseMoved(event))}
        return(mouseMovedBase(event))
    }
    me bool: primaryClick(their GUI_ButtonEvent: event) <- {
        if(showModalPopUp){return(popUp.primaryClick(event))}
        return(basePrimaryClick(event))
    }
    me bool: secondaryClick(their GUI_ButtonEvent: event) <- {
        if(showModalPopUp){return(popUp.secondaryClick(event))}
        return(baseSecondaryClick(event))
    }
    me bool: primaryUp(their GUI_ButtonEvent: event) <- {
        if(showModalPopUp){return(popUp.primaryUp(event))}
        return(basePrimaryUp(event))
    }
    me bool: primaryDn(their GUI_ButtonEvent: event) <- {
        if(showModalPopUp){return(popUp.primaryDn(event))}
        return(basePrimaryDn(event))
    }
    void: activateModalPopup(our Dashboard: popupToShow)<-{
        popUp <- popupToShow
        showModalPopUp <- true
        requestRedraw()
    }
    void: closePopup()<-{
        showModalPopUp <- false
        popUp <- NULL
        requestRedraw()
    }
}
struct GLOBAL{
    me GUI_Scalar: intersectPoint(me GUI_Scalar:outsidePt, me GUI_Scalar:smallPt, me GUI_Scalar: largePt) <- {
        me GUI_Scalar: ret
        if(outsidePt<smallPt){ret<-smallPt}
        else if(outsidePt>largePt){ret<-largePt}
        else{ret<-outsidePt}
        return(ret)
    }
}
