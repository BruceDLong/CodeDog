// Quic

requirements = [
    [require, Quic_implementation]
]

LibDescription ={
    useStatus   = static
    description ='Interface to the quic protocol'
}

initCode = `
    initQuicSystem()
`

deinitCode = `
    deinitQuicSystem()
`
featuresNeeded = [Logger,IOBuffer]

struct GLOBAL{
    const int: bufSize <- 1024
    me int: lastTaskID <- 0
}
struct QuicConnectionID{}

struct QuicEngine{
    me List<our QProtocol>: protocols
    me bool: isServer

    void: init(me string: filenameTag, me bool: ServerMode, me string: ipAddr, me int:portNum)
    void: start()

    void: onNewConnection_CB(their QuicConnection: qConn) <- {print("BASE::onNewConnection_CB!!!!!!!!!!!!!!!!!\n")}
    their QuicConnection: allocNewConn() // Just allocate and return your descendent of QuicConnection
    me bool: setupClientConnection(their QuicConnection: qConn, me string: ipAddr, me string:portNum)

    void: addProtocol(our QProtocol: QP) <- {protocols.pushLast(QP)}

    // setMaxStreams()
    // setStreamLimits()
    // setConnectionLimits()
}

struct QuicConnection{
    me int64: numActiveSessions <- 0
    their QuicEngine:  myEngine
    void: onNewStream_CB(their QuicStream: stream) <- {print("BASE QuicConnection::onNewStream_CB!!!!!!!!!!!!!!!!!\n")}
    void: onConnectionClosed_CB()                  <- {print("BASE::onConnectionClosed_CB!!!!!!!!!!!!!!!!!\n")}
    their QuicConnectionID: getConnectionID()
    their QuicStream: allocNewStream()             <- {print("BASE::allocNewStream!!!!!!!!!!!!!!!!!\n"); return(0)} // Just allocate and return your descendent of QuicStream
    void: abort()
    //void: ping()

    // on_reset_CB()
    // on_handshakeDone_CB()
    // on_sess_resume_info_CB()
    // getConnectionStatus()
}

struct QuicStream{
    their QuicConnection: myConnection
    me string: taskID
    me string: buff     // TODO: add buffer class to CodeDog
    me string: readBuffer     // TODO: add buffer class to CodeDog

    /// onRead_CB() is used to read incoming data. Take data from the string: data. Return the number of bytes you used.
    /// As long as you keep using the entire buffer, onRead_CB() will keep getting called as new data comes in.
    /// If you do not use all of them (and return a number < data.size()) it will stop looping. onRead_CB() still may be called again
    /// if you have requestRead on. So if you are done reading, unSet readRequest until you are ready for more.
    /// If 'finished' is true it means this is the last buffer due to end-of-stream.
    /// If you use all the bytes and finished is true the input stream will be stopped.
    uint64: onRead_CB (their string: data, me bool: finished)
    void: onWrite_CB()
    void: onClose_CB() <- {}

    void: nextOpIsRead()
    void: nextOpIsWrite()
    void: close()
    me int: read(me string: buf)
    me int: write(me string: buf)
    void: setPriority(me 1..256: priority)  // Lower value  = higher priority
    void: flushStream()
    void: stopReading()
    void: stopWriting()
    their QuicConnection: getConnection()

    me bool: readNotDone <- false
    our QProtocol: myProtocol

    me uint64: readLine(me string:dataIn) <- { // Returns the number of bytes used.
        me uint64: bytesUsed <- 0
        if(!readNotDone){
            readNotDone <- true
            readBuffer  <- ""
        }
        bytesUsed <- dataIn.find("\n")
        if(bytesUsed<0){
            readBuffer <+- dataIn
            bytesUsed <- dataIn.size()
        }else{
            readNotDone <- false
            readBuffer <+- dataIn.subStr(0, bytesUsed)
            bytesUsed <+- 1
        }
        return(bytesUsed)
    }
    void: INIT() <- {
        withEach n in RANGE(0..16){buff <+- "1234567890123456789012345678901234567890123456789012345678901234"}
    }
}
/////////////////////////////
// Engine sub-classes for Client and Server mode + Generic protocols
struct QProtocol{
    mode[qREQ, qSRV]: role
    mode[qOK, qError, qTerminated]: status
    me int: step
    me string: requestSpec
    me string: protocolIDPrefix
    me string: taskID
    me string: protocolArgs

    me bool: checkProtocolID(me string: protocol) <-{return(false)}
    their QuicStream: myStream
   // void: init() <- {}
    void: terminateStream() <- {}
    our QProtocol: createClone()
    uint64: onServerRead(their QuicStream: qStream, their string: data, me bool: finished)
    bool: onServerWrite(their QuicStream: qStream)
    uint64: onClientRead(their QuicStream: qStream, their string: data, me bool: finished)
    bool: onClientWrite(their QuicStream: qStream)
    void: onNewStream_CB(their QuicStream: stream) <- {print("BASE QProtocol::onNewStream_CB!!!!!!!!!!!!!!!!!\n")}
    me string: serverInit()
    void: clientInit()
    void: setArgs(me string: argsStr) <- {protocolArgs <- argsStr}
    void: setRequestSpec() <- {
        taskID       <- protocolIDPrefix+toString(lastTaskID)
        lastTaskID   <+- 1
        requestSpec  <- protocolIDPrefix+":"+taskID+":"+protocolArgs
    }
}

// SERVER
struct QuicEngine_Server: inherits=QuicEngine{
    our QProtocol: chooseProtocol(me string: protocolID) <- {
        withEach protocol in protocols{
            if(protocolID==protocol.protocolIDPrefix){
                our QProtocol: newProt <- protocol.createClone()
                return(newProt)
            }
        }
        return(NULL)
    }
    void: onNewConnection_CB(their QuicConnection: qConn) <- {}
    their QuicConnection: allocNewConn() <- {their QuicConnection_Server:: retval; return(retval);}
}
struct QuicConnection_Server: inherits=QuicConnection{
    me List<our QProtocol>: pendingProtocols
    void: onConnectionClosed_CB() <- {}

    void: onNewStream_CB(their QuicStream: qStream) <- {
        me uint64: streamID <- qStream.getStreamID()
        if(streamID==0){
            qStream.nextOpIsRead()
        }
        else{
            qStream.nextOpIsWrite()
        }

    }

    their QuicStream: allocNewStream() <- {their QuicStream_Server:: retval; return(retval);}
}
struct QuicStream_Server: inherits=QuicStream{
    me string: serverInitStr
    uint64: onRead_CB(their string: data, me bool: finished) <- {
        me uint64: streamID <- getStreamID()
       // print("\nSERVER::onRead_CB:","  STREAM_ID:", streamID,"\n")
        me uint64: bytesUsed <- 0
        our QProtocol: newProtocol
        if(streamID==0){
            bytesUsed <- readLine(data); if(readNotDone){readNotDone <- false; return(bytesUsed)}
            me string: requestSpecIn <- readBuffer.subStr(0,bytesUsed)
            print("                ON_READ: REQ:", requestSpecIn, "\n")
            me int: colPos           <- requestSpecIn.find(":")
            me string: protocolIDIn  <- requestSpecIn.subStr(0, colPos)
            requestSpecIn            <- requestSpecIn.subStr(colPos+1, requestSpecIn.size())
            colPos <- requestSpecIn.find(":")
            me string: taskIDIn      <- requestSpecIn.subStr(0, colPos)
            me string: protocolArgsIn     <- requestSpecIn.subStr(colPos+1, requestSpecIn.size())
            their QuicEngine_Server: QEng <- myConnection.myEngine
            newProtocol <- QEng.chooseProtocol(protocolIDIn)
            if(newProtocol==NULL){
                print("Protocol not found:'" + protocolIDIn,"'\n")
                return(0) // Signal to stop sending read events for now.
            }else{
                newProtocol.myStream         <- self
                newProtocol.requestSpec      <- requestSpecIn
                newProtocol.protocolIDPrefix <- protocolIDIn
                newProtocol.taskID           <- taskIDIn
                newProtocol.protocolArgs     <- protocolArgsIn
                newProtocol.step             <- 0
                serverInitStr <- newProtocol.serverInit()
                print("                ServerInitStr:'",serverInitStr,"'\n")
                // Does the result string start with 'ERR' or 'OK:'?
                colPos <- serverInitStr.find(":")
                me string: status <- serverInitStr.subStr(0,colPos)
                if(status=="ERR"){
                    print("                ERR_STATUS:",status,"\n")
                } else if(status=="OK"){
                    print("                STATUS:",status,"\n")
                    their QuicConnection_Server: qConn <- getConnection()
                    qConn.pendingProtocols.append(newProtocol)
                    qConn.createNewStream()
                } else { // if "DONE"
                }
                nextOpIsWrite()
            }
        }else{
            bytesUsed <+- newProtocol.onServerRead(self, data, finished)
        }
        return(bytesUsed)
    }
    void: onWrite_CB() <- {
        me uint64: streamID <- getStreamID()
        if(streamID==0){
             print("                STREAM_",streamID," WRITE:'",serverInitStr,"'\n")
            write(serverInitStr)
            flushStream()
            doneWriting()
        } else {
            if(myProtocol==NULL){
                their QuicConnection_Server: qConn <- getConnection()
                myProtocol <- qConn.pendingProtocols.popFirst()
                //print("                STREAM_",streamID," WRITE:'",myProtocol.taskID,"'\n")
                write(myProtocol.taskID+"\n")
                flushStream()
            //    myProtocol.step <+- 1
            } else if(!myProtocol.onServerWrite(self)){
                stopWriting()
            }
        }
    }
    void: onClose_CB() <- {}//LOGX("SLIP:S6 server stream closed");}
}

// CLIENT
struct QuicClient_Engine: inherits=QuicEngine{
    me Map<me string, their QuicClient_Connection>: currentConnections

    their QuicClient_Connection: getClientConnection(me string: ipAddr, me string:portNum) <- {
        me string: connID <- ipAddr+"@"+portNum
        their QuicClient_Connection: retVal <- NULL
        itr Map<me string, their QuicClient_Connection>: connItr <- currentConnections.find(connID)
        if(connItr != currentConnections.end()){
            retVal <- connItr.val
        } else {
            their QuicClient_Connection:: qConn
            if(setupClientConnection(qConn, ipAddr, portNum)){
                qConn.createNewStream()
                currentConnections[connID] <- qConn
                retVal <- qConn
            }
        }
        return(retVal)
    }

    void: onNewConnection_CB(their QuicConnection: qConn) <- {}

    their QuicConnection: allocNewConn() <- {their QuicClient_Connection:: retval; return(retval);}
}
struct QuicClient_Connection: inherits=QuicConnection{
    their QuicClient_Stream: masterStream
    me List<our QProtocol>: pendingSessions
    me Map<me string, our QProtocol>: activeSessions

    void: enQSession(our QProtocol: QP) <- {
        QP.step <- 0
        pendingSessions.pushLast(QP)
        if(masterStream){masterStream.nextOpIsWrite()}
        print("        Enque CLIENT Session: ", QP.protocolArgs, "\n")
    }
    void: onConnectionClosed_CB() <- {}
    void: onNewStream_CB(their QuicStream: qStream) <- {
        me uint64: streamID <- qStream.getStreamID()
        their QuicClient_Stream: qStreamClient  <- qStream
        their QuicClient_Engine: qcEngine <- myEngine
        if(streamID==0){
            masterStream <- qStreamClient
            if(pendingSessions.size()==0){printf("No protocols given for Quic.\n")}
            else{masterStream.nextOpIsWrite()}
        } else {
            if(qStream.taskID==""){
                qStream.nextOpIsRead()
            }
        }
    }
    their QuicStream: allocNewStream() <- {
        their QuicClient_Stream:: retval;
        return(retval);
    }
}
struct QuicClient_Stream: inherits=QuicStream{
    uint64: onRead_CB(their string: data, me bool: finished) <- {
        me uint64: streamID <- getStreamID()
        their QuicClient_Connection: qConn <- getConnection()
        me uint64: bytesUsed <- 0
        if(streamID==0){
            bytesUsed <- readLine(data); if(readNotDone){readNotDone <- false; return(bytesUsed)}
            me string: taskStatus <- readBuffer.subStr(0,bytesUsed)
            qConn.numActiveSessions <-- 1
            print("                TASK_STATUS:'", taskStatus, "'   qConn.numActiveSessions:",qConn.numActiveSessions, "\n")
            if(qConn.numActiveSessions==0){doneReading()}

        } else if(taskID==""){
            bytesUsed <- readLine(data); if(readNotDone){readNotDone <- false; return(bytesUsed)}
            taskID <- readBuffer.subStr(0,bytesUsed)
            //print("                INCOMING_TASK_ID:'",taskID, "'\n" )
            myProtocol <- qConn.activeSessions[taskID]
            nextOpIsRead()
        } else {
            //print("                TASK_ID:'",taskID, "'\n" )
            bytesUsed <- myProtocol.onClientRead(self, data, finished)
        }
        return(bytesUsed)
    }
    void: onWrite_CB() <- {
        me uint64: streamID <- getStreamID()
        their QuicClient_Connection: qConn <- getConnection()
        their QuicClient_Engine: qcEngine <- qConn.myEngine
        if(streamID==0){
            if(!qConn.pendingSessions.isEmpty()){
                qConn.numActiveSessions <+- 1
                our QProtocol: protocol <- qConn.pendingSessions.popFirst()
                protocol.setRequestSpec()
                taskID <- protocol.taskID
                qConn.activeSessions[taskID] <- protocol
                protocol.clientInit()
                print("                ON_WRITE: protocol.requestSpec:'", protocol.requestSpec, "'\n")
                write(protocol.requestSpec+"\n"); flushStream()
                nextOpIsRead()
            }
            if(qConn.pendingSessions.isEmpty()){
                doneWriting()
            }
        } else if(!myProtocol.onClientWrite(self)){
                stopWriting()
                nextOpIsRead()
            }
    }
    void: onClose_CB() <- {
        me uint64: streamID <- getStreamID()
        if(streamID!=0){
            their QuicClient_Connection: qConn <- getConnection()
            qConn.activeSessions.erase(taskID)
        }
    }
}
