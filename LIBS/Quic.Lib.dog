// Quic

requirements = [
    [require, Quic_implementation]
]

LibDescription ={
    useStatus   = static
    description ='Interface to the quic protocol'
}

initCode = `
    initQuicSystem()
`

deinitCode = `
    deinitQuicSystem()
`
featuresNeeded = [Logger,IOBuffer]

struct GLOBAL{
    const int: bufSize <- 1024
}
struct QuicConnectionID{}

struct QuicEngine{
    me List<our QProtocol>: protocols

    void: init(me string: filenameTag, me bool: ServerMode, me string: ipAddr, me int:portNum)
    void: run()

    void: onNewConnection_CB(their QuicConnection: conn) <- {log("BASE::onNewConnection_CB\n")}
    their QuicConnection: allocNewConn() // Just allocate and return your descendent of QuicConnection
    void: addProtocol(our QProtocol: QP) <- {protocols.pushLast(QP)}

    // setMaxStreams()
    // setStreamLimits()
    // setConnectionLimits()
}

struct QuicConnection{
    their QuicEngine:  myEngine

    void: onNewStream_CB(their QuicStream: stream)// <- {log("BASE::onNewStream_CB\n")}
    void: onConnectionClosed_CB()
    their QuicConnectionID: getConnectionID()
    their QuicStream: allocNewStream()  // Just allocate and return your descendent of QuicStream
    void: abort()
    //void: ping()

    // on_reset_CB()
    // on_handshakeDone_CB()
    // on_sess_resume_info_CB()
    // getConnectionStatus()
}

struct QuicStream{
    their QuicConnection: myConnection
    our QProtocol: protocol
    me string: buff     // TODO: add buffer class to CodeDog

    void: onRead_CB (their QuicStream: qStream) <- {}
    void: onWrite_CB(their QuicStream: qStream) <- {}
    void: onClose_CB(their QuicStream: qStream) <- {}

    void: requestRead()
    void: requestWrite()
    void: close()
    me int: read(me string: buf)
    me int: write(me string: buf)
    void: setPriority(me 1..256: priority)  // Lower value  = higher priority
    void: flushStream()
    void: shutdown(me int: direction) // 0=stop reading, 1=stop writing, 2=stop both
    their QuicConnection: getConnection()
    me string: readLine()<- {
        me bool: newLineFound <- false
        while(!newLineFound){
            me string: crntBuff <- ""
            me int: bytesRead   <- read(crntBuff)
            if(bytesRead>0){
                withEach idx in RANGE(0..bytesRead){
                    if(crntBuff[idx]=="\n"){
                        me string: retBuff <- buff + crntBuff.subStr(0, idx)
                        buff <- crntBuff.subStr(idx+1, bytesRead-(idx+1))
                    }
                }
            }
        }
        return("")
    }
    void: INIT() <- {
        withEach n in RANGE(0..16){buff <+- "1234567890123456789012345678901234567890123456789012345678901234"}
    }
}
/////////////////////////////
// Engine sub-classes for Client and Server mode + Generic protocols

struct QProtocol{
    mode[qREQ, qSRV]: role
    mode[qOK, qError, qTerminated]: status
    me int: step
    me string: protocolIDPrefix
    me bool: checkProtocolID(me string: protocol) <-{return(false)}
    me bool: doStep()
    their QuicStream: myStream
    //void: fork()
    void: init() <- {}
    void: terminateStream() <- {}
    our QProtocol: createClone()
    bool: onServerRead(their QuicStream: qStream)
    bool: onServerWrite(their QuicStream: qStream)
    bool: onClientRead(their QuicStream: qStream)
    bool: onClientWrite(their QuicStream: qStream)
}


// SERVER
struct QuicEngine_Server: inherits=QuicEngine{
    our QProtocol: chooseProtocol(me string: protocolID) <- {
        withEach protocol in protocols{
            print("@@@ chooseProtocol:", protocol.protocolIDPrefix)
            if(protocolID==protocol.protocolIDPrefix){
                our QProtocol: newProt <- protocol.createClone()
                return(newProt)
            }
        }
        return(NULL)
    }
    void: onNewConnection_CB(their QuicConnection: conn) <- {
        log("created new connection");
    }
    their QuicConnection: allocNewConn() <- {their QuicConnection_Server:: retval; return(retval);}
}
struct QuicConnection_Server: inherits=QuicConnection{
    void: onConnectionClosed_CB() <- {log("server closed connection")}

    void: onNewStream_CB(their QuicStream: stream) <- {
        stream.requestRead()
        log("created new echo stream -- want to read")
    }

    their QuicStream: allocNewStream() <- {their QuicStream_Server:: retval; return(retval);}
}
struct QuicStream_Server: inherits=QuicStream{
    our QProtocol: crntProtocol
    void: onRead_CB (their QuicStream: qStream) <- {
        printf("R.")
        if(crntProtocol==NULL){
            me string: protocolID <- qStream.readLine()
            their QuicEngine_Server: QEng <- myConnection.myEngine
            crntProtocol <- QEng.chooseProtocol(protocolID)
            if(crntProtocol==NULL){
                log("Protocol not found:'"+protocolID+"'")
             //   terminate stream
                return()
            }else{
                qStream.shutdown(0);
                //step <+- 1
                crntProtocol.init()
            }
        }
        //crntProtocol.doStep(step)
    }
    void: onWrite_CB(their QuicStream: qStream) <- {
        printf("W.")
     // Same functionality as server_on_write_v0(), but use the "reader" callbacks.  This is most useful when data comes from a different source such as file descriptor.
        //server_stream_ctx* const tssc <- (server_stream_ctx*) h;
        //lsquic_reader reader <- { tssc_read, tssc_size, tssc, };
        //const size_t left <- tssc->tssc_sz;

        me int: bytesWritten //<- lsquic_stream_writef(theStream, &reader);
        if (bytesWritten > 0 ){ //and tssc->tssc_off == tssc->tssc_sz){
            //LOGX("wrote all %zd bytes to stream, close stream", left);
            close()
        }else if (bytesWritten < 0){
            //LOGX("stream_write() returned %ld, abort connection", (long) bytesWritten);
            getConnection().abort();
        }
    }
    void: onClose_CB(their QuicStream: qStream) <- <%{
        LOGX("stream closed");
    }%>
}

// CLIENT
struct QuicEngine_Client: inherits=QuicEngine{
    their strBuf: inputBuf
    void: onNewConnection_CB(their QuicConnection: conn) <- {
        log("SLIP:C1 created client connection")
    }
    their QuicConnection: allocNewConn() <- {their QuicConnection_Client:: retval; return(retval);}
}
struct QuicConnection_Client: inherits=QuicConnection{
    void: onConnectionClosed_CB() <- {
        log("SLIP:C3 client connection closed");
    }
    void: onNewStream_CB(their QuicStream: qStream) <- {
        their QuicStream_Client: qStreamClient  <- qStream
        their QuicEngine_Client: qcEngine <- myEngine
        qStreamClient.readBuffer <- qcEngine.inputBuf
        qStreamClient.requestWrite()
        qStreamClient.protocol <- qcEngine.protocols[0]
        log("SLIP:C2 created client STREAM")
    }
    their QuicStream: allocNewStream() <- {their QuicStream_Client: retval; Allocate(retval); return(retval);}
}
struct QuicStream_Client: inherits=QuicStream{
    their strBuf: readBuffer
    void: onRead_CB(their QuicStream: qStream) <- {
        printf("R.")
        if(!qStream.protocol.onClientRead(qStream)){
            qStream.shutdown(0)
        }
    }
    void: onWrite_CB(their QuicStream: qStream) <- {
        printf("W.")
        if(!qStream.protocol.onClientWrite(qStream)){
            qStream.shutdown(1)
            qStream.requestRead()
        }
    }
    void: onClose_CB(their QuicStream: qStream) <- {log("SLIP:C6 stream closed");}
}
