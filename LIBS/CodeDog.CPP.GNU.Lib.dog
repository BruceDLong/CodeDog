/////////// Add routines for C++
requirements = [
    [tagOneOf, LangVersion, [GNU]]
]

interface={
    provides = [CodeDog_langVersion_implementation]
    libFiles = []
    headers  = [signal.h, string, cstring, memory, cstdint, list, deque, map, cstdarg, iostream, fstream, sys/stat.h, math.h, algorithm]
}

LibDescription ={
    useStatus   = dynamic
    description = 'Built in routines for CPP'
}

struct GLOBAL{
    me int: sleep(me int: milliseconds) <- <%{
       struct timespec req, rem;
       if(milliseconds > 999) {
            req.tv_sec = (int)(milliseconds / 1000);                            /* Must be Non-Negative */
            req.tv_nsec = (milliseconds - ((long)req.tv_sec * 1000)) * 1000000; /* Must be in range of 0 to 999999999 */
       }else{
            req.tv_sec = 0;                         /* Must be Non-Negative */
            req.tv_nsec = milliseconds * 1000000;    /* Must be in range of 0 to 999999999 */
       }
       return nanosleep(&req , &rem);
   }%>

    me string: execCmd(me string: command) <- <%{
      FILE* pipe;
      std::array<char, 128> buffer;
      string result = "";
      pipe = popen(command.data(), "r");
      if (pipe == NULL) {
        cout<<"Cannot execute command:'" << command<<"'\n";
        return "";
      }
      while(fgets(buffer.data(), 128, pipe) != NULL) {
        result = result+buffer.data();
      }
      pclose(pipe);
      return result;
    }%>
}
