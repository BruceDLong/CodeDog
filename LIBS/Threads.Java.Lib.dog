// CodeDog Threads Library

requirements = [
   [tagOneOf, Lang, [Java]]
]

interface={
    provides=[threads_implementation]
    libFiles=[]
    headers =[java.lang.Thread, java.util.concurrent.locks.ReentrantLock, java.util.concurrent.Semaphore]
}

LibDescription  = {
    useStatus   = dynamic
    description = 'Library for Webmulti-thread programming'
    features    = [Threads]
    Lang        = [Java]
}

struct Threads: wraps=Thread ownerMe=their{
    me bool: notDone <- true
    me uint: ID()           <- {return(5);}     // TODO: Finish Thread::ID(), Thread::isActive() and make active threads automatically join() in destructor.
    void: run()             <- {}
    bool: isActive()        <- <%!isAlive();%>
    void: start()           <- <%!start();%>
    void: waitForExit()     <- <%!try{%0.join(0);}catch(InterruptedException e){e.printStackTrace();}%>
}

struct Mutex: wraps=ReentrantLock{
    void: lock()        <- <%!lock()%>
    void: unlock()      <- <%!unlock()%>
    bool: tryLock()     <- <%!tryLock()%>
}

struct MutexMngr{
    me Mutex: mtx

    void: lock()        <- <%!mtx.lock()%>
    void: unlock()      <- <%!mtx.unlock()%>
    bool: tryLock()     <- <%!mtx.tryLock()%>
    // CONSTRUCTORS ////////////////////
    none: MutexMngr(me Mutex: __mutex)<-{mtx <- __mutex}
}

struct SyncLock: wraps = TODO {
    void: wait(me MutexMngr: lock)   <- <%{}%>          // TODO: for Proteus codeGen
    void: notifyOne()                <- <%{}%>          // TODO: for Proteus codeGen
    //void: notifyAll()                <- <%!%>
}

struct Semaphore: wraps=Semaphore {
    //void: post()        <- <%!%>
    //void: wait()        <- <%!%>
}
