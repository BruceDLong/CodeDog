// CodeDog Threads Library

requirements = [
   [tagOneOf, Lang, [Java]]
]

interface={
    provides=[threads_implementation]
    libFiles=[]
    headers =[java.lang.Thread, java.util.concurrent.locks.ReentrantLock, java.util.concurrent.Semaphore]
}

LibDescription  = {
    useStatus   = dynamic
    description = 'Library for Webmulti-thread programming'
    features    = [Threads]
    Lang        = [Java]
}
embedHigh = `
class __SyncLock{
    public void wait(ReentrantLock mutex){
        try{
            synchronized (this){
                mutex.unlock();
                wait();
            }
        }
        catch(InterruptedException ie){}
        finally{mutex.lock();}
    }
    public synchronized void notifyOne() {
        notify();
    }
}
`
struct Threads: wraps=Thread ownerMe=their{
    me bool: notDone <- true
    me uint: ID()           <- {return(5);}     // TODO: Finish Thread::ID(), Thread::isActive() and make active threads automatically join() in destructor.
    void: run()             <- {}
    bool: isActive()        <- <%!isAlive();%>
    void: start()           <- <%!start();%>
    void: waitForExit()     <- <%!try{%0.join(0);}catch(InterruptedException e){e.printStackTrace();}%>
}

struct Mutex: wraps=ReentrantLock{
    void: lock()        <- <%!lock()%>
    void: unlock()      <- <%!unlock()%>
    bool: tryLock()     <- <%!tryLock()%>
}

struct MutexMngr{
    me Mutex: mtx

    void: lock()        <- <%!mtx.lock()%>
    void: unlock()      <- <%!mtx.unlock()%>
    bool: tryLock()     <- <%!mtx.tryLock()%>
    // CONSTRUCTORS ////////////////////
    none: MutexMngr(me Mutex: __mutex)<-{mtx <- __mutex}
}

struct SyncLock: wraps = __SyncLock {
    void: wait(me MutexMngr: lock)   <- <%!wait(%1.mtx)%>          // TODO: for Proteus codeGen
    void: notifyOne()                <- <%!notifyOne()%>          // TODO: for Proteus codeGen
    //void: notifyAll()                <- <%!%>
}

struct Semaphore: wraps=Semaphore {
    //void: post()        <- <%!%>
    //void: wait()        <- <%!%>
}

/*struct GLOBAL{ // pthread_mutex_t
    void: pthread_mutex_init(their pthread_mutex_t: mtx, their int: attr) <- <%!pthread_mutex_init(%1, %2)%>
    void: pthread_mutex_consistent_np(their pthread_mutex_t: mtx)         <- <%!pthread_mutex_consistent_np(%1)%>
    void: pthread_mutex_lock(their pthread_mutex_t: mtx)                  <- <%!pthread_mutex_lock(%1)%>
    void: pthread_mutex_unlock(their pthread_mutex_t: mtx)                <- <%!pthread_mutex_unlock(%1)%>
    void: pthread_mutex_trylock(their pthread_mutex_t: mtx)               <- <%!pthread_mutex_trylock(%1)%>
    void: pthread_mutex_destroy(their pthread_mutex_t: mtx)               <- <%!pthread_mutex_destroy(%1)%>
}

struct GLOBAL{ // pthread_cond_t
    void: pthread_cond_init(their pthread_cond_t: cv, their int: attr)               <- <%!pthread_cond_init(%1, %2)%>
    void: pthread_cond_wait(their pthread_cond_t: cv, their pthread_mutex_t: lock)   <- <%!pthread_cond_wait(%1, %2)%>
    void: pthread_cond_signal(their pthread_cond_t: cv)                              <- <%!pthread_cond_signal(%1)%>
    void: pthread_cond_timedwait(their pthread_cond_t: cv, their pthread_mutex_t: mp, their timestruct_t: time) <- <%!pthread_cond_timedwait(%1,%2,%3)%>
    void: pthread_cond_broadcast(their pthread_cond_t: cv)                           <- <%!pthread_cond_broadcast(%1)%>
    void: pthread_cond_destroy(their pthread_cond_t: cv)                             <- <%!pthread_cond_destroy(%1)%>
}*/
