//####### Native CodeDog library

requirements = [
    [require, CodeDog_implementation]
]

featuresNeeded = [List, Logger, Multimap]

struct GLOBAL{
    const double: pi <- 3.1415926535897

    me string: toString(me bool: tf) <- {
        if(tf){return("true")} else {return("false")}
    }

    // Convert doubles to strings w/ a specified number of significant figures. (Pretty axes labels)
    // TODO: Rounding, trailing 0's, leading 0's, track decimal point, tolerance range test, clean integers, move label w/ high sigfigs
    me string: dblToString(me double: val, me int: sigFigs) <- {
        me string: S <- toString(val)
        me string: S2 <- ""
        me int: sizeS <- S.size()
        me int: sizeS2 <- 0
        me int: digits <- 0
        me char: S2last
        me bool: hasDecimal <- false

        // Limit sig figs to length of double minus possible "." and "-"
        if(sizeS < sigFigs) {sigFigs <- sizeS-2}

        // Zero is 0
        if(val==0) {return(" 0")}

        withEach Pos in RANGE(0..sizeS) {
            me char: ch <- S[Pos]
            if(ch != "." and ch != "-") {
                digits <- digits + 1
                //print("digits is ", digits, ". Pos is ", Pos, ". S is ", S, "\n")
                if(digits >= sigFigs+1 and hasDecimal == true) {
                    S2 <- S.subStr(0, Pos)
                    break()
                }
            } else if(ch == ".") {hasDecimal <- true}
        }

        // Trim trailing period
        sizeS2 <- S2.size()
        S2last <- S2[sizeS2-1]
        if(S2last == ".") { S2 <- S2.subStr(0, sizeS2-1) }

        return(S2)
    }

    me bool: isUpper(me char: ch) <- {return(ch>="A" and ch<="Z")}
    me bool: isLower(me char: ch) <- {return(ch>="a" and ch<="z")}

    me string: deCamelCase(me string: identifier) <- {
        me string: retval
        me int: chPos <- 0
        me int: strSize <- identifier.size()
        while(chPos<strSize){
            me char: ch <- identifier[chPos]
            if(chPos==0)          {retval <+- toUpper(ch)}
            else if(isUpper(ch))  {retval <+- " "+toLower(ch)}
            else if(ch=="_")      {retval <+- " "}
            else                  {retval <+- ch}
            chPos <+- 1
        }
        return(retval)
    }

    me string: dispFieldAsText(me string: label, me int:labelLen) <- {
        me string: S <- ""
        me int: labelSize<-label.size()
        withEach count in RANGE(0..labelLen){
            if (count<labelSize){S <- S+label[count]}
            else if(count==labelSize){ S <- S+":"}
            else {S <- S+" "}
        }
        return(S)
    }
    me string: remNewLines(me string: s) <- {
        if(s=="") {return("")}
        me int: pos<-0
        me string: space <- " "
        while(pos < s.size()){
            if(s[pos]=="\n"){s[pos]<-space[0]}
            pos <- pos+1
        }
        return(s)
    }
    me string: indentedStr(me string: mesg, me int: lvl, me int: tabCol) <- {
        me string: strOut <- ""
        withEach c in RANGE(0..lvl){
            strOut <+- "   |"
        }
        strOut <+- mesg
        if(tabCol>0){strOut <- alignLeft(strOut, tabCol)}
        return(strOut)
    }
    me string: alignLeft(me string: s, me int: colWidth) <- {
        me string: strOut <- s
        me int: padLen <- colWidth-s.size()
        if(padLen>0){
            withEach i in RANGE(0..padLen){
                strOut <+- " "
            }
        }
        return(strOut)
    }
}

struct datum{
    me double: value
    me double: confidenceInterval
}

struct stringScanner{
    me string: S
    me int: pos
    void: initialize(me string: str) <- {S<-str  reset()}
    void: reset() <- {pos<-0}

    me int: skipWS() <- {       // Skip past 0 or more whitespace characters.  Return the new pos
        me char: ch
        me int: txtSize <- S.size()
        withEach p in RANGE(pos .. txtSize){
            ch <- S[p]
            if(! isspace(ch) or p==txtSize){pos<-p break()}
        }
        return(pos)
    }

    me int: skipPast(me string: findStr) <- {       // Skip past <txt>.  Return pos or -1 if End-of-string reached
        me int: txtSize <- S.size()
        me int: fs <- findStr.size()
        withEach p in RANGE(pos .. txtSize){
            withEach i in RANGE(0 .. fs){
                //print(">> fs/p/i:", fs, " ", p, " ", i, ", findStr[i]:", findStr[i], " S[p+i]:", S[p+i], "\n")
                if( findStr[i] != S[p+i]) {
                    break()
                } else {if(i==(fs-1)) {pos <- p+fs return(pos)}}
            }
        }
        return(-1)
    }

    me int: skipTo(me string: findStr) <- {       // Skip up to <txt>.  Return pos or -1 if End-of-string reached
        me int: foundPos <- skipPast(findStr)
        if(foundPos > 0) {return(foundPos-findStr.size())}
        else {return(-1)}
    }

    me int: scrapeUintSeq() <- {
        me char: ch
        me int: txtSize <- S.size()
        withEach p in RANGE(pos .. txtSize){
            ch <- S[p]
            if(isdigit(ch)){}
            else{
                if(p==pos){return(-1)}
                else{
                    me int: retVal <- p-pos
                    pos <- p;
                    return(retVal)
                }
            }
        }
        return(txtSize-pos)
    }
    me string: scrapeAlphaNumSeq() <- {
        me string: retStr
        me char: ch
        skipWS()
        me int: txtSize <- S.size()
        withEach p in RANGE(pos .. txtSize){
            ch <- S[p]
            pos <- p
            if(isalnum(ch) or ch=="-" or ch=="_"){retStr<+-ch}
            else{break()}
        }
        skipWS()
        return(retStr)
    }

    me int: chkStr(me string: s) <- {
        me int: L <- s.size()
        if(pos+L > S.size()){return(-1)}
        withEach i in RANGE(0 .. L){
            if( s[i] != S[pos+i]) {
                return(-1)
            }
        }
        pos <- pos+L
        return(pos)
    }
}

struct FileStream{
    me void: open(me string: filename)
    me void: openNew(me string: filename)
    me void: openAppend(me string: filename)
    me void: close()
    me int:  getChar()
    me string: getLine()
    me void: write(me string: S)
    me bool: EOF()
    me bool: failure()
}
struct sessionFile{}
