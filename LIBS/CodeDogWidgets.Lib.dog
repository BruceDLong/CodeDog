// CodeDog IntDraggerWidget

featuresNeeded = [GUI_ToolKit, Logger]

struct LabelDash: inherits=dash{
    me string:          label
    void: initLabelDash(me GUI_Scalar: PosX, me GUI_Scalar: PosY, me string: Label) <- {
        title                <- "LabelDash."+Label
        label                <- Label
        posX                 <- PosX
        posY                 <- PosY
    }
    void: draw(their GUI_ctxt: cr) <- {
        me GUI_Scalar: padding <- 5
        cr.setColor(Styler.Black)
        cr.setLineWidth(convertToFloatVal(0.5))
        me deltaSize: size <- getTextSize(label, styler.defaultFont)
        me GUI_Scalar: rightJustifyOffset <- size.width + padding
        renderText(cr, label, styler.defaultFont, posX-rightJustifyOffset, posY+padding+size.height)
    }
}
//// INT
struct IntDraggerDash: inherits=dash{
    me circleButton: leftIncrBtn
    me circleButton: rightDecrBtn
    me GUI_Scalar:   radius
    me GUI_Scalar:   btnSpan
    me int:          intData
    me int:          startData
    me int:          minValue
    me int:          maxValue
    void: initIntDraggerDash(me GUI_Scalar: PosX, me GUI_Scalar: PosY, me GUI_Scalar: Radius, me string: Label) <- {
        title                <- "IntDraggerDash."+Label
        posX                 <- PosX
        posY                 <- PosY
        radius               <- Radius
        btnSpan              <- 100
        intData              <- 0
    }
    void: requestRedraw() <- {
        if(dashParent==NULL){log("In IntDraggerDash.requestRedraw() dashParent was NULL")}
        isDirty<-true;
        dashParent.requestRedraw()
    }
    void: draw(their GUI_ctxt: cr) <- {
        me GUI_Scalar:   padding <- 5
        // BACKGROUND
        me cdColor: bkCol <- styler.White
        cr.setColor(bkCol)
        cr.paintNow()
        // FOREGROUND
        cr.setColor(Styler.Black)
        leftIncrBtn.initCircleBtn(posX+padding, posY+padding, radius, "<")
        leftIncrBtn.drawCircleBtn(cr)
        cr.setLineWidth(convertToFloatVal(0.5))
        me string: dataStr <- toString(intData)
        me deltaSize: size <- getTextSize(dataStr, styler.defaultFont)
        renderText(cr, dataStr, styler.defaultFont, posX+padding+radius*2+(btnSpan-size.width)/2, posY+padding+radius+size.height/2)
        rightDecrBtn.initCircleBtn(posX+padding+radius*2+btnSpan, posY+padding, radius, ">")
        rightDecrBtn.drawCircleBtn(cr)
    }
    bool: rangeActive() <- {return(minValue!=0 or maxValue!=0)}
    void: incrValue() <- {
        me int: calcVal <- intData + 1
        if (rangeActive()){
            if(calcVal > maxValue){intData <- maxValue}
            else{intData <- calcVal}
        }
        else{intData <- calcVal}
    }
    void: decrValue() <- {
        me int: calcVal <- intData - 1
        if (rangeActive()){
            if(calcVal < minValue){intData <- minValue}
            else{intData <- calcVal}
        }
        else{intData <- calcVal}
    }
    void: applyDelta(me int: val) <- {
        me int: calcVal <- startData + val
        if (rangeActive()){
            if(calcVal > maxValue){intData <- maxValue}
            else if (calcVal < minValue){intData <- minValue}
            else {intData <- calcVal}
        }
        else{intData <- calcVal}
    }
}
struct IntDraggerWidget: inherits=DashboardWidget{
    their appComponentGUI: parentGuiMgr
    their GUI_Frame:     box
    our LabelDash:       labelDash
    our IntDraggerDash:  intDraggerDash
    me int:              minValue <- 0
    me int:              maxValue <- 0
    me GUI_Scalar:       prevX
    me GUI_Scalar:       deltaX <- 0
    me int:              moveThreshold <- 2
    me bool:             isBtnDown     <- false
    me bool:             isDragging    <- false
    their GUI_Frame: initWidget(me string: label)      <- {
        ///// CANVAS AND EVENTS
        title                   <- 'IntDraggerWidget.'+label
        me int: radius          <- 20
        box                     <- makeYStack(title)
        canvas                  <- thisApp.gui.newCanvas()
        canvas.setParent(self)
        thisApp.gui.setWidgetSize(canvas,320,50)
        EventDispatcher.registerWidgetForEventDispatcher(canvas, self)
        ///// CHILDREN
        intDraggerDash.initIntDraggerDash(120,0,radius,label)
        addChild(intDraggerDash)
        intDraggerDash.minValue <- minValue
        intDraggerDash.maxValue <- maxValue
        labelDash.initLabelDash(120,6,label)
        addChild(labelDash)
        addToContainer(box, canvas)
        return(box)
    }
    void: INIT()                <- {
        Allocate(labelDash)
        Allocate(intDraggerDash)
    }
    void: requestRedraw() <- {
        markDirtyArea(canvas, 0,0, widgetWidth(canvas), widgetHeight(canvas))
    }
    me bool: primaryUp(their GUI_ButtonEvent: event) <- {
        if (intDraggerDash.rightDecrBtn.primaryUp(event)) {intDraggerDash.incrValue();requestRedraw()}
        else if (intDraggerDash.leftIncrBtn.primaryUp(event)) {intDraggerDash.decrValue();requestRedraw()}
        isBtnDown     <- false
        isDragging    <- false
        deltaX        <- 0
        prevX         <- 0
        onChanged()
        return(true)
    }
    me bool: primaryDn(their GUI_ButtonEvent: event) <- {
        isBtnDown                 <- true
        prevX                     <- event.x / displayDensity
        intDraggerDash.startData  <- intDraggerDash.intData
        return(true)
    }
    me bool: mouseMoved(their GUI_MotionEvent: event) <- {
        me GUI_Scalar: scaledX <- event.x / displayDensity
        deltaX         <- scaledX - prevX
        me int: multiplier <- convertToIntVal(deltaX)
        if (isBtnDown and abs(deltaX) > moveThreshold) {
            isDragging    <- true
            intDraggerDash.applyDelta(multiplier)
            requestRedraw()
        }
        return(true)
    }
    me int: getValue() <- {return(intDraggerDash.intData)}
    me void: setValue(me int: val) <- {intDraggerDash.intData <- val}
    me void: clear() <- {
        intDraggerDash.intData <- 0
        intDraggerDash.requestRedraw()
    }
    void: onChanged()  <- {parentGuiMgr.onChanged()}
}
//// INT - height
struct IntLengthDraggerDash: inherits=dash{
    me circleButton: leftIncrBtn
    me circleButton: rightDecrBtn
    me GUI_Scalar:   radius
    me GUI_Scalar:   btnSpan
    me int:          _data
    me int:          startData
    me int:          minValue
    me int:          maxValue
    void: init(me GUI_Scalar: PosX, me GUI_Scalar: PosY, me GUI_Scalar: Radius, me string: Label) <- {
        title                <- "timeDraggerDash."+Label
        posX                 <- PosX
        posY                 <- PosY
        radius               <- Radius
        btnSpan              <- 100
        _data                <- 0
    }
    void: requestRedraw() <- {
        if(dashParent==NULL){log("In IntLengthDraggerDash.requestRedraw() dashParent was NULL")}
        isDirty<-true;
        dashParent.requestRedraw()
    }
    void: draw(their GUI_ctxt: cr) <- {
        me GUI_Scalar:   padding <- 5
        // BACKGROUND
        me cdColor: bkCol <- styler.White
        cr.setColor(bkCol)
        cr.paintNow()
        // FOREGROUND
        cr.setColor(Styler.Black)
        leftIncrBtn.initCircleBtn(posX+padding, posY+padding, radius, "<")
        leftIncrBtn.drawCircleBtn(cr)
        cr.setLineWidth(convertToFloatVal(0.5))
        me int: feet   <- _data/12
        me int: inches <- _data%12
        me string: dataStr <- toString(feet) + "'  "+ toString(inches) + "''"
        me deltaSize: size <- getTextSize(dataStr, styler.defaultFont)
        renderText(cr, dataStr, styler.defaultFont, posX+padding+radius*2+(btnSpan-size.width)/2, posY+padding+radius+size.height/2)
        rightDecrBtn.initCircleBtn(posX+padding+radius*2+btnSpan, posY+padding, radius, ">")
        rightDecrBtn.drawCircleBtn(cr)
    }
    bool: rangeActive() <- {return(minValue!=0 or maxValue!=0)}
    void: incrValue() <- {
        me int: calcVal <- _data + 1
        if (rangeActive()){
            if(calcVal > maxValue){_data <- maxValue}
            else{_data <- calcVal}
        }
        else{_data <- calcVal}
    }
    void: decrValue() <- {
        me int: calcVal <- _data - 1
        if (rangeActive()){
            if(calcVal < minValue){_data <- minValue}
            else{_data <- calcVal}
        }
        else{_data <- calcVal}
    }
    void: applyDelta(me int: val) <- {
        me int: calcVal <- startData + val
        if (rangeActive()){
            if(calcVal > maxValue){_data <- maxValue}
            else if (calcVal < minValue){_data <- minValue}
            else {_data <- calcVal}
        }
        else{_data <- calcVal}
    }
}
struct IntLengthDraggerWidget: inherits=DashboardWidget{
    their appComponentGUI: parentGuiMgr
    their GUI_Frame:     box
    our LabelDash:       labelDash
    our IntLengthDraggerDash: childDraggerDash
    me int:              minValue <- 0
    me int:              maxValue <- 0
    me GUI_Scalar:       prevX
    me GUI_Scalar:       deltaX        <- 0
    me int:              moveThreshold <- 2
    me bool:             isBtnDown     <- false
    me bool:             isDragging    <- false
    their GUI_Frame: initWidget(me string: label)      <- {
        ///// CANVAS AND EVENTS
        title                   <- 'IntLengthDraggerWidget.'+label
        me int: radius          <- 20
        box                     <- makeYStack(title)
        canvas                  <- thisApp.gui.newCanvas()
        canvas.setParent(self)
        thisApp.gui.setWidgetSize(canvas,320,50)
        EventDispatcher.registerWidgetForEventDispatcher(canvas, self)
        ///// CHILDREN
        childDraggerDash.init(120,0,radius,label)
        addChild(childDraggerDash)
        childDraggerDash._data    <- 0
        childDraggerDash.minValue <- minValue
        childDraggerDash.maxValue <- maxValue
        labelDash.initLabelDash(120,6,label)
        addChild(labelDash)
        addToContainer(box, canvas)
        return(box)
    }
    void: INIT()                <- {
        Allocate(labelDash)
        Allocate(childDraggerDash)
    }
    void: requestRedraw() <- {
        markDirtyArea(canvas, 0,0, widgetWidth(canvas), widgetHeight(canvas))
    }
    me bool: primaryUp(their GUI_ButtonEvent: event) <- {
        if (childDraggerDash.rightDecrBtn.primaryUp(event)) {childDraggerDash.incrValue();requestRedraw()}
        else if (childDraggerDash.leftIncrBtn.primaryUp(event)) {childDraggerDash.decrValue();requestRedraw()}
        isBtnDown     <- false
        isDragging    <- false
        deltaX        <- 0
        prevX         <- 0
        onChanged()
        return(true)
    }
    me bool: primaryDn(their GUI_ButtonEvent: event) <- {
        isBtnDown                  <- true
        prevX                      <- event.x / displayDensity
        childDraggerDash.startData <- childDraggerDash._data
        return(true)
    }
    me bool: mouseMoved(their GUI_MotionEvent: event) <- {
        me GUI_Scalar: scaledX <- event.x / displayDensity
        deltaX         <- scaledX - prevX
        me int: multiplier <- convertToIntVal(deltaX)
        if (isBtnDown and abs(deltaX) > moveThreshold) {
            isDragging    <- true
            childDraggerDash.applyDelta(multiplier)
            requestRedraw()
        }
        return(true)
    }
    me int: getValue() <- {return(childDraggerDash._data)}
    me void: setValue(me int: val) <- {childDraggerDash._data <- val}
    me void: clear() <- {
        childDraggerDash._data <- 0
        childDraggerDash.requestRedraw()
        }
    void: onChanged()  <- {parentGuiMgr.onChanged()}
}
//// TIME
struct TimeDraggerDash: inherits=dash{
    me circleButton: leftIncrBtn
    me circleButton: rightDecrBtn
    me GUI_Scalar:   radius
    me timeValue:    timeData
    me timeValue:    startTime
    me int:          minuteOffset
    me GUI_Scalar:   btnSpan
    void: initTimeDraggerDash(me GUI_Scalar: PosX, me GUI_Scalar: PosY, me GUI_Scalar: Radius, me string: Label) <- {
        title                <- "timeDraggerDash."+Label
        posX                 <- PosX
        posY                 <- PosY
        radius               <- Radius
        btnSpan              <- 100
        minuteOffset         <- 0
        timeData             <- getCurrentTimeStamp()
        startTime            <- timeData
    }
    void: requestRedraw() <- {
        if(dashParent==NULL){log("In TimeDraggerDash.requestRedraw() dashParent was NULL")}
        isDirty<-true;
        dashParent.requestRedraw()
    }
    void: draw(their GUI_ctxt: cr) <- {
        me GUI_Scalar:   padding <- 5
        me string:       dataStr <- toString(minuteOffset)
        me GUI_Scalar:   YOffset <- posY+padding
        // BACKGROUND
        me cdColor: bkCol <- styler.White
        cr.setColor(bkCol)
        cr.paintNow()
        // FOREGROUND
        cr.setColor(Styler.Black)
        leftIncrBtn.initCircleBtn(posX+padding, posY+padding, radius, "<")
        leftIncrBtn.drawCircleBtn(cr)
        cr.setLineWidth(convertToFloatVal(0.5))
        me deltaSize: size <- getTextSize(dataStr, styler.defaultFont)
        YOffset <- YOffset+size.height+padding
        renderText(cr, dataStr, styler.defaultFont, posX+padding+radius*2+(btnSpan-size.width)/2, YOffset)
        dataStr <- unicodeMgr.customPatternDateTime(timeData,"h:mm a","en")
        size <- getTextSize(dataStr, styler.smallFont)
        YOffset <- YOffset+size.height+padding
        renderText(cr, dataStr, styler.smallFont, posX+padding+radius*2+(btnSpan-size.width)/2, YOffset)
        rightDecrBtn.initCircleBtn(posX+padding+radius*2+btnSpan, posY+padding, radius, ">")
        rightDecrBtn.drawCircleBtn(cr)
    }
    void: incrValue() <- {
       minuteOffset <- minuteOffset + 1
       timeData     <- timeData + 60000
    }
    void: decrValue() <- {
        minuteOffset <- minuteOffset - 1
        timeData     <- timeData - 60000
    }
    void: applyDelta(me int: val) <- {
        minuteOffset <- minuteOffset + val
        timeData     <- timeData + val * 60000
    }
}
struct TimeDraggerWidget: inherits=DashboardWidget{
    their appComponentGUI: parentGuiMgr
    their GUI_Frame:     box
    our LabelDash:       labelDash
    our TimeDraggerDash: timeDraggerDash
    me int:              lowVal
    me int:              highVal
    me GUI_Scalar:       prevX
    me GUI_Scalar:       deltaX <- 0
    me int:              moveThreshold <- 2
    me bool:             isBtnDown     <- false
    me bool:             isDragging    <- false
    their GUI_Frame: initWidget(me string: label)      <- {
        ///// CANVAS AND EVENTS
        title                   <- 'TimeDraggerWidget.'+label
        me int: radius          <- 20
        box                     <- makeYStack(title)
        canvas                  <- thisApp.gui.newCanvas()
        canvas.setParent(self)
        thisApp.gui.setWidgetSize(canvas,320,65)
        EventDispatcher.registerWidgetForEventDispatcher(canvas, self)
        ///// CHILDREN
        timeDraggerDash.initTimeDraggerDash(120,0,radius,label)
        addChild(timeDraggerDash)
        labelDash.initLabelDash(120,15,label)
        addChild(labelDash)
        addToContainer(box, canvas)
        return(box)
    }
    void: INIT()                <- {
        Allocate(labelDash)
        Allocate(timeDraggerDash)
    }
    void: requestRedraw() <- {
        markDirtyArea(canvas, 0,0, widgetWidth(canvas), widgetHeight(canvas))
    }
    me bool: primaryUp(their GUI_ButtonEvent: event) <- {
        if (timeDraggerDash.rightDecrBtn.primaryUp(event)) {timeDraggerDash.incrValue();requestRedraw()}
        else if (timeDraggerDash.leftIncrBtn.primaryUp(event)) {timeDraggerDash.decrValue();requestRedraw()}
        isBtnDown     <- false
        isDragging    <- false
        deltaX        <- 0
        return(true)
    }
    me bool: primaryDn(their GUI_ButtonEvent: event) <- {
        isBtnDown                 <- true
        return(true)
    }
    me bool: mouseMoved(their GUI_MotionEvent: event) <- {
        deltaX <- event.x - prevX
        prevX  <- event.x
        me int: multiplier <- convertToIntVal(deltaX)
        if (isBtnDown and abs(deltaX) > moveThreshold) {
            isDragging    <- true
            timeDraggerDash.applyDelta(multiplier)
            requestRedraw()
        }
        return(true)
    }
    me timeValue: getValue() <- {return(timeDraggerDash.timeData)}
    me void: setValue(me timeValue: val) <- {}
    me void: clear() <- {
        timeDraggerDash.minuteOffset         <- 0
        timeDraggerDash.timeData             <- getCurrentTimeStamp()
        timeDraggerDash.startTime            <- timeDraggerDash.timeData
        requestRedraw()
    }
    void: onChanged()  <- {parentGuiMgr.onChanged()}
}
