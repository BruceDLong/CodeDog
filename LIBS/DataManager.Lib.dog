// CodeDog DataManager

// Widgets for constructing a DataManager

featuresNeeded = [Networking, Websockets]
model infonTypeSpec{       // Represents an infon source / views
    me string: IdTag
    me string: longTitle
    me string: shortTitle
    me bool: isDefault
}
struct infonTypeSpec{}
struct dataSourceDetails{}
struct DataManager{
    //me List<me string>: queryDataCatList() <- {
        // Returns list of keyWords labeling each member of TypesOfInfoSources_Views that are supported on this device or a co-device.
        //me List<me string>: dataCats
        //return (dataCats)
    //}

    our dataSourceDetails: querySourceDetails(me string: dataSourceTag) <- {
        // returns struct for dataCatTag
        our dataSourceDetails: sourceDetails
        return (sourceDetails)
    }

    me List<our infonTypeSpec>: TypesOfInfoSources_Views
    void: addInfoSourceType(me string: idTag, me string: longTitle, me string: shortTitle, me bool: isDefault) <-{
        our infonTypeSpec: infSpec
        Allocate(infSpec)
        infSpec.IdTag <- idTag
        infSpec.longTitle <- longTitle
        infSpec.shortTitle <- shortTitle
        infSpec.isDefault <- isDefault
        TypesOfInfoSources_Views.pushLast(infSpec)
    }

    void: initTypesOfInfoSources_Views() <-{
        addInfoSourceType("dispSystemData", "BioSystem Data", "ticker", true)
        addInfoSourceType("TestRANDOM", "Randon noise", "Random", false)
        addInfoSourceType("TestWaves", "Various waves", "Wave", false)
        addInfoSourceType("Time", "Time", "Time", false)
    }

    void: initialize() <- {
        initTypesOfInfoSources_Views()     // Load the supported types of infon tracking from literals
    }

    me void: deinitialize() <- {    }
}
