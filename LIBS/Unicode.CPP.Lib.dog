// CodeDog Unicode Library
requirements = [
    [tagOneOf, Lang, [CPP]]
]

interface={
    provides=[Unicode_implementation]
    libFiles=[`pkg-config --libs --cflags icu-uc icu-io`]
    headers=[unicode/locid.h, unicode/unistr.h, unicode/putil.h, unicode/ustream.h, unicode/normalizer2.h, unicode/calendar.h,
             unicode/gregocal.h, unicode/smpdtfmt.h, unicode/utypes.h, codecvt, locale
            ]
}

LibDescription  ={
    useStatus   = 'dynamic'
    description = 'Unicode for CPP'
    features    = [Unicode]
    platforms   = [Linux, OS-X_Devices, Windows]
    bindings    = [C, CPP, perl, python]
    Lang        = [CPP]
}

embedVeryHigh = `
using namespace icu;
using icu::UnicodeString;
using icu::Locale;
`
embedHigh = `

static const char trailingBytesForUTF8[256] = {
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2, 3,3,3,3,3,3,3,3,4,4,4,4,5,5,5,5
};

#define isutf(c) (((c)&0xC0)!=0x80)
#define remainingOctets(chr) (trailingBytesForUTF8[(unsigned int)(unsigned char)chr])

UErrorCode uErr=U_ZERO_ERROR;
const icu::Normalizer2 *UNormalizer=Normalizer2::getNFKCCasefoldInstance(uErr);
`
/////////////////////////////////  STRUCT CONVERTERS
struct UnicodeStr {me UnicodeString: UnicodeStr}
struct sysLocale {me Locale: sysLocale}
struct Udate {me UDate: Udate}
struct UniErrorCode {me UErrorCode: UniErrorCode}

struct GLOBAL{
    me Udate: exampleUDate <- 1532000000000
    me bool: isutf(me char: ch)   <- <%!isutf(%1)%>

    me wstring: stringToWString(me string: str) <- <%{
        std::wstring_convert<std::codecvt_utf8<wchar_t>> converter;
        return converter.from_bytes(str);
    }%>
}

struct UnicodeMgr {
    me string: dateToIntlString(me UDate: date, me UDate: interval, me Locale: loc) <- <%{
        UErrorCode success = U_ZERO_ERROR;
    UnicodeString dateUniStr, pattern;
        string uniLabel;
        pattern = chooseFormatPattern(interval);
        SimpleDateFormat* simpleDateFormat = new SimpleDateFormat(pattern, loc, success);
        simpleDateFormat->format(date, dateUniStr, success);
        dateUniStr.toUTF8String(uniLabel);
        return uniLabel;
    }%>

    me string: getHour(me UDate: date, me Locale: loc) <- <%{
        UErrorCode success = U_ZERO_ERROR;
        UnicodeString pattern = "k";   // k: hour in day (1~24)
        UnicodeString uniStrHr;
        string hour;
        SimpleDateFormat* simpleDateFormat = new SimpleDateFormat(pattern, loc, success);
        simpleDateFormat->format(date, uniStrHr, success);
        uniStrHr.toUTF8String(hour);
        return hour;
    }%>
    me bool: isUnicodeAlpha(me int32: ch) <- <%{
        return(u_isalnum(ch));
    }%>
    me bool: isUnicodeAlphaNum(me int32: ch) <- <%{
        return(u_isalpha(ch));
    }%>
    me bool: isUnicodeWordStart(me int32: ch) <-{
        if(isUnicodeAlpha(ch)){return(true)}
        else if(ch==0x005f){  // Underscore
            return(true)
        }
        return(false)
    }
    me bool: isUnicodeWordContinue(me int32: ch) <-<%{
        int32_t props = U_GET_GC_MASK(ch);
        //props=UTRIE2_GET16(&propsTrie, ch);
        if((props&
            (U_GC_ND_MASK | U_GC_L_MASK |  // Number Digits or Letters
            U_GC_MC_MASK|U_GC_MN_MASK)     // Character modifiers
            )!=0) return(true);
        else if(ch==0x005f or ch==0x002d or ch==0x0027){return(true);} // "_" or "-" or "'"
        return(false);
    }%>
    me UnicodeStr: fromUTF8Str(me string: input) <- <%{
        UnicodeString output = UnicodeString::fromUTF8(input);
        return(output);
    }%>

    me string: toUTF8Str(me UnicodeString: input) <- <%{
        string output = "";
        input.toUTF8String(output);
        return(output);
    }%>
    void: UnicodeStrToUTF8_String(me UnicodeString: s, their string: out) <- <%{
        int32_t len=s.length() * 5;
        char c[len];
        CheckedArrayByteSink sbs(c,len);
        s.toUTF8(sbs);
        *out=string(c, strlen(c));
    }%>
    me string: normalizeStr(me string: input) <- <%{
        UnicodeString uniNorm = UNormalizer->normalize(fromUTF8Str(input.data()), uErr);
        string outputUTF8 = toUTF8Str(uniNorm);
        return(outputUTF8);
    }%>

    me sysLocale: SetLocale(me string: code) <- <%{
        Locale locale = Locale::createCanonical(code.data());
        return locale;
    }%>

    // Optionally pass in a display language. For example:
    // to display "French, Italian, English" in successive calls to relevant locales, pass "en"
    me UnicodeStr: getDisplayLanguage(me Locale: loc, me string: langNameLangDisplayedIn <- "") <- <%{
        UnicodeString langName;
        if (langNameLangDisplayedIn != "") {
            Locale dispLoc = SetLocale(langNameLangDisplayedIn);
            loc.getDisplayLanguage(dispLoc, langName);
        } else {
            loc.getDisplayLanguage(langName);
        }
        return(langName);
    }%>

    // Optionally pass in a display language. For example:
    // to display "France, Italy, England" in successive calls to relevant locales, pass "en"
    me UnicodeStr: getDisplayCountry(me Locale: loc, me string: countryNameLangDisplayedIn <- "") <- <%{
        UnicodeString dispCountry;
        if (countryNameLangDisplayedIn != "") {
            Locale dispLoc = SetLocale(countryNameLangDisplayedIn);
            loc.getDisplayCountry(dispLoc, dispCountry);
        } else {
            loc.getDisplayCountry(dispCountry);
        }
        return(dispCountry);
    }%>

    me timeValue: epocTimeFromDateTime(me int: year, me int: month, me int: date, me int: hour, me int: minute, me int: second) <- <%{
        UErrorCode status=U_ZERO_ERROR;
        Calendar* cal = new GregorianCalendar(year, month, date, hour, minute, second, status);
        UDate retval = cal->getTime(status);
        delete cal;
        return retval;
    }%>

   void: dateTimeFromEpocTime(me timeValue: epocTime, their DateTimeFields: dateTimeFields) <- <%{
        UErrorCode status=U_ZERO_ERROR;
        Calendar* cal = new GregorianCalendar(status);
        cal->setTime(epocTime, status);
        dateTimeFields->year = cal->get(UCAL_YEAR, status);
        dateTimeFields->month = cal->get(UCAL_MONTH, status);
        dateTimeFields->day = cal->get(UCAL_DATE, status);
        dateTimeFields->hour = cal->get(UCAL_HOUR_OF_DAY, status);
        dateTimeFields->minute = cal->get(UCAL_MINUTE, status);
        dateTimeFields->second = cal->get(UCAL_SECOND, status);
        dateTimeFields->millisecond = cal->get(UCAL_MILLISECOND, status);
        delete cal;
    }%>

    me string: customPatternDateTime(me UDate: dt, me UnicodeStr: pattern, me string: locPat) <- <%{
        UErrorCode success = U_ZERO_ERROR;
        UnicodeString dateUniStr;
        string output;
        Locale loc = SetLocale(locPat);
        SimpleDateFormat* simpleDateFormat = new SimpleDateFormat(pattern, loc, success);
        simpleDateFormat->format(dt, dateUniStr, success);
        dateUniStr.toUTF8String(output);
        return output;
    }%>
    me string: localeString(their Locale: loc) <- <%{
        icu::UnicodeString lang,country;
        string R, tmp;
        UnicodeStrToUTF8_String(loc->getDisplayLanguage(*loc, lang), &R); R+=" - ";
        UnicodeStrToUTF8_String(loc->getDisplayCountry(*loc, country), &tmp); R+=tmp;
        R+=" ("; R+=loc->getBaseName(); R+=")";
        return R;
    }%>

    me string: getLocaleBaseName(their Locale: loc) <- <%{
        return loc->getBaseName();
    }%>

    me Locale: getSystemLocale() <- <%{
        return icu::Locale();
    }%>
}
