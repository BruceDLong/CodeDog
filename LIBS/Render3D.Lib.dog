// Render3D

//ENHANCEMENTS:
//    Camera and navigation
//    Triangle clipping
//    Multi-shaded triangles
//    Texture mapping to triangles
//    Load meshes and textures from a file

LinuxBuild: Platform='Linux' CPU='amd64' Lang='CPP' optimize='speed';

// Thanks to OneLoneCoder for his video series on 3D engines: https://www.youtube.com/c/javidx9

FileName = "Render3D"
Version = "0.1"
CopyrightMesg = "Copyright (c) 2020-<YEAR> Bruce Long"
Authors = "Bruce Long"
Description = "Toy 3D rendering engine"

featuresNeeded = []
ProgramOrLibrary = "library"

struct Window3D{
    me Matrix4: worldMatx
    me Matrix4: matProj
    me int: windowXPos
    me int: windowYPos
    me int: windowWidth3D
    me int: windowHeight3D

    their List<their LightSource>: lightSources

    void: setUpMatrixes(me float: fFovDegrees, me int: xPos, me int: yPos, me int: width, me int: height) <- {
        windowXPos <- xPos
        windowYPos <- yPos
        windowHeight3D <- height
        windowWidth3D <- width
        worldMatx.makeIdentity()

        // Projection Matrix
        me float: fNear <- 0.1          // Distance from player's eyes to the screen
        me float: fFar  <- 1000.0       // Furtherest items to display
        me float: fAspectRatio <- convertToFloatVal(windowHeight3D) / convertToFloatVal(windowWidth3D)
        matProj.MakeProjection(fFovDegrees, fAspectRatio, fNear, fFar)
        //~ print("windowXPos:",windowXPos,"  windowYPos:",windowYPos,"\n")
        //~ print("windowWidth3D:",windowWidth3D,"  windowHeight3D:",windowHeight3D,"   fAspectRatio:",fAspectRatio,"\n")
        //~ print("PROJ:\n",matProj.stringify())
        mat4ID.makeIdentity()
    }
}
struct GLOBAL{
    me MeshGenerator: meshGenerator
    me Matrix4: mat4ID
    me bool: renderWireFrame <- false   // Otherwise render solid shapes
    me bool: RENDER_LIGHTING <- true
    me bool: CULL_GZ <- true            // Cull triangles when norm is Greater than Zero
    me bool: CULL_LZ <- false           // Cull triangles when norm is Less than Zero

    void: matrixTimesVec3(their Point3D: pIn, their Point3D: pOut, their Matrix4: m) <- {
             pOut.x <- pIn.x * m.m00 + pIn.y * m.m10 + pIn.z * m.m20 + m.m30
             pOut.y <- pIn.x * m.m01 + pIn.y * m.m11 + pIn.z * m.m21 + m.m31
             pOut.z <- pIn.x * m.m02 + pIn.y * m.m12 + pIn.z * m.m22 + m.m32
        me float: w <- pIn.x * m.m03 + pIn.y * m.m13 + pIn.z * m.m23 + m.m33

        if(w!=0.0){
            pOut.x </- w
            pOut.y </- w
            pOut.z </- w
        }
    }

    void: matrixTimesTri(their Triangle3D: tIn, their Triangle3D: tOut, their Matrix4: m) <- {
        matrixTimesVec3(tIn.p1, tOut.p1, m)
        matrixTimesVec3(tIn.p2, tOut.p2, m)
        matrixTimesVec3(tIn.p3, tOut.p3, m)
    }
    void: Vec_CrossProduct(their Vec3D: v1, their Vec3D: v2, their Vec3D: result) <- {
        result.x <- v1.y * v2.z - v1.z * v2.y
        result.y <- v1.z * v2.x - v1.x * v2.z
        result.z <- v1.x * v2.y - v1.y * v2.x
    }

    void: Vec_Add(their Vec3D: v1, their Vec3D: v2, their Vec3D: result) <- {
        result.x <- v1.x + v2.x
        result.y <- v1.y + v2.y
        result.z <- v1.z + v2.z
    }

    void: Vec_Sub(their Vec3D: v1, their Vec3D: v2, their Vec3D: result) <- {
        result.x <- v1.x - v2.x
        result.y <- v1.y - v2.y
        result.z <- v1.z - v2.z
    }

    void: Vec_Mul(their Vec3D: v, me float: k, their Vec3D: result) <- {
        result.x <- v.x * k
        result.y <- v.y * k
        result.z <- v.z * k
    }

    void: Vec_Div(their Vec3D: v, me float: k, their Vec3D: result) <- {
        result.x <- v.x / k
        result.y <- v.y / k
        result.z <- v.z / k
    }

    me float: Vec_DotProduct(their Vec3D: v1, their Vec3D: v2) <- {
        return(v1.x*v2.x + v1.y*v2.y + v1.z*v2.z)
    }

    me float: Vec_Length(their Vec3D: v) <- {
        return(sqrtf(Vec_DotProduct(v, v)))
    }

    void: Vec_Normalise(their Vec3D: v) <- {
        me float: l <- Vec_Length(v);
        v.x <- v.x / l
        v.y <- v.y / l
        v.z <- v.z / l
    }

    void: CalcTrianglesNorm(their Triangle3D: TriXlated, their Vec3D: normedResult) <- {
        me Vec3D: line1
        me Vec3D: line2
        Vec_Sub(TriXlated.p2, TriXlated.p1, line1)
        Vec_Sub(TriXlated.p3, TriXlated.p1, line2)
        Vec_CrossProduct(line1, line2, normedResult)
        Vec_Normalise(normedResult)
    }
}

struct Matrix4{
    me float: m00     me float: m01     me float: m02     me float: m03
    me float: m10     me float: m11     me float: m12     me float: m13
    me float: m20     me float: m21     me float: m22     me float: m23
    me float: m30     me float: m31     me float: m32     me float: m33

    me void: zero()<-{
        m00<-0.0;    m01<-0.0;    m02<-0.0;    m03<-0.0
        m10<-0.0;    m11<-0.0;    m12<-0.0;    m13<-0.0
        m20<-0.0;    m21<-0.0;    m22<-0.0;    m23<-0.0
        m30<-0.0;    m31<-0.0;    m32<-0.0;    m33<-0.0
    }

    void: makeIdentity() <- {
        m00 <- 1.0
        m11 <- 1.0
        m22 <- 1.0
        m33 <- 1.0
    }

    void: makeRotationX(me float: fAngleRad) <- {
        m00 <- 1.0
        m11 <- cosf(fAngleRad)
        m12 <- sinf(fAngleRad)
        m21 <- -sinf(fAngleRad)
        m22 <- cosf(fAngleRad)
        m33 <- 1.0
    }

    void: makeRotationY(me float: fAngleRad) <- {
        m00 <- cosf(fAngleRad)
        m02 <- sinf(fAngleRad)
        m20 <- -sinf(fAngleRad)
        m11 <- 1.0
        m22 <- cosf(fAngleRad)
        m33 <- 1.0
    }

    void: makeRotationZ(me float: fAngleRad) <- {
        m00 <- cosf(fAngleRad)
        m01 <- sinf(fAngleRad)
        m10 <- -sinf(fAngleRad)
        m11 <- cosf(fAngleRad)
        m22 <- 1.0
        m33 <- 1.0
    }

    void: makeScale(me float: x, me float: y, me float: z) <- {
        m00 <- x
        m11 <- y
        m22 <- z
        m33 <- 1.0
    }

    void: makeTranslation(me float: x, me float: y, me float: z) <- {
        m00 <- 1.0
        m11 <- 1.0
        m22 <- 1.0
        m33 <- 1.0
        m30 <- x
        m31 <- y
        m32 <- z
    }

    void: makeInverseTranslation(me float: x, me float: y, me float: z) <- {
        m00 <- 1.0
        m11 <- 1.0
        m22 <- 1.0
        m33 <- 1.0
        m30 <- -x
        m31 <- -y
        m32 <- -z
    }

    void: MakeProjection(me float: fFovDegrees, me float: fAspectRatio, me float: fNear, me float: fFar) <- {
        me float: fFovRad <- 1.0 / tanf(fFovDegrees * 0.5 / 180.0 * 3.14159);
        zero();
        m00 <- fAspectRatio * fFovRad
        m11 <- fFovRad
        m22 <- fFar / (fFar - fNear)
        m32 <- -fFar * fNear / (fFar - fNear)
        m23 <- 1.0
        m33 <- 0.0
    }

    void: MultiplyMatrix(their Matrix4: m1, their Matrix4: m2) <- {
        m00 <- m1.m00 * m2.m00 + m1.m01 * m2.m10 + m1.m02 * m2.m20 + m1.m03 * m2.m30
        m10 <- m1.m10 * m2.m00 + m1.m11 * m2.m10 + m1.m12 * m2.m20 + m1.m13 * m2.m30
        m20 <- m1.m20 * m2.m00 + m1.m21 * m2.m10 + m1.m22 * m2.m20 + m1.m23 * m2.m30
        m30 <- m1.m30 * m2.m00 + m1.m31 * m2.m10 + m1.m32 * m2.m20 + m1.m33 * m2.m30

        m01 <- m1.m00 * m2.m01 + m1.m01 * m2.m11 + m1.m02 * m2.m21 + m1.m03 * m2.m31
        m11 <- m1.m10 * m2.m01 + m1.m11 * m2.m11 + m1.m12 * m2.m21 + m1.m13 * m2.m31
        m21 <- m1.m20 * m2.m01 + m1.m21 * m2.m11 + m1.m22 * m2.m21 + m1.m23 * m2.m31
        m31 <- m1.m30 * m2.m01 + m1.m31 * m2.m11 + m1.m32 * m2.m21 + m1.m33 * m2.m31

        m02 <- m1.m00 * m2.m02 + m1.m01 * m2.m12 + m1.m02 * m2.m22 + m1.m03 * m2.m32
        m12 <- m1.m10 * m2.m02 + m1.m11 * m2.m12 + m1.m12 * m2.m22 + m1.m13 * m2.m32
        m22 <- m1.m20 * m2.m02 + m1.m21 * m2.m12 + m1.m22 * m2.m22 + m1.m23 * m2.m32
        m32 <- m1.m30 * m2.m02 + m1.m31 * m2.m12 + m1.m32 * m2.m22 + m1.m33 * m2.m32

        m03 <- m1.m00 * m2.m03 + m1.m01 * m2.m13 + m1.m02 * m2.m23 + m1.m03 * m2.m33
        m13 <- m1.m10 * m2.m03 + m1.m11 * m2.m13 + m1.m12 * m2.m23 + m1.m13 * m2.m33
        m23 <- m1.m20 * m2.m03 + m1.m21 * m2.m13 + m1.m22 * m2.m23 + m1.m23 * m2.m33
        m33 <- m1.m30 * m2.m03 + m1.m31 * m2.m13 + m1.m32 * m2.m23 + m1.m33 * m2.m33
    }

    me string: stringify() <- {
        me string: S
        S <+- "\t"+toString(m00)+"\t"+toString(m01)+"\t"+toString(m02)+"\t"+toString(m03)+"\n"
        S <+- "\t"+toString(m10)+"\t"+toString(m11)+"\t"+toString(m12)+"\t"+toString(m13)+"\n"
        S <+- "\t"+toString(m20)+"\t"+toString(m21)+"\t"+toString(m22)+"\t"+toString(m23)+"\n"
        S <+- "\t"+toString(m30)+"\t"+toString(m31)+"\t"+toString(m32)+"\t"+toString(m33)+"\n"
        return(S)
    }
}

struct Point2D{
    me float: x
    me float: y
}

struct Vec3D{
    me float: x
    me float: y
    me float: z
}

struct Point3D: wraps=Vec3D{}

struct Triangle2D{
    me Point2D: p1
    me Point2D: p2
    me Point2D: p3

    void: draw(their GUI_ctxt: cr) <- {
        //print("        DRAW TRIANGLE:",p1.x,", ",p1.y,",     ",p2.x,", ",p2.y,",     ",p3.x,", ",p3.y, "\n")
        cr.moveTo(p1.x, p1.y)
        cr.lineTo(p2.x, p2.y)
        cr.lineTo(p3.x, p3.y)
        cr.lineTo(p1.x, p1.y)
        if(renderWireFrame){cr.strokeNow()}
        else{cr.fillNow()}
    }
    void: INIT(me float: px1, me float: py1,   me float: px2, me float: py2,    me float: px3, me float: py3)<-{
        p1.x <- px1;    p1.y <- py1;
        p2.x <- px2;    p2.y <- py2;
        p3.x <- px3;    p3.y <- py3;
    }
}

struct Triangle3D{
    me Point3D: p1
    me Point3D: p2
    me Point3D: p3
    me cdColor: color        // add a pointer to a cdColor, if Null do nothing, else change color
    me bool: setsColor
    void: setColor(their cdColor: clr) <-{
        color <- clr
        setsColor <- true
    }
    void: initFromVecs(their Vec3D: v1, their Vec3D: v2, their Vec3D: v3, me bool: normalOut) <- {
        if(!normalOut){
            their Vec3D: tmp <- v2
            v2 <- v3
            v3 <- tmp
        }
        p1.x <- v1.x;   p1.y <- v1.y;    p1.z <- v1.z;
        p2.x <- v2.x;   p2.y <- v2.y;    p2.z <- v2.z;
        p3.x <- v3.x;   p3.y <- v3.y;    p3.z <- v3.z;
    }
    void: INIT(me float: px1, me float: py1, me float: pz1, me float: px2, me float: py2, me float: pz2, me float: px3, me float: py3, me float: pz3)<-{
        p1.x <- px1;    p1.y <- py1;     p1.z <- pz1;
        p2.x <- px2;    p2.y <- py2;     p2.z <- pz2;
        p3.x <- px3;    p3.y <- py3;     p3.z <- pz3;
    }
    me string: stringify() <- {
        me string: S <- "TRI3D:"
        S <+- toString(p1.x) + ", "+toString(p1.y) + ", "+toString(p1.z) + ",      "
        S <+- toString(p2.x) + ", "+toString(p2.y) + ", "+toString(p2.z) + ",      "
        S <+- toString(p3.x) + ", "+toString(p3.y) + ", "+toString(p3.z)
        return(S)
    }
}

struct LightSource{
    mode[lsOff, lsAmbient, lsDirected, ListPoint]: type
    me cdColor: color
    me Vec3D: direction
    //me Vec3D: position // Future use
    //me float: param    // Future use

    void: init(me int: srcType, me cdColor: colr, me float:x, me float:y, me float:z) <- {
        type <- srcType
        color <- colr
        direction.x <- x
        direction.y <- y
        direction.z <- z
        Vec_Normalise(direction)
    }
}
struct Thing3D{
    me string: name
    me cdColor: color
    me Vec3D:   location
    me Vec3D:   orientation
    me Vec3D:   scale

    me List<our Mesh>: meshes
    me List<our Thing3D>: parts

    me Matrix4: locMatx
    me Matrix4: XoriMatx
    me Matrix4: YoriMatx
    me Matrix4: ZoriMatx
    me Matrix4: scaleMatx

    me Matrix4: thingMatx

    void: setLocation(me float: x, me float: y, me float: z) <- {
        location.x <- x;   location.y <- y;   location.z <- z;
        locMatx.makeTranslation(x, y, z)
    }
    void: rotateX(me float: angle) <- {orientation.x <+- angle; XoriMatx.makeRotationX(orientation.x)}
    void: rotateY(me float: angle) <- {orientation.y <+- angle; YoriMatx.makeRotationY(orientation.y)}
    void: rotateZ(me float: angle) <- {orientation.z <+- angle; ZoriMatx.makeRotationZ(orientation.z)}

    void: setScale(me float: x, me float: y, me float: z) <- {
        scale.x <- x;   scale.y <- y;   scale.z <- z;
        scaleMatx.makeScale(x, y, z)
    }
    void: calcThingMatx(their Matrix4: parentMatx) <- {
        me Matrix4: tmp1
        me Matrix4: tmp2

        tmp1.MultiplyMatrix(parentMatx, scaleMatx)

        tmp2.MultiplyMatrix(tmp1, XoriMatx)
        tmp1.MultiplyMatrix(tmp2, YoriMatx)
        tmp2.MultiplyMatrix(tmp1, ZoriMatx)

        thingMatx.MultiplyMatrix(tmp2, locMatx)
    }

    void: addPart(our Thing3D: thing) <- {
        parts.append(thing)
    }

    void: draw(their GUI_ctxt: cr, their Matrix4: parentMatx, me double: interpolation, our Window3D: win3D) <- {
        me Matrix4: xFormMatx
        xFormMatx.MultiplyMatrix(thingMatx, parentMatx)
        withEach mesh in meshes{
            //cr.setColor(color)
            mesh.draw(cr, xFormMatx, color, interpolation, win3D)
        }
        withEach part in parts{
            part.draw(cr, xFormMatx, interpolation, win3D)
        }
    }

    void: INIT() <- {
        color <- Styler.DarkGray
        scaleMatx.makeIdentity()
        locMatx.makeIdentity()
        XoriMatx.makeIdentity()
        YoriMatx.makeIdentity()
        ZoriMatx.makeIdentity()
    }
}

struct Mesh{
    me List<Triangle3D>: tris

    void: draw(their GUI_ctxt: cr, their Matrix4: parentMatx, their cdColor: startColor, me double: interpolation, our Window3D: win3D) <- {
        me uint64: triangleDrawnCount <- 0
        me float: halfScreenWidth  <- 0.5 * win3D.windowWidth3D
        me float: halfScreenHeight <- 0.5 * win3D.windowHeight3D
        me Vec3D: vOffsetView{ win3D.windowXPos, win3D.windowYPos, 0 }
        //print("WINDOW X/Y:",vOffsetView.x,"/",vOffsetView.y,"\n")
        me cdColor: color <- startColor
        withEach tri in tris{
            if(tri.setsColor){
                color <- tri.color
            }
            me Triangle3D: TriXlated
            me Triangle3D: TriPrj
            matrixTimesTri(tri, TriXlated, parentMatx)

// Remove when camera compensates:
TriXlated.p1.z <+- 3.0
TriXlated.p2.z <+- 3.0
TriXlated.p3.z <+- 3.0

            // Calculate Triangle's normal
            me Vec3D: TrianglesNormal
            CalcTrianglesNorm(TriXlated, TrianglesNormal)

        if (CULL_GZ and Vec_DotProduct(TrianglesNormal, TriXlated.p1) > 0.0){continue()}
        if (CULL_LZ and Vec_DotProduct(TrianglesNormal, TriXlated.p1) < 0.0){continue()}

            // 4. If Lighting, calculate shading
            me cdColor: faceColor <- color
            if(RENDER_LIGHTING){
                me cdColor: ambient_clamp{ 0,0,0 }
                me cdColor: light_combined{ 0,0,0 }
                me float: ambRed; me float: ambGreen; me float: ambBlue;  // Ambient values
                me float: nRed; me float: nGreen; me float: nBlue;        // Combined directed lights
                me uint: nLightSources <- 0

                withEach light in win3D.lightSources{
                    switch(light.type){
                        case lsOff:{}
                        case lsAmbient:{
                            ambRed   <- light.color.red   / 255.0
                            ambGreen <- light.color.green / 255.0
                            ambBlue  <- light.color.blue  / 255.0
                        }
                        case lsDirected:{
                            nLightSources <+- 1
                            me float: intensity <- Vec_DotProduct(light.direction, TrianglesNormal)
                            if(intensity > 0.0){
                                nRed   <+- intensity * (light.color.red  /255.0)
                                nGreen <+- intensity * (light.color.green/255.0)
                                nBlue  <+- intensity * (light.color.blue /255.0)
                            }
                        }
                        case ListPoint:{}
                    }
                }
                nRed   <- max(nRed,   ambRed)
                nGreen <- max(nGreen, ambGreen)
                nBlue  <- max(nBlue,  ambBlue)

                faceColor.red   <- faceColor.red   * nRed
                faceColor.green <- faceColor.green * nGreen
                faceColor.blue  <- faceColor.blue  * nBlue
            }

            // 5. Clip triangle against near plane

            // 6. FOR each clipped triangle (Either 1 or 2{
                // 6a. Project and adjust Each vertex;   Later, project to texture coords also.
                matrixTimesTri(TriXlated, TriPrj, win3D.matProj)

                // 6b. Clip the 4 sides. THis may create new triangles

                // 6c. FOR each clipped triangle {
                    // Scale into view for screen between -1 and +1
                    TriPrj.p1.x <+- 1.0; TriPrj.p1.y <+- 1.0;
                    TriPrj.p2.x <+- 1.0; TriPrj.p2.y <+- 1.0;
                    TriPrj.p3.x <+- 1.0; TriPrj.p3.y <+- 1.0;
                    TriPrj.p1.x <*- halfScreenWidth
                    TriPrj.p1.y <*- halfScreenHeight
                    TriPrj.p2.x <*- halfScreenWidth
                    TriPrj.p2.y <*- halfScreenHeight
                    TriPrj.p3.x <*- halfScreenWidth
                    TriPrj.p3.y <*- halfScreenHeight

                    // RE-locate to an area of the window
                    Vec_Add(TriPrj.p1, vOffsetView, TriPrj.p1);
                    Vec_Add(TriPrj.p2, vOffsetView, TriPrj.p2);
                    Vec_Add(TriPrj.p3, vOffsetView, TriPrj.p3);

                    me Triangle2D: toDraw;
                    toDraw.INIT(TriPrj.p1.x, TriPrj.p1.y, TriPrj.p2.x, TriPrj.p2.y, TriPrj.p3.x, TriPrj.p3.y)
                    cr.setColor(faceColor)
                    toDraw.draw(cr)

                    triangleDrawnCount <+- 1
        }

        //print("\nTriangles:",triangleDrawnCount,"\n");
    }
}

struct MeshGenerator{
    void: genQuad(their Mesh: result, their Vec3D: v1, their Vec3D: v2, their Vec3D: v3, their Vec3D: v4, me bool: normalOut) <- {
        me Triangle3D: tri
        tri.initFromVecs(v1, v3, v4, normalOut);   result.tris.append(tri)
        tri.initFromVecs(v1, v4, v2, normalOut);   result.tris.append(tri)
    }

    void: fillCircleVec(their Vec3D: result, me int: iterNum, me int: tessellation, me float: radius, me float: height) <- {
        me float: angle <- iterNum * 2*pi / tessellation
        result.x <- cosf(angle) *radius
        result.y <- height
        result.z <- sinf(angle) *radius
    }

    void: genRingCap(their Mesh: result, me int: tessellation, me float: yPos, me float: height, me float: radius, me float: thickness, me bool: normalOut) <- {
        withEach idx in RANGE(0..tessellation){
            me Vec3D: v1
            me Vec3D: v2
            me Vec3D: v3
            me Vec3D: v4
            fillCircleVec(v1, idx,   tessellation, radius, yPos)
            fillCircleVec(v2, idx+1, tessellation, radius, yPos)
            fillCircleVec(v3, idx,   tessellation, radius-thickness, yPos+height)
            fillCircleVec(v4, idx+1, tessellation, radius-thickness, yPos+height)
            genQuad(result, v1, v2, v3, v4, normalOut)
        }
    }

    void: genCap(their Mesh: result, me int: tessellation, me float: yPos, me float: height, me float: radius, me bool: normalOut) <- {
        withEach idx in RANGE(0..tessellation){
            me Vec3D: v1
            me Vec3D: v2
            me Vec3D: v3
            fillCircleVec(v1, idx,   tessellation, radius, yPos)
            fillCircleVec(v2, idx+1, tessellation, radius, yPos)
            v3.x <- 0;  v3.y <- yPos+height; v3.z <- 0;

            me Triangle3D: tri
            tri.initFromVecs(v1, v2, v3, normalOut);    result.tris.append(tri)
        }
    }

    void: genCone(their Mesh: result, me int: tessellation, me float: yPos, me float: height, me float: radius, me bool: normalOut) <- {
        // For a 3 sided pyramid set tessalations to 3. For 4 sided, set it to 4.
        genCap(result, tessellation, yPos, height, radius, normalOut) // Create cone part
        genCap(result, tessellation, yPos, 0, radius, !normalOut)     // Create bottom cap part
    }

    void: genCylinder(their Mesh: result, me float: height, me float: topRadius, me float: bottomRadius, me int: tessellation, me bool: cap, me bool: normalOut) <- {
        withEach idx in RANGE(0..tessellation){
            me Vec3D: v1
            me Vec3D: v2
            me Vec3D: v3
            me Vec3D: v4
            fillCircleVec(v1, idx,   tessellation, topRadius, 0.0)
            fillCircleVec(v2, idx+1, tessellation, topRadius, 0.0)
            fillCircleVec(v3, idx,   tessellation, bottomRadius, height)
            fillCircleVec(v4, idx+1, tessellation, bottomRadius, height)
            genQuad(result, v1, v2, v3, v4, normalOut)
        }
        if(cap){
            genCap(result, tessellation, 0, 0.0, topRadius, normalOut)
            genCap(result, tessellation, height,0.0, bottomRadius, !normalOut)
        }
    }

    void: genTube(their Mesh: result, me float: height, me float: topRadius, me float: bottomRadius, me float: thickness, me int: tessellation, me bool: normalOut) <- {
        genCylinder(result, height, topRadius, bottomRadius, tessellation, false, normalOut)
        genCylinder(result, height, topRadius-thickness, bottomRadius-thickness, tessellation, false, !normalOut)
        genRingCap(result, tessellation, 0.0, 0.0, topRadius, thickness, !normalOut)
        genRingCap(result, tessellation, height, 0.0, bottomRadius, thickness, normalOut)
    }

    void: generateMesh(their Mesh: result, me string: meshType, me float: arg, me float: arg2) <- {
        result.tris.clear()
        if(meshType=="cube"){  // arg: side length
            me Triangle3D: t1;
            // SOUTH
            t1.INIT(0.0, 0.0, 0.0,    0.0, arg, 0.0,    arg, arg, 0.0);   result.tris.append(t1)
            t1.INIT(0.0, 0.0, 0.0,    arg, arg, 0.0,    arg, 0.0, 0.0);   result.tris.append(t1)
            // EAST
            t1.INIT(arg, 0.0, 0.0,    arg, arg, 0.0,    arg, arg, arg);   result.tris.append(t1)
            t1.INIT(arg, 0.0, 0.0,    arg, arg, arg,    arg, 0.0, arg);   result.tris.append(t1)
            // NORTH
            t1.INIT(arg, 0.0, arg,    arg, arg, arg,    0.0, arg, arg);   result.tris.append(t1)
            t1.INIT(arg, 0.0, arg,    0.0, arg, arg,    0.0, 0.0, arg);   result.tris.append(t1)
            // WEST
            t1.INIT(0.0, 0.0, arg,    0.0, arg, arg,    0.0, arg, 0.0);   result.tris.append(t1)
            t1.INIT(0.0, 0.0, arg,    0.0, arg, 0.0,    0.0, 0.0, 0.0);   result.tris.append(t1)
            // TOP
            t1.INIT(0.0, arg, 0.0,    0.0, arg, arg,    arg, arg, arg);   result.tris.append(t1)
            t1.INIT(0.0, arg, 0.0,    arg, arg, arg,    arg, arg, 0.0);   result.tris.append(t1)
            // BOTTOM
            t1.INIT(arg, 0.0, arg,    0.0, 0.0, arg,    0.0, 0.0, 0.0);   result.tris.append(t1)
            t1.INIT(arg, 0.0, arg,    0.0, 0.0, 0.0,    arg, 0.0, 0.0);   result.tris.append(t1)
        }
        else if(meshType=="Cylinder"){
        }
    }
}
