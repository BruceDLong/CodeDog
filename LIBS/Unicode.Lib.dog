// CodeDog Unicode Library

requirements = [
    [require, Unicode_implementation]
]

LibDescription  ={
    useStatus   = dynamic
    description ='Library for Unicode'
    features    =[Unicode]
    platforms   =[Linux, OS-X_Devices, Windows]
}

struct GLOBAL {
    me UnicodeMgr: unicodeMgr

    me bool: isutf(me char: ch)
    me wstring: stringToWString(me string: str)

    me int: packUTF8Char(me string: str, their int64: pos, their int32: out) <- {
        me char: chr
        out <- 0
        chr <- str[pos]
        pos <+- 1
        if(chr==0){return(0)}
        me int: remaining <- remainingOctets(chr)
        switch(remaining){
            case 1: {chr <&- 0x3F}
            case 2: {chr <&- 0x1F}
            case 3: {chr <&- 0x0F}
        }
        if(remaining>3){return(0)} // Too many bytes.
        out <deep- chr
        withEach count in RANGE(0..remaining){
            chr <- str[pos]
            pos <+- 1
            if(chr==0){return(0)}
            if(isutf(chr)){return (0)}  // Invalid utf8 octet
            chr <- chr & 0x3f
            out <<<- 6
            out <+- chr
        }
        return(1)
    }

}

struct DateTimeFields{
    me int: year
    me int: month
    me int: day
    me int: hour
    me int: minute
    me int: second
    me int: millisecond
}

struct DateFormat:    wraps=SimpleDateFormat{}
struct Normalizer:    wraps=Normalizer2{}
struct USpoofChecker: wraps=USpoofChecker{}

struct UnicodeMgr {
    me sysLocale: SetLocale(me string: code)
    me string: dateToIntlString(me UDate: date, me UDate: interval, me sysLocale: loc) // TODO: verify works
    me string: getHour(me UDate: date, me sysLocale: loc)// TODO: verify works
    me bool: isUnicodeAlpha(me int32: ch)
    me bool: isUnicodeAlphaNum(me int32: ch)
    me bool: isUnicodeWordStart(me int32: ch)
    me bool: isUnicodeWordContinue(me int32: ch)
    me UnicodeStr: fromUTF8Str(me string: input)
    me string: toUTF8Str(me UnicodeStr: input)
    void: UnicodeStrToUTF8_String(me UnicodeStr: s, their string: out)
    me string: normalizeStr(me string: input)
    me UnicodeStr: getDisplayLanguage(me sysLocale: loc, me string: langNameLangDisplayedIn <- "")
    me UnicodeStr: getDisplayCountry(me sysLocale: loc, me string: countryNameLangDisplayedIn <- "")
    me timeValue: epocTimeFromDateTime(me int: year, me int: month, me int: date, me int: hour, me int: minute, me int: second)
    void: dateTimeFromEpocTime(me timeValue: epocTime, their DateTimeFields: dateTimeFields)
    me string: customPatternDateTime(me UDate: dt, me UnicodeStr: pattern, me string: locPat) //TODO
    me string: localeString(their sysLocale: loc)
    me string: getLocaleBaseName(their sysLocale: loc)
    me sysLocale: getSystemLocale()

    me UnicodeStr: chooseFormatPattern(me double: graphInterval) <- {
        me UnicodeStr: dateFormat
        me double: minutes<-1000.0
        me double: hours <- 1000.0*60*60
        me double: days  <- 1000.0*60*60*24
        me double: weeks <- 1000.0*60*60*24*7
        me double: months<- 1000.0*60*60*24*30
        me double: years <- 1000.0*60*60*24*300

        if (graphInterval >= years) {dateFormat <- "yyyy/MMM/dd"}
        else if (graphInterval >= months) {dateFormat <- "MMM d"}
        else if (graphInterval >= weeks) {dateFormat <- "MMM d, h:mm a"}
        else if (graphInterval >= days) {dateFormat <- "E h:mm a"}
        else if(graphInterval >= hours) {dateFormat <- "E h:mm a"}
        else if(graphInterval >= minutes) {dateFormat <- "h:mm:ss a"}
        else {dateFormat <- "H:mm:sss"}
        return(dateFormat)
    }
}
