//############  Add GUI-Toolkit features using GTK3
requirements = [
    [tagOneOf, Platform, [MacOS]]
]

interface={
    provides=[GUI_ToolKit_implementation]
    libFiles=[``]
    headers=[AppKit]
}

LibDescription ={
    useStatus   = dynamic
    description ='AppKit is a GUI Toolkit'
    features    =[GUI_ToolKit, Mouse, Keyboard, Audio]
    platforms   =[MacOS]
    bindings    =[Swift]
}

initCode = ``

embedVeryHigh = `
// APP DELEGATE /////////////////////////////////////////////////////
class AppDelegate: NSObject, NSApplicationDelegate {
    func applicationDidFinishLaunching(_ aNotification: Notification) {
        window = NSWindow(contentRect: NSMakeRect(0, 0, NSScreen.main?.frame.width ?? 500, NSScreen.main?.frame.height ?? 500),
            styleMask: [.closable],
            backing: .buffered,
            defer: false)
        window.contentViewController = ViewController()
        window.makeKeyAndOrderFront(nil)
    }
}
// VIEW CONTROLLER ///////////////////////////////////////////////
class ViewController: NSViewController {
    override func viewDidLoad() {
        super.viewDidLoad()
        view.addSubview(drawing_area!)
    }
    override func loadView() {
        self.view = NSView(frame: NSRect(x: 0, y: 0, width: NSScreen.main?.frame.width ?? 100, height: NSScreen.main?.frame.height ?? 100))
        thisApp.gui.frame = self.view
    }
}

class CanvasView: NSView{
    var cr: CGContext!
    var parent: DashboardWidget!
    var scaleFactor: Double = 1
    override init(frame frameRect: NSRect) {
        super.init(frame: frameRect)
    }
    required init?(coder decoder: NSCoder) {
        super.init(coder: decoder)
    }
    override func draw(_ dirtyRect: NSRect) -> Void{
        super.draw(dirtyRect)
        cr = NSGraphicsContext.current?.cgContext
        parent.EventDispatcher.topWidget.draw(cr)
    }
    func setParent(_ wid: DashboardWidget!) -> Void{
        var wid = wid
        parent = wid;
    }
    override func acceptsFirstMouse(for event: NSEvent?) -> Bool{
        return true
    }
    override func mouseDown(with event: NSEvent){
        parent.EventDispatcher.dispatchPointerClickEvent(event)
    }
    override func mouseUp(with event: NSEvent){
        parent.EventDispatcher.dispatchPointerClickEvent(event)
    }
    override func mouseMoved(with event: NSEvent){
        parent.EventDispatcher.dispatchPointerMotionEvent(event)
    }
    override var acceptsFirstResponder: Bool {return true}
    override func keyDown(with event: NSEvent){
        parent.EventDispatcher.dispatchKeyboardEvent(event)
    }
    override func keyUp(with event: NSEvent){
        parent.EventDispatcher.dispatchKeyboardEvent(event)
    }
};
`

/////////////////////////////////  STRUCT CONVERTERS
struct GUI_rect                 {me double: x1 me double: y1 me double: x2 me double: y2}
struct GUI_item:                wraps = NSView{}
struct GUI_Frame:               wraps = NSView{}
struct GUI_canvas:              wraps = CanvasView{}
struct GUI_container:           wraps = NSView{}
//struct INK_Image:               wraps = CGImage{}      // How will the ink look?
struct GUI_callback:            wraps = GCallback{}
struct GUI_Scalar:              wraps = Int{}
//struct GUI_Text:                wraps = GtkWidget{}
struct GUI_MotionEvent:         wraps = NSEvent{}
struct GUI_ButtonEvent:         wraps = NSEvent{}
struct GUI_PointerEvent:        wraps = NSEvent{}
struct GUI_KeyboardEvent:       wraps = NSEvent{}
struct GUI_UserEvent:           wraps = NSEvent{}
struct GUI_TimeEvent:           wraps = NSEvent{}
struct GUI_DataEvent:           wraps = NSEvent{}
struct GUI_WindowEvent:         wraps = NSEvent{}
struct GUI_ctxt:                wraps = CGContext{}
/////////////////////////////////  GLOBAL WIDGET FUNCTIONS
struct GLOBAL{
    me void: addToContainerAndExpand(me GUI_container: container, me GUI_item: widget) <- <%!%1.addSubview(%2)%>
}
/////////////////////////////////  HANDLE EVENTS
struct GUI_MotionEvent{
    me int: x <- <%!Int(%0!.locationInWindow.x)%>
    me int: y <- <%!Int(%0!.locationInWindow.y)%>
}
struct GUI_ButtonEvent{
    me int: x <- <%!Int(%0!.locationInWindow.x)%>
    me int: y <- <%!Int(%0!.locationInWindow.y)%>
}
struct GUI_PointerEvent{
    me int: x <- <%!Int(%0!.locationInWindow.x)%>
    me int: y <- <%!Int(%0!.locationInWindow.y)%>
}
struct GUI_KeyboardEvent{
}
/////////////////////////////////  EVENT DISPATCHER
struct GUI_eventDispatcher{
    their widget: topWidget

    me bool: dispatchPointerMotionEvent(their GUI_MotionEvent: event) <- <%{
        //let alert = NSAlert(); alert.messageText = "MouseMoved."; alert.runModal()
        //event.locationInWindow.x = event.locationInWindow.x / scaleFactor;
        //event.locationInWindow.y = event.locationInWindow.y / scaleFactor;
        topWidget.mouseMoved(event);
        return false;
    }%>
    me bool: dispatchPointerClickEvent(their GUI_ButtonEvent: event) <- <%{
        var returnVal: Bool = false;
        switch(event.type){
            case .leftMouseDown:
                topWidget.primaryDn(event);
                returnVal = true;
                //let alert = NSAlert(); alert.messageText = "MouseDown."; alert.runModal()
                break;
            case .leftMouseUp:
                topWidget.primaryUp(event);
                returnVal = true;
                //let alert = NSAlert(); alert.messageText = "MouseUp."; alert.runModal()
                break;
            default:
                return false;
        }
        return returnVal;
    }%>
    me bool: dispatchKeyboardEvent(their GUI_KeyboardEvent: event) <- <%{
        //let alert = NSAlert(); alert.messageText = "Key."; alert.runModal()
        topWidget.keyTyped(event);
        return(true);
    }%>
    me void: registerWidgetForEventDispatcher(me CanvasView: appWidget, their widget: masterWidget) <- {
        topWidget<-masterWidget
    }
}

/////////////////////////////////  HANDLE GUI
struct GUI_canvas{
    me void: setParent(our DashboardWidget: wid) <- <%!setParent(%1)%>
}

/////////////////////////////////  HANDLE GUI
struct GUI{
    me GUI_Frame: frame

    me none: GUI() <- {}
    me uint32: GUI_Init() <- <%{
        thisApp.createAppArea(frame)
        let delegate = AppDelegate()
        NSApplication.shared.delegate = delegate
        _ = NSApplicationMain(CommandLine.argc, CommandLine.unsafeArgv)
        return(0);
    }%>
    me uint32: GUI_Run() <- <%{
        let status: UInt32 = 0;
        return(status);
    }%>
    me void: GUI_Deinit() <- {}
}

struct GUI{
    their GUI_item: newCanvas() <- <%!%GCanvasView()%>
    me void: setWidgetSize(me GUI_item: widget, me uint32: width, me uint32: height) <- <%!%Gvar f: NSRect = %1.frame; f.size.width = 1280; f.size.height = 800; %1.frame = f%>
    //their GUI_item: newScrollingWindow() <- <%!%>
    //me void: addMenuBar(me GUI_menuBar: menubar) <- <%!%>
    me void: setCallback() <- <%!%G%>
    me GUI_Frame: GUI_Frame(me string: label) <- <%!%GNSView()%>
}

struct GUI_ctxt{
    //me void: fetchAreaToBeDrawn(me GUI_rect: area) <- <%!%>
    //me void: reset()                                  <- <%!%>
    me void: setRGBA(me double: red, me double: green, me double: blue, me double: alpha) <- <%!%0!.setFillColor(red:CGFloat(%1), green:CGFloat(%2), blue:CGFloat(%3), alpha:%4);%0!.setStrokeColor(red:CGFloat(%1), green:CGFloat(%2), blue:CGFloat(%3), alpha:%4)%>
    me void: setRGB (me double: red, me double: green, me double: blue) <- <%!%0!.setFillColor(red:CGFloat(%1), green:CGFloat(%2), blue:CGFloat(%3), alpha:1);%0!.setStrokeColor(red:CGFloat(%1), green:CGFloat(%2), blue:CGFloat(%3), alpha:1)%>
    me void: setColor(me cdColor: color)                <- <%!%0!.setFillColor(red:CGFloat(%1.red), green:CGFloat(%1.green), blue:CGFloat(%1.blue), alpha:1);%0!.setStrokeColor(red:CGFloat(%1.red), green:CGFloat(%1.green), blue:CGFloat(%1.blue), alpha:1)%>
    me void: setLineWidth(me double: width)             <- <%!setLineWidth(CGFloat(%1))%>
    //me void: finishPDF()                                <- <%!closePDF()%>
    //me void: setScale()                                 <- <%!scaleBy(x: %1, y: %2)%>
    me void: moveTo(me double: x, me double: y)         <- <%!move(to:CGPoint(x:%1, y:%2))%>
    me void: lineTo(me double: x, me double: y)         <- <%!addLine(to:CGPoint(x:%1, y:%2))%>
    //me void: moveRel(me double: dx, me double: dy)    <- <%!%>
    //me void: lineRel(me double: dx, me double: dy)    <- <%!%>
    me void: curveTo(me double: x1, me double: y1, me double: x2, me double: y2, me double: x3, me double: y3) <- <%!addCurve(to: CGPoint(x: %1, y: %2), control1: CGPoint(x: %3, y: %4), control2: CGPoint(x: %5, y: %6))%>
    //me void: curveRel(me double: dx1, me double: dy1, me double: dx2, me double: dy2, me double: dx3, me double: dy3) <- <%!%>
    me void: closePath()                                <- <%!closePath()%>
    me void: rectangle(me double: x, me double: y, me double: w, me double: h) <- <%!addRect(CGRect(x:%1, y:%2, width:%3, height:%4))%>
    me void: paintNow()                                 <- <%!drawPath(using: .fillStroke)%>
    me void: strokeNow()                                <- <%!drawPath(using: .fillStroke)%>
    me void: fillNow()                                  <- <%!fill(CGRect(x:0, y:0, width:windowW, height:windowH))%>
    //me void: strokeKeep()                             <- <%!%>
    me void: fillKeep()                                 <- <%!fillPath()%>
    //me void: setFillPattern()                         <- <%!%>
    me void: circle(me int: centerX, me int: centerY, me int: radius) <- <%!addEllipse(in:CGRect(x: %1-%3, y: %2-%3, width: 2*%3, height: 2*%3))%>
    me GUI_ctxt: newPDF_ctxt(me sting: filename, me double: inchesWide, me double: inchesHigh) <- {}
}

struct GUI_ctxt{
    me Paint: paint
    me Path: GPath
    me double: cur_x
    me double: cur_y
    me Canvas: GCanvas

    me none: GUI_ctxt () <- {
        Allocate(paint)
        Allocate(GPath)
    }

    me none: GUI_ctxt(me Canvas: canvas) <- {
        Allocate(paint)
        Allocate(GPath)
        GCanvas <- canvas
    }
}

struct APP{
    //me none: APP() <- <%{}%>
}
/////////////////////////////////  G L O B A L
struct GLOBAL: inherits=AppCompatActivity{
    // //TIME ROUTINES:
    //me long: ticksPerSec()    <- <%!%>
    //me int64: getCurrentTimeStamp() <- <%!%>
    their NSWindow: window
    me int: widgetHeight() <- <%!%G(Int)(%1.bounds.size.height)%>
    me int: widgetWidth()  <- <%!%G(Int)(%1.bounds.size.width)%>
    me int: displayHeightPx
    me int: displayWidthPx

    // //DRAWING ROUTINES:
    me deltaSize: renderText(their GUI_ctxt: cr, me string: text, me fontSpec: font, me GUI_Scalar: x, me GUI_Scalar: y) <- <%{
        cr.saveGState()
        cr.textPosition = CGPoint(x: x, y: y)
        let color = CGColor.black
        let line = CTLineCreateWithAttributedString(NSAttributedString(string: text, attributes: [.font: NSFont.boldSystemFont(ofSize: CGFloat(font.size)), .foregroundColor: color]))
        CTLineDraw(line, cr)
        cr.restoreGState()
        //////////////////////////
        var size:deltaSize = getTextSize(cr, text, font);
        return(size);
    }%>
    //me deltaSize: renderTextCentered(me GUI_ctxt: cr, me string: text, me fontSpec: font, me double: x, me double: y) <- <%{}%>
    //me deltaSize: renderTextRotate(me GUI_ctxt: cr, me string: text, me fontSpec: font, me double: x, me double: y, me double: degrees, me string: justify) <- <%{}%>
    //me void: rotate(me GUI_ctxt: cr, me double: x, me double: y, me int: degrees) <- <%{}%>
    //me void: restore(me GUI_ctxt: cr) <- <%!%>
    me deltaSize: getTextSize(their GUI_ctxt: cr, me string: text, me fontSpec: font) <- <%{
        let size = deltaSize();
        return(size);
    }%>
    me void: roundedRectangle(me GUI_ctxt: cr, me double: x, me double: y, me double: w, me double: h, me double: r) <- {
        cr.moveTo(x+r,y);                      //# Move to A
        cr.lineTo(x+w-r,y);                    //# Straight line to B
        cr.curveTo(x+w,y,x+w,y,x+w,y+r);       //# Curve to C, Control points are both at Q
        cr.lineTo(x+w,y+h-r);                  //# Move to D
        cr.curveTo(x+w,y+h,x+w,y+h,x+w-r,y+h); //# Curve to E
        cr.lineTo(x+r,y+h);                    //# Line to F
        cr.curveTo(x,y+h,x,y+h,x,y+h-r);       //# Curve to G
        cr.lineTo(x,y+r);                      //# Line to H
        cr.curveTo(x,y,x,y,x+r,y);             //# Curve to A;
    }
    //me void: displayImage(me GUI_ctxt: cr, me string: filename, me double: x, me double: y, me double: scale) <- <%{}%>

    // //GUI INTERFACE:
    //me void: copyAssetToWritableFolder(me string: fromPath, me string: toPath)<- <%{}%>
    me void: getMetrics()                           <- <%{displayDensity = 1;}%>
    //me void: showWidget(me GUI_item: widget)      <- <%!%>
    //me void: hideWidget(their GUI_item: widget)   <- <%!%>
    me void: markDirtyArea(me GUI_item: widget, me int32: x, me int32: y, me int32: width, me int32: height) <- <%!%G%>
    me GUI_item: newCanvas()                        <- <%!%GNSView()%>
    me void: setWidgetSize(me GUI_item: widget, me uint32: width, me uint32: height) <- <%!%Gvar f: NSRect = %1.frame; f.size.width = %2; f.size.height = %3; %1.frame = f%>
}

/////////////////////////////////  INTER-THREAD COMMUNICATION
