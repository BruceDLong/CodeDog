/////////// Add routines for Swift
requirements = [
    [tagOneOf, Lang, [Swift]]
]

interface={
    provides = [CodeDog_implementation]
    libFiles = []
    headers  = [Foundation]
}

LibDescription ={
    useStatus   =  dynamic
    description = 'Built in routines for Swift'
}

initCode = ""
deinitCode = ""

struct stream{
    void: copyFile(me InputStream: inStream, me OutputStream: outStream) <- {}
    me void: open(me string: filename) <- {}
    me void: openNew(me string: filename) <- {}
    me void: openAppend(me string: filename) <- {}
    me void: close() <- {}
    me int:  getChar() <- {return(0)}
    me string: getLine() <- {return("")}
    me void: write(me string: S) <- {}
    me bool: EOF()  <- {return(false)}
    me bool: failure() <- {return(false)}
}

struct FileStream{
    me bool: failureFlag <- false
    void: copyFile(me InputStream: inStream, me OutputStream: outStream) <- {}
    me void: open(me string: filename) <- {}
    me void: openNew(me string: filename) <- {}
    me void: openAppend(me string: filename) <- {}
    me void: close() <- {}
    me int:  getChar() <- {return(0)}
    me string: getLine() <- {return("")}
    me void: write(me string: S) <- {}
    me bool: EOF()  <- {return(false)}
    me bool: failure() <- {return(false)}
}

struct GLOBAL{
    //me string: readAssetAsString(me string: filename)         <- {}
    //me string: wideCharToMultibyte(me int:ch)                 <- {}
    void: trimLeftWS(their string: str)                         <- {}
    void: trimRightWS(their string: str)                        <- {}
    //me string: trimWS(their string: str)                      <- {}
    me void: endFunc(me int: val)                               <- <%!return(0)%>
    //me uint: shiftLeft (me uint: bits, me uint: shft)         <- {}
    //me uint: shiftRight(me uint: bits, me uint: shft)         <- {}
    //me uint: AndBits(me uint: bits, me uint: shft)            <- {}
    //me uint: OrBits (me uint: bits, me uint: shft)            <- {}
    me timeValue: sleep(me timeValue: milliseconds)             <- <%!%Gsleep(UInt32(%1))%>
}
struct GLOBAL{  /////////  STRING & CHAR HANDLING  /////////////////////
    //me int: findString(me string: toSearch, me string: toFind)  <- {}
    me bool: isalpha(me char: ch)<- <%{
        switch ch {
            case "a"..."z": return true
            case "A"..."Z": return true
            default: return false
        }
    }%>
    me bool: isalnum(me char: ch)<- <%{
        switch ch {
            case "a"..."z": return true
            case "A"..."Z": return true
            case "0"..."9": return true
            default: return false
        }
    }%>
    me bool: isdigit(me char: ch)<- <%{
        return ch >= "0" && ch <= "9"
    }%>
    me bool: isprint(me char: ch)<- <%{
        return ch > "\u{1f}" && ch != "\u{7f}"
    }%>
    me bool: isspace(me char: ch)<- <%{
        return ch == " " || ch == "\t" || ch == "\n" || ch == "\r"
    }%>
    //me bool: isxdigit(me char: input)                       <- {}
    me char: toLower(me char: ch)                               <- <%!%1.lowercased()%>
    me char: toUpper(me char: ch)                               <- <%!%1.uppercased()%>
}
struct GLOBAL{  /////////  MATH HANDLING  //////////////////////////////
    me int: randInt(me int: val)                                <- <%!(rand() % %1)%>
    //me int: sqrt(me int: val)                                 <- {}
}
struct GLOBAL{  /////////  TYPE CONVERTERS  ////////////////////////////
    me timeValue: convertToTimeVal()                            <- <%!%G(Double)(%1)%>
    me timeValue: double()                                      <- <%!%G(Double)(%1)%>
    me int64: stoi(me string: str)                              <- <%!Int(%1)!%>
    me string: toString(me long: val)                           <- <%!String(%1)%>
    me string: toString(me int: val)                            <- <%!String(%1)%>
}

struct _atomic_uint64:wraps=uint64{}
struct timeValue: wraps=Double{}
