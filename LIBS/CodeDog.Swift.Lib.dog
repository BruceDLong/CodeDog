/////////// Add routines for Swift
requirements = [
    [tagOneOf, Lang, [Swift]]
]

interface={
    provides = [CodeDog_implementation]
    libFiles = []
    headers  = [Foundation]
}


LibDescription ={
    useStatus   =  dynamic
    description = 'Built in routines for Swift'
}

initCode = ""
deinitCode = ""


struct stream{
    void: copyFile(me InputStream: inStream, me OutputStream: outStream) <- {}
    me void: open(me string: filename) <- {}
    me void: openNew(me string: filename) <- {}
    me void: openAppend(me string: filename) <- {}
    me void: close() <- {}
    me int:  getChar() <- {return(0)}
    me string: getLine() <- {return("")}
    me void: write(me string: S) <- {}
    me bool: EOF()  <- {return(false)}
    me bool: failure() <- {return(false)}
}

struct FileStream{
    me bool: failureFlag <- false
    void: copyFile(me InputStream: inStream, me OutputStream: outStream) <- {}
    me void: open(me string: filename) <- {}
    me void: openNew(me string: filename) <- {}
    me void: openAppend(me string: filename) <- {}
    me void: close() <- {}
    me int:  getChar() <- {return(0)}
    me string: getLine() <- {return("")}
    me void: write(me string: S) <- {}
    me bool: EOF()  <- {return(false)}
    me bool: failure() <- {return(false)}
}

struct GLOBAL{
    me bool: isalpha(me char: ch)<- <%{
        switch ch {
            case "a"..."z": return true
            case "A"..."Z": return true
            default: return false
        }
    }%>

    me bool: isspace(me char: ch)<- <%{
        return ch == " " || ch == "\t" || ch == "\n" || ch == "\r"
    }%>

    me bool: isdigit(me char: ch)<- <%{
        return ch >= "0" && ch <= "9"
    }%>

    me bool: isalnum(me char: ch)<- <%{
        switch ch {
            case "a"..."z": return true
            case "A"..."Z": return true
            case "0"..."9": return true
            default: return false
        }
    }%>

    me bool: isprint(me char: ch)<- <%{
        return ch > "\u{1f}" && ch != "\u{7f}"
    }%>

    me void: endFunc(me int: val)                           <- <%!return(0)%>
    me int: randInt(me int: val)                            <- <%!(rand() % %1)%>
    me string: toString(me int: val)                        <- <%!String(%1)%>
    me int: stoi(me string: S)                              <- <%!Int(%1)!%>
    /////////////////////////////////////////////////////
    me timeValue: sleep(me timeValue: milliseconds)         <- <%!%Gsleep(UInt32(%1))%>
    me timeValue: convertToTimeVal()                        <-  <%!%G(Double)(%1)%>
    me timeValue: double()                                  <-  <%!%G(Double)(%1)%>
    me char: toUpper(me char: ch) <- <%!%1.uppercased()%>
    me char: toLower(me char: ch) <- <%!%1.lowercased()%>
}

struct timeValue{me Double: timeValue}
