/////////// Add routines for C++
requirements = [
    [tagOneOf, LangVersion, [MSVC]]
]

interface={
    provides = [BigNumbers_langVersion_implementation]
    packages = [
        { packageName = 'mpir'
          fetchMethod = 'zip:https://www.dropbox.com/s/dl5eufzws9govns/mpfr_mpir_x86_x64_msvc2010_001.zip'	// source code from: git://github.com/BrianGladman/mpir.git mpir
          buildCmds   = {
              Windows = {installFiles = ['.']}
            }
	}
    ]
    libFiles = [mpir]
    headers  = [mpir.h, mpirxx.h]
}

LibDescription ={
    useStatus   = dynamic
    description = 'Built in routines for CPP'
}

struct GLOBAL{
    me string: toString(me BigFloat: val) <- <%{
        string retVal = "";
        mp_exp_t  exp;
        string digits       = val.get_str(exp,10,12);
        int64_t digitsGiven = digits.size();
        if(exp <= 0){
            if(digitsGiven==0){
                retVal = "0";
            }else{
                string zeros = "0.";
                int64_t endVal = -exp;
                for(int64_t i=0; i<endVal; i++){
                    zeros+="0";
                }
                retVal = zeros+digits;
            }
        }else{
            if(digitsGiven>exp){
                retVal=digits.substr(0,exp)+"."+digits.substr(exp,digitsGiven);
            }
            else if(digitsGiven==exp){
                retVal=digits;
            }
            else{//digitsGiven<exp
                retVal=digits;
                int64_t endVal = exp-digitsGiven;
                for(int64_t i=0; i<endVal; i++){
                    retVal+="0";
                }
            }
        }
        //logMgr.Mesg.LogEntry("  ", "     exp:"+std::to_string(exp)+ "     digitsGiven:"+std::to_string(digitsGiven)+ "   digits:"+digits);
        return(retVal);
    }%>
}
