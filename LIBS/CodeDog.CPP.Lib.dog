/////////// Add routines for C++
requirements = [
    [tagOneOf, Lang, [CPP]],
    [require, CodeDog_langVersion_implementation]
]

interface={
    provides = [CodeDog_implementation]
    libFiles = []
    headers  = [signal.h, string, cstring, memory, cstdint, list, deque, map, cstdarg, iostream, fstream, sys/stat.h, math.h, algorithm]
}


LibDescription ={
    useStatus   = dynamic
    description = 'Built in routines for CPP'
}

initCode = "signal(SIGSEGV, reportFault)"
deinitCode = ""
embedVeryHigh = `
        bool doesFileExist(string filePath){
            ifstream ifile(filename);
            return (bool)ifile;
        }

        void copyAssetToWritableFolder(string fromPath, string toPath){
            //TODO: finish func body if package C++
        }

        string joinCmdStrings(int count , char *argv[]) {
            string acc="";
            for(int i=1; i<count; ++i){
                if(i>1) acc+=" ";
                acc += argv[i];
            }
            return(acc);
        }

        constexpr unsigned int _strHash(const char* str, int h = 0){
            return !str[h] ? 5381 : (_strHash(str, h+1)*33) ^ str[h];
        }
`

struct FileStream{
    me fstream: FileStream
    me void: open(me string: filename) <- <%!open(%1)%>
    me void: openNew(me string: filename) <- <%!open(%1, std::ios::out|std::ios::trunc)%>
    me void: openAppend(me string: filename) <- <%!open(%1, ios_base::in | ios_base::out | ios_base::app)%>
    me void: close()     <- <%!close()%>
    me int:  getChar()   <- <%!get()%>
    me string: getLine() <- <%!_strm_getLine(&%0)%>
    me void: write(me string: S) <- <%!write(%1.data(), %1.size())%>
    me bool: EOF() <- <%!eof()%>
    me bool: failure() <- <%!fail()%>
    me bool: flush() <- <%!flush()%>
}
struct sessionFile{
    me FileStream: session
    me void: openSession(me string: filename) <-{session.openAppend(filename)}
    me void: closeSession() <- {session.close()}
    me void: writeEntry(me string: entry) <- {entry<-entry+"\n"; session.write(entry); session.flush();}

    me bool: openToRead(me string: filename) <- {
        session.open(filename)
        if(session.failure()){print("ERROR: session file "+filename+"\n"); return(true)}
        return(false)
    }
    me string: readEntry() <- {me string: retVal <- session.getLine(); return(retVal)}
    me bool: eof() <- {return(session.EOF())}
    me void: closeReading() <- {session.close()}
}
struct GLOBAL{
    me string: _strm_getLine(their istream: strm) <- <%{
        string S;
        getline(*strm, S);
        return(S);
    }%>

    me string: readAssetAsString(me string: filename) <- <%{
        string text = "";
        string fileDir = getAssetsDir()+"/"+filename;
        text = readFileAsString(fileDir);
        return text;
   }%>
    me string: wideCharToMultibyte(me int:ch) <- <%{
        char buf[32];
        int len=wctomb(buf, ch);
        string retVal="";
        if(len>0) {
            buf[len]=0;
            retVal = buf;
        }
        return retVal;
    }%>

    void: trimLeftWS(their string: str)  <- <%{str->erase(0, str->find_first_not_of("\t\n\v\f\r "));}%>
    void: trimRightWS(their string: str) <- <%{str->erase(str->find_last_not_of("\t\n\v\f\r ")+1);}%>
    me string: trimWS(their string: str) <- {
        trimLeftWS(str);
        trimRightWS(str)
        return(str)
    }
    me void: endFunc()                                         <- <%!return(0)%>
    me int: uniqueObjectID(their any:obj)                      <- <%!%G(intptr_t)%1%>
    const int64: INT64_MAX                                     <- <%!%GLLONG_MAX%>
    //const int64: INT64_MIN                                    <- <%!%GLLONG_MIN%>
    //const uint64: UINT64MAX                                   <- <%!%GLLONG_MAX%>
    //const uint64: UINT64MIN                                   <- <%!%GLLONG_MIN%>
    //const int32: INT_MAX                                      <- <%!%GLLONG_MAX%>
    //const int32: INT_MIN                                      <- <%!%GLLONG_MIN%>
    //const uint32: UINT_MAX                                    <- <%!%GLLONG_MAX%>
    //const uint32: UINT_MIN                                    <- <%!%GLLONG_MIN%>
}
struct GLOBAL{  /////////  STRING & CHAR CONVERTERS  ///////////////////
    me int: findString(me string: toSearch, me string: toFind)  <-  <%!%G%1.find(%2)%>
    me bool: isalpha(me char: ch)                               <- <%!isalpha(%1)%>
    me bool: isalnum(me char: ch)                               <- <%!isalnum(%1)%>
    me bool: isdigit(me char: ch)                               <- <%!isdigit(%1)%>
    me bool: isprint(me char: ch)                               <- <%!isprint(%1)%>
    me bool: isspace(me char: ch)                               <- <%!isspace(%1)%>
    me bool: isxdigit(me string: input)                         <- <%!isxdigit(%1)%>
    me char: toLower(me char: ch)                               <- {if(ch>="A" and ch<="Z"){ch <+- 32} return(ch)}
    me char: toUpper(me char: ch)                               <- {if(ch>="a" and ch<="z"){ch <-- 32} return(ch)}
}
struct GLOBAL{  /////////  MATH CONVERTERS  ////////////////////////////
    me int: randInt(me int: val)                                <- <%!(rand() % %1)%>
    me int: sqrt(me int: val)                                   <- <%!sqrt(%1)%>
}
struct GLOBAL{  /////////  TYPE CONVERTERS  ////////////////////////////
    me float: convertToFloatVal()                               <- <%!%G(float)%1%>
    me int: convertToIntVal(me int: val)                        <- <%!%G%1%>
    me timeValue: convertToL()                                  <- <%!%G%1%>
    me timeValue: convertToLongVal()                            <- <%!%G%1%>
    me timeValue: convertToTimeVal()                            <- <%!%G%1%>
    me timeValue: double()                                      <- <%!%G%1%>
    me int64: stoi(me string: str)                              <- <%!std::stoi(%1)%>
    me double: toDouble(me string: val)                         <- <%!std::stoi(%1)%>
    //me string: toString(me bool: val)                          <- <%!%G((%1)?"true":"false")%>
    me string: toString(me long: val)                           <- <%!std::to_string(%1)%>
    me string: toString(me number_type: val)                    <- <%!std::to_string(%1)%>
}

struct timeValue{me int64: timeValue}
struct DateValue{me int64: DateValue}
struct timeOfDay{me int64: timeOfDay}
struct DateTime{me int64: DateTime}
