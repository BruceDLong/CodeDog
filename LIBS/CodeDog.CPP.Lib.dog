/-///////// Add routines for C++
requirements = [
    [tagOneOf, Lang, [CPP]]
]

interface={
    provides = [CodeDog_implementation]
    libFiles = []
    headers  = [signal.h, string, cstring, memory, cstdint, list, deque, map, cstdarg, iostream, fstream, sys/stat.h, math.h, algorithm]
}


LibDescription ={
    useStatus   = dynamic
    description = 'Built in routines for CPP'
}

initCode = "signal(SIGSEGV, reportFault)"
deinitCode = ""


struct FileStream{
    me fstream: FileStream
    me void: open(me string: filename) <- <%!open(%1)%>
    me void: openAppend(me string: filename) <- <%!open(%1, ios_base::in | ios_base::out | ios_base::app)%>
    me void: close() <- <%!close()%>
    me int:  getChar() <- <%!get()%>
    me void: getLine(me string: S) <- <%!getline(%0, %1)%>
    me void: write(me string: S) <- <%!write(%1.data(), %1.size())%>
    me bool: EOF() <- <%!eof()%>
    me bool: failure() <- <%!fail()%>
}
struct sessionFile{
    me FileStream: session
    me void: openSession(me string: filename) <-{session.openAppend(filename)}
    me void: closeSession() <- {session.close()}
    me void: writeEntry(me string: entry) <- {entry<-entry+"\n"; session.write(entry)}

    me bool: openToRead(me string: filename) <- {
        session.open(filename)
        if(session.failure()){print("Creating session file "+filename+"\n"); return(true)}
        return(false)
    }
    me string: readEntry() <- {me string: retVal; session.getLine(retVal); return(retVal)}
    me bool: eof() <- {return(session.EOF())}
    me void: closeReading() <- {session.close()}
}

struct GLOBAL{
    me uint: shiftLeft (me uint: bits, me uint: shft) <- <%!(%1 << %2)%>
    me uint: shiftRight(me uint: bits, me uint: shft) <- <%!(%1 >> %2)%>
    me uint: AndBits(me uint: bits, me uint: shft) <- <%!(%1 & %2)%>
    me uint: OrBits (me uint: bits, me uint: shft) <- <%!(%1 | %2)%>
    me void: endFunc(me int: val) <- <%!return(0)%>
    me int: randInt(me int: val) <- <%!(rand() % %1)%>
    me string: toString(me int: val) <- <%!std::to_string(%1)%>
    me string: toString(me double: val) <- <%!std::to_string(%1)%>
    me int: stoi(me string: val) <- <%!std::stoi(%1)%>
    me int: uniqueObjectID(their any:obj)  <- <%!%G(intptr_t)%1%>
    me int: sleep(me int: miliseconds) <- <%{
       struct timespec req, rem;
       if(miliseconds > 999) {
            req.tv_sec = (int)(miliseconds / 1000);                            /* Must be Non-Negative */
            req.tv_nsec = (miliseconds - ((long)req.tv_sec * 1000)) * 1000000; /* Must be in range of 0 to 999999999 */
       }else{
            req.tv_sec = 0;                         /* Must be Non-Negative */
            req.tv_nsec = miliseconds * 1000000;    /* Must be in range of 0 to 999999999 */
       }
       return nanosleep(&req , &rem);
   }%>

    me string: execCmd(me string: command) <- <%{
      FILE* pipe;
      std::array<char, 128> buffer;
      string result = "";
      pipe = popen(command.data(), "r");
      if (pipe == NULL) {
        cout<<"Cannot execute command:'" << command<<"'\n";
        return "";
      }
      while(fgets(buffer.data(), 128, pipe) != NULL) {
        result = result+buffer.data();
      }
      pclose(pipe);
      return result;
    }%>

    me string: wideCharToMultibyte(me int:ch) <- <%{
        char buf[32];
        int len=wctomb(buf, ch);
        string retVal="";
        if(len>0) {
            buf[len]=0;
            retVal = buf;
        }
        return retVal;
    }%>

    me double: sqrt(me double: input) <- <%!sqrt(%1)%>
    me timeValue: convertToTimeVal()                        <- <%!%G%1%>
    me timeValue: convertToLongVal()                        <- <%!%G%1%>
    me int: convertToIntVal()                               <- <%!%G%1%>
    me float: convertToFloatVal()                           <- <%!%G%1%>
}
struct timeValue{me int64: timeValue}
struct DateValue{me int64: DateValue}
struct timeOfDay{me int64: timeOfDay}
struct DateTime{me int64: DateTime}
