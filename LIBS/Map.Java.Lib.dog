// Map.Java.Lib.dog
requirements = [
    [tagOneOf, Lang, [Java]]
]

interface={
    provides = [Map_implementation]
    libFiles = []
    headers  = []
}

LibDescription ={
    useStatus   = dynamic
    description = 'Map in routines for Java'
}

/*struct Java_Map<keyType, valueType>: implements=Map wraps=TreeMap native=lang specs={insert=logarithmic find=logarithmic at=logarithmic}{
    keyType: at(keyType: key)                   <- <%!%0.get(%1)%>
    void: clear()                               <- <%!clear()%>
    me bool: containsKey(keyType: key)          <- <%!containsKey(%1)%>
    //itr nodeType: end()                       <- <%!end()%>           // returns itr to past-the-end element
    itr nodeType: erase(keyType: key)           <- <%!remove(%1)%>
    itr nodeType: find(valueType: val)          <- <%!get(%1)%>
    valueType: first()                          <- <%!get(0)%>
    itr nodeType: front()                       <- <%!firstEntry().getValue()%>
    itr nodeType: insert(keyType: key, valueType: value) <- <%!put(%1, %2)%>
    me bool:  isEmpty()                         <- <%!isEmpty()%>
    valueType: last()                           <- <%!%0.get(%0.size()-1)%>
    itr valueType: lower_bound(keyType: key)    <- <%!firstKey()%>
    //nodeType: popFirst()                      <- <%!%0.remove(%0.firstKey())%>
    //nodeType: popLast()                       <- <%!pollLastEntry()%>
    me uint:  size()                            <- <%!size()%>
    /////////////////////////////////////////
    // TODO: need Reverse Iterators working first
    //itr nodeType: back() <- <%!rend()%>             // returns reverse iterator to the reverse ene of the sequence container
}
*/
