//############  Add GUI-Toolkit features using GTK3
requirements = [
    [tagOneOf, Platform, [Linux]]
]

interface={
    provides=[GUI_ToolKit_implementation]
    libFiles=[`pkg-config --cflags --libs gtk+-3.0`]
    headers=[gtk/gtk.h, cairo-pdf.h]
}

LibDescription ={
    useStatus   = dynamic
    description ='GTK is a GUI Toolkit'
    features    =[GUI_ToolKit, Mouse, Keyboard, Audio]
    platforms   =[Linux]
    bindings    =[C, CPP]
}

initCode = `
    GUI_threads_messagePasser <- threadsMesgPasser()
`

/////////////////////////////////  STRUCT CONVERTERS
struct GUI_rect{me double: x1 me double: y1 me double: x2 me double: y2}
struct GUI_item:                wraps = GtkWidget ownerMe = their{}
struct GUI_Frame:               wraps = GtkWidget ownerMe = their{}
struct GUI_container:           wraps = GtkContainer ownerMe = their{}
struct INK_Image:               wraps = cairo_surface_t ownerMe = their{}      // How will the ink look?
struct GUI_callback:            wraps = GCallback ownerMe = their{}
struct GUI_Scalar:              wraps = double{}
struct GUI_Text:                wraps = GtkWidget ownerMe = their{}
struct GDK_KEY_Down:            wraps = GtkWidget ownerMe = their{}
struct GUI_MouseEvent:          wraps = GdkEventMotion ownerMe = their{}
struct GUI_MotionEvent:         wraps = GdkEventMotion ownerMe = their{}
struct GUI_ButtonEvent:         wraps = GdkEventButton ownerMe = their{}
struct GUI_PointerEvent:        wraps = GdkEventButton ownerMe = their{}
struct GUI_KeyboardEvent:       wraps = GdkEventKey ownerMe = their{}
struct GUI_canvas:              wraps = GtkWidget ownerMe = their{}
struct GUI_ctxt:                wraps = cairo_t ownerMe = their{}
/////////////////////////////////  GLOBAL WIDGET FUNCTIONS
struct GLOBAL{
    me void: addToContainerAndShowWidget (their GUI_container: parentContainer, their GUI_item: childWidget) <- <%{
        gtk_container_add(parentContainer, childWidget);
        gtk_widget_show(childWidget);
    }%>

    me string: toString(me GUI_Scalar: arg) <- {return(to_string(arg))}
}
/////////////////////////////////  HANDLE EVENTS
struct GUI_MotionEvent{
    me uint: type
    // GdkWindow *window;
    // gint8 send_event;
    // guint32 time;
    me double: x
    me double: y
    me uint: state
    me uint: button
}
struct GUI_ButtonEvent{
    me uint: type
    // GdkWindow *window;
    // gint8 send_event;
    // guint32 time;
    me double: x
    me double: y
    me uint: state
    me uint: button
}
struct GUI_PointerEvent{
    me uint: type
    // GdkWindow *window;
    // gint8 send_event;
    // guint32 time;
    me double: x
    me double: y
    me uint: state
    me uint: button
}
struct GUI_KeyboardEvent{
    me uint: type
    me uint: state
    me uint: keyval
}
/////////////////////////////////  EVENT DISPATCHER
struct GUI_eventDispatcher{
    their widget: topWidget

    me bool: dispatchPointerMotionEvent(their GdkEventMotion: event) <- <%{
        event->x = event->x / scaleFactor;
        event->y = event->y / scaleFactor;
        topWidget->mouseMoved(event);
        return false;
    } %>
    me bool: dispatchPointerClickEvent(their GdkEventButton: event) <- <%{
        event->x = event->x / scaleFactor;
        event->y = event->y / scaleFactor;
        if(event->type==GDK_BUTTON_PRESS){
            if(event->button==1){
                topWidget->primaryDn(event);
            } else if(event->button==3){
                topWidget->secondaryClick(event);
            }
        } else if(event->type==GDK_BUTTON_RELEASE){
            if(event->button==1){
                topWidget->primaryUp(event);
                topWidget->primaryClick(event);
            } else if(event->button==3){
                topWidget->secondaryUp(event);
            }
        }
        return false;
    } %>
    me bool: dispatchKeyboardEvent(their GdkEventKey: event) <- <%{
        topWidget->keyTyped(event);
        return(true);
    }%>
    //  me bool: dispatchWindowEvent(their GdkEventConfigure: event) <- {print("Config\n")}
    // Also: timer, data and user events

    me void: registerWidgetForEventDispatcher(their GUI_item: Widget, their widget: masterWidget) <- <%{
        topWidget = masterWidget;

        g_signal_connect(Widget, "draw", G_CALLBACK(drawAppArea_cb), topWidget);
//      g_signal_connect (Widget, "expose_event",      G_CALLBACK(expose_event), topWidget);
//      g_signal_connect (Widget, "configure_event",   G_CALLBACK(configure_event), topWidget);
        g_signal_connect (Widget, "motion_notify_event", G_CALLBACK(motion_notify_event), topWidget);
        g_signal_connect (Widget, "button_press_event",  G_CALLBACK(button_press_event), topWidget);
        g_signal_connect (Widget, "button_release_event",  G_CALLBACK(button_release_event), topWidget);
        g_signal_connect (window, "key_press_event",  G_CALLBACK(keypress_event), topWidget);

        gtk_widget_set_events (Widget, GDK_EXPOSURE_MASK
             | GDK_LEAVE_NOTIFY_MASK
             | GDK_BUTTON_PRESS_MASK
             | GDK_BUTTON_RELEASE_MASK
             | GDK_POINTER_MOTION_MASK
             | GDK_POINTER_MOTION_HINT_MASK
             | GDK_KEY_PRESS_MASK
             | GDK_KEY_RELEASE_MASK
        );
    } %>
}

/////////////////////////////////  GLOBAL EVENT HANDLERS
struct GLOBAL{
    me void: button_press_event(their GtkWidget: wid, their GdkEventButton: event, their void: data) <- <%{
        ((DashboardWidget*) data)->EventDispatcher.dispatchPointerClickEvent(event);
    } %>
    me void: button_release_event(their GtkWidget: wid, their GdkEventButton: event, their void: data) <- <%{
        ((DashboardWidget*) data)->EventDispatcher.dispatchPointerClickEvent(event);
    } %>
    me void: motion_notify_event(their GtkWidget: wid, their GdkEventMotion: event, their void: data) <- <%{
        ((DashboardWidget*) data)->EventDispatcher.dispatchPointerMotionEvent(event);
    } %>
    me void: expose_event(their GtkWidget: wid, their GdkEventExpose: event, their void: data) <- <%{
      //  ((DashboardWidget*) data)->EventDispatcher.dispatchWindowEvent(event);
    } %>
    me void: keypress_event(their GtkWidget: wid, their GdkEventKey: event, their void: data) <- <%{
        ((DashboardWidget*) data)->EventDispatcher.dispatchKeyboardEvent(event);
    } %>
    me void: configure_event(their GtkWidget: wid, their GdkEventConfigure: event, their void: data) <- <%{
      //  EventDispatcher.dispatchWindowEvent(event);
    } %>
    me bool: drawAppArea_cb(their GtkWidget: gtk_top_widget, their GUI_ctxt: cr, their void: data) <- <%{
        widget* DBW = (widget*)data;
        cairo_scale(cr, scaleFactor, scaleFactor);
        DBW->draw(cr);
        return(true);
    }%>
    void: clickBack_CB(their GtkWidget: btn, their appComponentGUI: wid) <- <%{
        appComponentGUI* clickWidget = (appComponentGUI*)wid;
        clickWidget->clickBack();
    }%>
    void: clickNext_CB(their GtkWidget: btn, their appComponentGUI: wid) <- <%{
        appComponentGUI* clickWidget = (appComponentGUI*)wid;
        clickWidget->clickNext();
    }%>
}
/////////////////////////////////  HANDLE GUI
struct GUI_canvas{
    me void: setParent(our DashboardWidget: wid) <- <%!%G%>
}

struct GUI{
    their GtkApplication: app

    me uint32: GUI_Init() <- {
        app <- gtk_application_new (0, G_APPLICATION_FLAGS_NONE)
        g_signal_connect (app, "activate", G_CALLBACK(activate), NULL)
        return(0)
    }
    me uint32: GUI_Run() <- <% {
        uint32_t status;
        status = g_application_run( G_APPLICATION(app), 0, 0);
        return(status);
    } %>
    me void: GUI_Deinit() <- {
        g_object_unref(app)
    }
}

struct GUI{
    their GUI_item: newCanvas() <- <%!%Ggtk_drawing_area_new()%>
    me void: setWidgetSize(their GUI_item: widget, me uint32: width, me uint32: height) <- <%!%Ggtk_widget_set_size_request(%1, %2, %3)%>
    me void: setCallback()     <- <%!%Gg_signal_connect(G_OBJECT(%1), %2, G_CALLBACK(%3), %4)%>
    me void: setBtnCallback()  <- <%!%Gg_signal_connect(G_OBJECT(%1), %2, G_CALLBACK(%3_CB), %4)%>
    me void: setBtnCallback2() <- <%!%Gg_signal_connect(G_OBJECT(%1), %2, G_CALLBACK(%3), %4.get())%>
    me void: setBtnCallback3()  <- <%!%Gg_signal_connect(G_OBJECT(%1), %2, G_CALLBACK(%3_%4_CB), %5)%>
}

struct GUI_ctxt{
    me void: fetchAreaToBeDrawn(me GUI_rect: area) <- <%!cairo_clip_extents(%0, &%1.x1, &%1.y1, &%1.x2, &%1.y2)%>
    me void: reset() <- <%!%G %>
    me void: setRGBA(me double: red, me double: green, me double: blue, me double: alpha) <- <%!cairo_set_source_rgba(%0, (double)%1 /256, (double)%2 /256, (double)%3 /256, (double)%4 /256)%>
    me void: setRGB (me double: red, me double: green, me double: blue) <- <%!cairo_set_source_rgb(%0, (double)%1 /256, (double)%2 /256, (double)%3 /256)%>
    me void: setColor(me cdColor: color) <- <%!cairo_set_source_rgba(%0, (double)%1.red /256, (double)%1.green /256, (double)%1.blue /256, (double)%1.alpha /256)%>
    me void: setLineWidth(me double: width) <- <%!cairo_set_line_width(%0, %1)%>
    me void: setRoundLineCap() <- <%!cairo_set_line_cap(%0, CAIRO_LINE_CAP_ROUND)%>
    me void: setEdgedLineCap() <- <%!cairo_set_line_cap(%0, CAIRO_LINE_CAP_BUTT)%>
    me void: finishPDF() <- <%!cairo_surface_finish(cairo_get_group_target(%0))%>
    me void: setScale() <- <%!cairo_scale(%0, %1, %2)%>
    me void: setOffset() <- <%!cairo_translate(%0, %1, %2)%>
    me void: moveTo(me double: x, me double: y) <- <%!cairo_move_to(%0, %1, %2)%>
    me void: lineTo(me double: x, me double: y) <- <%!cairo_line_to(%0, %1, %2)%>
    me void: moveRel(me double: dx, me double: dy) <- <%!cairo_rel_move_to(%0, %1, %2)%>
    me void: lineRel(me double: dx, me double: dy) <- <%!cairo_rel_line_to(%0, %1, %2)%>
    me void: curveTo(me double: x1, me double: y1, me double: x2, me double: y2, me double: x3, me double: y3) <- <%!cairo_curve_to(%0, %1, %2, %3, %4, %5, %6)%>
    me void: curveRel(me double: dx1, me double: dy1, me double: dx2, me double: dy2, me double: dx3, me double: dy3) <- <%!cairo_rel_curve_to(%0, %1, %2, %3, %4, %5, %6)%>
    me void: closePath() <- <%!cairo_close_path(%0)%>
    me void: rectangle(me double: x, me double: y, me double: w, me double: h) <- <%!cairo_rectangle(%0, %1, %2, %3, %4)%>
    me void: paintNow() <- <%!cairo_paint(%0)%>
    me void: strokeNow() <- <%!cairo_stroke(%0)%>
    me void: fillNow() <- <%!cairo_fill(%0)%>
    me void: strokeKeep() <- <%!cairo_stroke_preserve(%0)%>
    me void: fillKeep() <- <%!cairo_fill_preserve(%0)%>
    me void: setFillPattern() <- <%!cairo_set_source(%0, %1)%>
    me void: circle(me int: centerX, me int: centerY, me int: radius) <- <%!cairo_arc(%0, %1, %2, %3, 0, 2 * M_PI)%>
    their GUI_ctxt: newPDF_ctxt(me sting: filename, me double: inchesWide, me double: inchesHigh) <- <%!%Gcairo_create(cairo_pdf_surface_create(%1.data(), %2*70, %3*70))%>
}

/////////////////////////////////  G L O B A L
struct GLOBAL{
    // //TIME ROUTINES:
    me int64: ticksPerSec() <- <%!%GG_USEC_PER_SEC%>
    me int64: getCurrentTimeStamp() <- <%!g_get_real_time()/1000%>

    // //DRAWING ROUTINES:
    me deltaSize: renderText(their GUI_ctxt: cr, me string: text, me fontSpec: font, me double: x, me double: y) <- <%{
        cairo_move_to(cr,x,y);
        PangoLayout *layout=pango_cairo_create_layout(cr);
        pango_layout_set_text(layout, text.data(), -1);
        string fontDesc=font.name+' '+ std::to_string(font.size);
        PangoFontDescription *desc = pango_font_description_from_string(fontDesc.data());
        pango_layout_set_font_description(layout, desc);
        pango_font_description_free(desc);
        cairo_set_line_width(cr, 0.5);
        pango_cairo_update_layout(cr, layout);
        pango_cairo_show_layout_line (cr, pango_layout_get_line (layout, 0));
       // pango_cairo_layout_path(cr, layout);
        deltaSize size;
        pango_layout_get_pixel_size(layout, &size.width, &size.height);
        g_object_unref(layout);
        cairo_fill(cr);
        return(size);
    }%>

    me deltaSize: renderTextCentered(their GUI_ctxt: cr, me string: text, their fontSpec: font, me double: x, me double: y) <- <%{
        deltaSize size = getTextSize(text, font);
        renderText(cr, text, *font, x-size.width/2, y);
        return(size);
    }%>

    me deltaSize: renderTextRotate(their GUI_ctxt: cr, me string: text, their fontSpec: font, me double: x, me double: y, me double: degrees, me string: justify) <- <%{
        double radians    = degrees*(M_PI/180.);
        deltaSize size    = getTextSize(text, font);
        double hypotenuse = size.width;
        deltaSize tmpSize;
        rotate(cr, x, y, -45);
        if(justify == "right"){x=x-hypotenuse;}
        else if(justify == "center"){x=x-hypotenuse/2;}
        renderText (cr, text, *font, x, y);
        cairo_restore(cr);
        //TODO: calculate height and width more accurately
        tmpSize.height       = cos(abs(radians))*hypotenuse;
        tmpSize.width        = sin(abs(radians))*hypotenuse;
        hypotenuse           = size.height;
        radians              = M_PI/2 - abs(radians);
        tmpSize.height       = tmpSize.height + sin(radians)*hypotenuse;
        tmpSize.width        = tmpSize.width + cos(radians)*hypotenuse;
        //size.width = size.width*0.9;
        //size.height = size.width;
        return(tmpSize);
    }%>

    me void: rotate(their GUI_ctxt: cr, me double: x, me double: y, me int: degrees) <- <%{
        double radians = degrees*(M_PI/180.);
        cairo_save(cr);
        cairo_translate(cr,x,y);
        cairo_rotate(cr, radians);
        cairo_translate(cr,-x,-y);
    }%>

    me void: restore() <- <%!cairo_restore(cr)%>

    their cairo_t: fontCheckerCR

    me deltaSize: getTextSize(me string: text, their fontSpec: font) <- <%{
        if(fontCheckerCR==NULL){
            fontCheckerCR = cairo_create(cairo_image_surface_create(CAIRO_FORMAT_ARGB32, 5, 5));
        }
        PangoLayout *layout=pango_cairo_create_layout(fontCheckerCR);
        pango_layout_set_text(layout, text.data(), -1);
        string fontDesc=font->name+' '+ std::to_string(font->size);
        PangoFontDescription *desc = pango_font_description_from_string(fontDesc.data());
        pango_layout_set_font_description(layout, desc);
        pango_font_description_free(desc);
        deltaSize size;
        pango_layout_get_pixel_size(layout, &size.width, &size.height);
        g_object_unref(layout);
        return(size);
    } %>

    me deltaSize: getTextSizeX1024(me string: text, their fontSpec: font) <- <%{
        if(fontCheckerCR==NULL){
            fontCheckerCR = cairo_create(cairo_image_surface_create(CAIRO_FORMAT_ARGB32, 5, 5));
        }
        PangoLayout *layout=pango_cairo_create_layout(fontCheckerCR);
        pango_layout_set_text(layout, text.data(), -1);
        string fontDesc=font->name+' '+ std::to_string(font->size);
        PangoFontDescription *desc = pango_font_description_from_string(fontDesc.data());
        pango_layout_set_font_description(layout, desc);
        pango_font_description_free(desc);
        deltaSize size;
        pango_layout_get_size(layout, &size.width, &size.height);
        g_object_unref(layout);
        return(size);
    } %>
    me void: roundedRectangle(their GUI_ctxt: cr, me double: x, me double: y, me double: w, me double: h, me double: r) <- <%{
        cairo_move_to(cr,x+r,y);                      //# Move to A
        cairo_line_to(cr,x+w-r,y);                    //# Straight line to B
        cairo_curve_to(cr,x+w,y,x+w,y,x+w,y+r);       //# Curve to C, Control points are both at Q
        cairo_line_to(cr,x+w,y+h-r);                  //# Move to D
        cairo_curve_to(cr,x+w,y+h,x+w,y+h,x+w-r,y+h); //# Curve to E
        cairo_line_to(cr,x+r,y+h);                    //# Line to F
        cairo_curve_to(cr,x,y+h,x,y+h,x,y+h-r);       //# Curve to G
        cairo_line_to(cr,x,y+r);                      //# Line to H
        cairo_curve_to(cr,x,y,x,y,x+r,y);             //# Curve to A;
    } %>

    me void: roundedTopRect(their GUI_ctxt: cr, me double: x, me double: y, me double: w, me double: h, me double: r) <- <%{
        cairo_move_to(cr,x+r,y);                      //# Move to A
        cairo_line_to(cr,x+w-r,y);                    //# Straight line to B
        cairo_curve_to(cr,x+w,y,x+w,y,x+w,y+r);       //# Curve to C, Control points are both at Q
        cairo_line_to(cr,x+w,y+h);                  //# Move to D
        //cairo_curve_to(cr,x+w,y+h,x+w,y+h,x+w-r,y+h); //# Curve to E
        cairo_line_to(cr,x,y+h);                    //# Line to F
        //cairo_curve_to(cr,x,y+h,x,y+h,x,y+h-r);       //# Curve to G
        cairo_line_to(cr,x,y+r);                      //# Line to H
        cairo_curve_to(cr,x,y,x,y,x+r,y);             //# Curve to A;
    } %>

    me void: roundedBotmRect(their GUI_ctxt: cr, me double: x, me double: y, me double: w, me double: h, me double: r) <- <%{
        cairo_move_to(cr,x,y);                      //# Move to A
        cairo_line_to(cr,x+w,y);                    //# Straight line to B
        //cairo_curve_to(cr,x+w,y,x+w,y,x+w,y+r);       //# Curve to C, Control points are both at Q
        cairo_line_to(cr,x+w,y+h-r);                  //# Move to D
        cairo_curve_to(cr,x+w,y+h,x+w,y+h,x+w-r,y+h); //# Curve to E
        cairo_line_to(cr,x+r,y+h);                    //# Line to F
        cairo_curve_to(cr,x,y+h,x,y+h,x,y+h-r);       //# Curve to G
        cairo_line_to(cr,x,y);                      //# Line to H
        //cairo_curve_to(cr,x,y,x,y,x+r,y);             //# Curve to A;
    } %>

    me void: displayImage(their GUI_ctxt: cr, me string: filename, me double: x, me double: y, me double: scale) <- <%{
        filename = "./assets/" + filename;
        map< string, cairo_surface_t* >::iterator picPtr=InkImgCache.find(filename);
        cairo_surface_t* pic=0;
        if (picPtr==InkImgCache.end()) {
            pic=cairo_image_surface_create_from_png(filename.data());
            InkImgCache[filename]=pic;
            }
        else pic=picPtr->second;

        cairo_save(cr);
        cairo_scale(cr,1/scale,1/scale);
        cairo_set_source_surface(cr,pic,x*scale,y*scale);
        cairo_paint(cr);
        cairo_restore(cr);
    }%>

    void: displayBackgroundImage(their GUI_ctxt: cr, me string: filename) <- <%{
        filename = "./assets/" + filename;
        cairo_surface_t* pic=0;
        map<string, cairo_surface_t*>::iterator picPtr=InkImgCache.find(filename);
        if (picPtr==InkImgCache.end()) {InkImgCache[filename]=pic=cairo_image_surface_create_from_png(filename.data());}
        else pic=picPtr->second;
        double picWidth = cairo_image_surface_get_width(pic);
        double picHeight = cairo_image_surface_get_height(pic);
        double xScale = windowW / picWidth;
        double yScale = windowH / picHeight;
        cairo_save(cr);
        cairo_scale(cr, xScale, yScale);
        cairo_set_source_surface(cr,pic,0,0);
        cairo_paint(cr);
        cairo_restore(cr);
    }%>
    // //GUI INTERFACE:
    /* Surface to store current scribbles */
    their cairo_surface_t: surface <- 0

    me void: close_window() <- <%{
        if (surface){
            cairo_surface_destroy(surface);
        }
        g_application_quit((GApplication*)thisApp.gui.app);
    }%>
    me void: getMetrics() <- <%{displayDensity   = 1;}%>
    me void: showWidget(me GUI_item: widget) <-  <%!gtk_widget_show(GTK_WIDGET(%1))%>
    me void: hideWidget(their GUI_item: widget) <- <%!gtk_widget_hide(GTK_WIDGET(%1))%>
    me void: markDirtyArea(me GUI_item: widget, me int32: x, me int32: y, me int32: width, me int32: height) <- <%!gtk_widget_queue_draw_area(%1, %2, %3, %4, %5)%>
    //me GUI_item: newCanvas() <- <%!gtk_drawing_area_new()%>
    me void: setWidgetSize(me GUI_item: widget, me uint32: width, me uint32: height) <- <%!gtk_widget_set_size_request(%1, %2, %3)%>
    me int: widgetHeight() <- <%!gtk_widget_get_allocated_height(%1)%>
    me int: widgetWidth() <- <%!gtk_widget_get_allocated_width(%1)%>
    me void: addToContainer(me GUI_container: container, me GUI_item: widget) <- <%!addToContainerAndShowWidget(GTK_CONTAINER (%1), (GtkWidget*)%2)%>
    me void: addToContainerAndExpand(me GUI_container: container, their GUI_item: widget) <-<%!%Ggtk_box_pack_start(GTK_BOX(%1), %2, TRUE, TRUE, 0)%>
    me void: addToZStack(me GUI_container: container, their GUI_item: widget) <-<%!%Ggtk_stack_add_named(GTK_STACK(%1), %2, %3)%>
    me void: setZStackActive(their GUI_item: widget, me string: S) <- <%!%Ggtk_stack_set_visible_child_name(GTK_STACK(%1), %2.data())%>
    their GUI_item: newScrollingWindow() <- <%!%Ggtk_scrolled_window_new(NULL, NULL)%>
    me GUI_Scalar: convertToGUIScalar()                                    <- <%!%G%1%>
}

/////////////////////////////////  INTER-THREAD COMMUNICATION
// Initialization: get main thread's "mainContext" and store it and make a global getter for it.
struct MessagePasser {their GMainContext: MessagePasser}

struct workerMsgThread: inherits = Threads {
    their MessagePasser: mesgPasser
    void: run() <- <%{
        mesgPasser = g_main_context_new();
        workerThreadMessagePasser = mesgPasser;
        GMainLoop *main_loop;
        /* Set up the thread’s context and run it forever. */
        g_main_context_push_thread_default (mesgPasser);
        main_loop = g_main_loop_new (mesgPasser, FALSE);
        g_main_loop_run (main_loop);
        g_main_loop_unref (main_loop);
        g_main_context_pop_thread_default (mesgPasser);
        g_main_context_unref (mesgPasser);
    }%>
}

struct GLOBAL{
    their MessagePasser: GUI_threads_messagePasser <- NULL   // Set this at beginning of the program
    their MessagePasser: workerThreadMessagePasser <- NULL   // Set this at beginning of the program
    their MessagePasser: threadsMesgPasser() <- <%!g_main_context_get_thread_default()%>
    their MessagePasser: GUIsMesgPasser() <- <%!GUI_threads_messagePasser%>
    void: invokeFunctionInThread(their MessagePasser: mesgPasser, their void: objToCall, their void: classToCall, their void: funcToCall, their void: arguments)
        <- <%!g_main_context_invoke(%1, GSourceFunc(%3_%4_CB), %5)%>
}

struct GLOBAL{ // Constants
    const int: KEY_HOME         <- <%!GDK_KEY_Home%>
    const int: KEY_END          <- <%!GDK_KEY_End%>
    const int: KEY_ESCAPE       <- <%!GDK_KEY_Escape%>
    const int: KEY_TAB          <- <%!GDK_KEY_Tab%>
    const int: KEY_INSERT       <- <%!GDK_KEY_Insert%>
    const int: KEY_DELETE       <- <%!GDK_KEY_Delete%>
    const int: KEY_PAGEUP       <- <%!GDK_KEY_Page_Up%>
    const int: KEY_PAGEDOWN     <- <%!GDK_KEY_Page_Down%>
    const int: KEY_PAUSE        <- <%!GDK_KEY_Pause%>
    const int: KEY_RETURN       <- <%!GDK_KEY_Return%>
    const int: KEY_UP           <- <%!GDK_KEY_Up%>
    const int: KEY_DOWN         <- <%!GDK_KEY_Down%>
    const int: KEY_LEFT         <- <%!GDK_KEY_Left%>
    const int: KEY_RIGHT        <- <%!GDK_KEY_Right%>
    const int: KEY_BACKSPACE    <- <%!GDK_KEY_BackSpace%>
    const int: KEY_F1           <- <%!GDK_KEY_F1%>
    const int: KEY_F2           <- <%!GDK_KEY_F2%>
    const int: KEY_F3           <- <%!GDK_KEY_F3%>
    const int: KEY_F4           <- <%!GDK_KEY_F4%>
    const int: KEY_F5           <- <%!GDK_KEY_F5%>
    const int: KEY_F6           <- <%!GDK_KEY_F6%>
    const int: KEY_F7           <- <%!GDK_KEY_F7%>
    const int: KEY_F8           <- <%!GDK_KEY_F8%>
    const int: KEY_F9           <- <%!GDK_KEY_F9%>
    const int: KEY_F10          <- <%!GDK_KEY_F10%>
    const int: KEY_F11          <- <%!GDK_KEY_F11%>
    const int: KEY_F12          <- <%!GDK_KEY_F12%>
    const int: KP_0             <- <%!GDK_KEY_KP_0%>
    const int: KP_1             <- <%!GDK_KEY_KP_1%>
    const int: KP_2             <- <%!GDK_KEY_KP_2%>
    const int: KP_3             <- <%!GDK_KEY_KP_3%>
    const int: KP_4             <- <%!GDK_KEY_KP_4%>
    const int: KP_5             <- <%!GDK_KEY_KP_5%>
    const int: KP_6             <- <%!GDK_KEY_KP_6%>
    const int: KP_7             <- <%!GDK_KEY_KP_7%>
    const int: KP_8             <- <%!GDK_KEY_KP_8%>
    const int: KP_9             <- <%!GDK_KEY_KP_9%>
    const int: KP_ENTER         <- <%!GDK_KEY_KP_Enter%>
    const int: KP_PLUS          <- <%!GDK_KEY_KP_Plus%>
    const int: KP_MINUS         <- <%!GDK_KEY_KP_Minus%>
    const int: KP_MULTIPLY      <- <%!GDK_KEY_KP_Multiply%>
    const int: KP_DIVIDE        <- <%!GDK_KEY_KP_Divide%>
    const int: KP_PERIOD        <- <%!GDK_KEY_KP_Decimal%>
    const int: KP_DELETE        <- <%!GDK_KEY_KP_Delete%>
    const int: KP_UP            <- <%!GDK_KEY_KP_Up%>
    const int: KP_DOWN          <- <%!GDK_KEY_KP_Down%>
    const int: KP_LEFT          <- <%!GDK_KEY_KP_Left%>
    const int: KP_RIGHT         <- <%!GDK_KEY_KP_Right%>
    const int: KP_HOME          <- <%!GDK_KEY_KP_Home%>
    const int: KP_END           <- <%!GDK_KEY_KP_End%>
    const int: KP_PAGEUP        <- <%!GDK_KEY_KP_Page_Up%>
    const int: KP_PAGEDOWN      <- <%!GDK_KEY_KP_Page_Down%>

    // Use these to match lowercase OR CTRL via keyTyped.state
    const int: KEY_a            <- <%!GDK_KEY_a%>
    const int: KEY_b            <- <%!GDK_KEY_b%>
    const int: KEY_c            <- <%!GDK_KEY_c%>
    const int: KEY_d            <- <%!GDK_KEY_d%>
    const int: KEY_e            <- <%!GDK_KEY_e%>
    const int: KEY_f            <- <%!GDK_KEY_f%>
    const int: KEY_g            <- <%!GDK_KEY_g%>
    const int: KEY_h            <- <%!GDK_KEY_h%>
    const int: KEY_i            <- <%!GDK_KEY_i%>
    const int: KEY_j            <- <%!GDK_KEY_j%>
    const int: KEY_k            <- <%!GDK_KEY_k%>
    const int: KEY_l            <- <%!GDK_KEY_l%>
    const int: KEY_m            <- <%!GDK_KEY_m%>
    const int: KEY_n            <- <%!GDK_KEY_n%>
    const int: KEY_o            <- <%!GDK_KEY_o%>
    const int: KEY_p            <- <%!GDK_KEY_p%>
    const int: KEY_q            <- <%!GDK_KEY_q%>
    const int: KEY_r            <- <%!GDK_KEY_r%>
    const int: KEY_s            <- <%!GDK_KEY_s%>
    const int: KEY_t            <- <%!GDK_KEY_t%>
    const int: KEY_u            <- <%!GDK_KEY_u%>
    const int: KEY_v            <- <%!GDK_KEY_v%>
    const int: KEY_w            <- <%!GDK_KEY_w%>
    const int: KEY_x            <- <%!GDK_KEY_x%>
    const int: KEY_y            <- <%!GDK_KEY_y%>
    const int: KEY_z            <- <%!GDK_KEY_z%>

    const int: KEY_A            <- <%!GDK_KEY_A%>
    const int: KEY_B            <- <%!GDK_KEY_B%>
    const int: KEY_C            <- <%!GDK_KEY_C%>
    const int: KEY_D            <- <%!GDK_KEY_D%>
    const int: KEY_E            <- <%!GDK_KEY_E%>
    const int: KEY_F            <- <%!GDK_KEY_F%>
    const int: KEY_G            <- <%!GDK_KEY_G%>
    const int: KEY_H            <- <%!GDK_KEY_H%>
    const int: KEY_I            <- <%!GDK_KEY_I%>
    const int: KEY_J            <- <%!GDK_KEY_J%>
    const int: KEY_K            <- <%!GDK_KEY_K%>
    const int: KEY_L            <- <%!GDK_KEY_L%>
    const int: KEY_M            <- <%!GDK_KEY_M%>
    const int: KEY_N            <- <%!GDK_KEY_N%>
    const int: KEY_O            <- <%!GDK_KEY_O%>
    const int: KEY_P            <- <%!GDK_KEY_P%>
    const int: KEY_Q            <- <%!GDK_KEY_Q%>
    const int: KEY_R            <- <%!GDK_KEY_R%>
    const int: KEY_S            <- <%!GDK_KEY_S%>
    const int: KEY_T            <- <%!GDK_KEY_T%>
    const int: KEY_U            <- <%!GDK_KEY_U%>
    const int: KEY_V            <- <%!GDK_KEY_V%>
    const int: KEY_W            <- <%!GDK_KEY_W%>
    const int: KEY_X            <- <%!GDK_KEY_X%>
    const int: KEY_Y            <- <%!GDK_KEY_Y%>
    const int: KEY_Z            <- <%!GDK_KEY_Z%>


    /// MASKS for event.state
    const int: SHIFT_MASK       <- <%!GDK_SHIFT_MASK%>
    const int: CONTROL_MASK     <- <%!GDK_CONTROL_MASK%>
}

///////// Application areas
struct GLOBAL {
their GtkWidget: window

me void: activate(their GtkApplication: app, me gpointer: user_data) <- <%{
    GtkWidget *topBox;
    getMetrics();
    window = gtk_application_window_new (app);
    const gchar* titleStr = thisApp.gui.title.data();
    gtk_window_set_title (GTK_WINDOW (window), titleStr);
    gtk_window_set_default_size (GTK_WINDOW (window), 1000, 700);
    g_signal_connect (window, "destroy", G_CALLBACK (close_window), NULL);
    gtk_container_set_border_width (GTK_CONTAINER (window), 0);
    topBox = gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
    gtk_container_add (GTK_CONTAINER (window), topBox);
    gtk_widget_show (topBox);
    ////////////////////  A d d  A p p l i c a t i o n   M e n u
    GtkWidget *boxForMenubar;
    GtkWidget *menubar;
    boxForMenubar = gtk_box_new(GTK_ORIENTATION_HORIZONTAL, 0);
    gtk_container_add (GTK_CONTAINER (topBox), boxForMenubar);
    gtk_widget_show (boxForMenubar);
    menubar = gtk_menu_bar_new ();
    gtk_box_pack_start(GTK_BOX(boxForMenubar), menubar, TRUE, TRUE, 0);
    gtk_widget_show (menubar);
    //thisApp.createAppMenu(menubar);
    /////////////////////  A d d   A p p l i c a t i o n   I t e m s
    GtkWidget *frame;
    GtkWidget *appArea;
    frame = gtk_box_new(GTK_ORIENTATION_VERTICAL, 0);
    gtk_box_pack_start(GTK_BOX(topBox), frame, TRUE, TRUE, 0);
    thisApp.createAppArea(frame);
    /////////////////////  A d d  S t a t u s   A r e a
    gtk_widget_show_all (window);
}%>
}
