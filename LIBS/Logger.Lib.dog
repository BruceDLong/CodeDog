//####### Logger library

requirements = [
    [require, Logger_implementation]
]
featuresNeeded = [List, Threads]

initCode = `
    logMgr.init(OFile)
`
struct LogLevel: inherits=<mode[Mesg, Info, Critical, FatalError, Warning, Debug]> {}
struct Logger{
    me string: logStr
    me bool: timeStampVisible
    me bool: logLevelVisible <- true
    me bool: threadIDVisible <- true
    me LogLevel: logLevel
    me Map<me string, me bool>: filters
    me Mutex: loggerMutex
    me void: showTimeStamp(me bool: show) <- {timeStampVisible <- show}
    me void: showLogLevel(me bool: show)  <- {logLevelVisible <- show}
    me void: showThreadID(me bool: show)  <- {threadIDVisible <- show}
    me void: highestLogLevelToShow(me LogLevel: lvl) <- {logLevel <- lvl}
    me void: addFilter(me string: filter, me bool: show) <- {filters[filter] <- show}
    me void: clearFilters()  <- {filters.clear()}
    me void: __LogEntry(me int: level, me string: category, me string: logText, me int: indent) <- {
        me string: logMsg
        if(logLevelVisible) {logMsg <+- ":" + LogLevelStrings[level].subStr(0,1)}
        if(timeStampVisible){logMsg <+- ":" + toString(currentTimeStamp())}
        if(threadIDVisible) {logMsg <+- ":" + thisThreadID()}
        withEach num in RANGE(0..indent){logMsg<+-"|   "}
        logMsg <+- ":" + logText
        logMgr.writeToLog(logMsg)
    }
    me void: LogEntry(me int: level, me string: category, me string: logText, me int: indent<-0) <- {
        me MutexMngr: MtxMgr{loggerMutex}
        __LogEntry(level, category, logText, indent)
    }
}

struct logManager{
    me string: logFileName  <- "codeDog.log"
    me Logger: logger
    me mode [ONone, OConsole, OFile, OBoth]: outputMode
    me bool: useLogFile
    me bool: useConsole
    //me void: assert(me string: condition)

    //ShowLogs(InfoLogs | MesgLogs | ...) // ALL_LOGS = the OR of all of them
    //HideLogs(InfoLogs | MesgLogs | ...)
    //RouteLogs(FILE) // Options: stdOut, A file, the platform's system logs, a string
    me void: openLogFile()
    me void: writeToLog(me string: txt)

    me void: init(me int: outMode) <- {
        outputMode <- outMode
        if(outputMode == OFile or outputMode == OBoth){useLogFile <- true; openLogFile();}
        else{useLogFile <- false}
        if(outputMode == OConsole or outputMode == OBoth){useConsole <- true;}
        else{useConsole <- false}
    }
}

struct GLOBAL{
    me logManager: logMgr

    void: logSeg(me string: logTxt) <- {me MutexMngr: MtxMgr{logMgr.logger.loggerMutex}; logMgr.logger.logStr <+- logTxt}
    void: logSegIn(me string: segID)<-{me MutexMngr: MtxMgr{logMgr.logger.loggerMutex}; logMgr.logger.logStr <+- "--"+segID+":["}
    void: logSegOut(me string: retID)<-{me MutexMngr: MtxMgr{logMgr.logger.loggerMutex}; if(retID!=""){retID<-":"+retID} logMgr.logger.logStr <+- "]"+retID}
    void: logSegStartCol(me string: logTxt, me int: startPos) <- {
        me MutexMngr: MtxMgr{logMgr.logger.loggerMutex};
        me int: strLength <- logMgr.logger.logStr.size()
        if(strLength < startPos){
            me int: lenDiff <- startPos - strLength
            withEach i in RANGE(0..lenDiff){
                logMgr.logger.logStr <+- " "
            }
        }
        logMgr.logger.logStr <+- logTxt
    }
    void: logSegClear() <- {me MutexMngr: MtxMgr{logMgr.logger.loggerMutex}; logMgr.logger.logStr <+- ""}
    void: logFlush() <- {me MutexMngr: MtxMgr{logMgr.logger.loggerMutex}; logMgr.logger.__LogEntry(Info, "", logMgr.logger.logStr, 0); logMgr.logger.logStr <- ""}

    me string: shortedStr(me string: str, me int: len) <- {
        if(str.size()<=len){return(str)}
        me int: endLen    <- len/3
        me int: startLen  <- len-endLen
        return(str.subStr(0, startLen) + " ### " +str.subStr(str.size()-endLen))
    }

    me void: log(me string: logText, me string: category<-"", me int: indent<-0)           <- {logMgr.logger.LogEntry(Mesg, category, logText, indent)}
    me void: logInfo(me string: logText, me string: category<-"", me int: indent<-0)       <- {logMgr.logger.LogEntry(Info, category, logText, indent)}
    me void: logCritical(me string: logText, me string: category<-"", me int: indent<-0)   <- {logMgr.logger.LogEntry(Critical, category, logText, indent)}
    me void: logFatalError(me string: logText, me string: category<-"", me int: indent<-0) <- {logMgr.logger.LogEntry(FatalError, category, logText, indent); exit(-1)}
    me void: logWarn(me string: logText, me string: category<-"", me int: indent<-0)       <- {logMgr.logger.LogEntry(Warning, category, logText, indent)}
    me void: logDbg(me string: logText, me string: category<-"", me int: indent<-0)        <- {logMgr.logger.LogEntry(Debug, category, logText, indent)}
}
