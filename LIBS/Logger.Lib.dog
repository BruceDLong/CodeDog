//####### Logger library

requirements = [
    [require, Logger_implementation]
]
featuresNeeded = [List, Threads]

initCode = `
    logMgr.init(OFile)
`

struct logger{
    me string: logStr
    me bool: isVisible
    me Mutex: loggerMutex
    me void: Show()             <- {isVisible <- true}
    me void: Hide()             <- {isVisible <- false}
    me void: Route(me string: routeSpec)
    me void: LogEntry(me string: loggerName, me string: logText) <- {me MutexMngr: MtxMgr{loggerMutex}; logMgr.writeToLog(loggerName+logText)}
//me void: LogEntry(me string: loggerName, me string: logText) <- {logMgr.writeToLog(loggerName+logText)}
}

struct logManager{
    me string: logFileName  <- "codeDog.log"
    me logger: Mesg
    me logger: Info
    me logger: Critical
    me logger: FatalError
    me logger: Warning
    me logger: Debug
    me mode [ONone, OConsole, OFile, OBoth]: outputMode
    me bool: useLogFile
    me bool: useConsole
    //me void: assert(me string: condition)

    //ShowLogs(InfoLogs | MesgLogs | ...) // ALL_LOGS = the OR of all of them
    //HideLogs(InfoLogs | MesgLogs | ...)
    //RouteLogs(FILE) // Options: stdOut, A file, the platform's system logs, a string
    me void: writeToLog(me string: txt)

    me void: init(me int: outMode) <- {
        outputMode <- outMode
        if(outputMode == OFile or outputMode == OBoth){useLogFile <- true; openLogFile();}
        else{useLogFile <- false}
        if(outputMode == OConsole or outputMode == OBoth){useConsole <- true;}
        else{useConsole <- false}
    }
}

struct GLOBAL{
    me logManager: logMgr

    void: logSeg(me string: logTxt) <- {logMgr.Mesg.logStr <+- logTxt}
    void: logSegIn(me string: segID)<-{logMgr.Mesg.logStr <+- "-"+segID+":["}
    void: logSegOut(me string: retID)<-{if(retID!=""){retID<-":"+retID} logMgr.Mesg.logStr <+- "]"+retID}
    void: logSegStartCol(me string: logTxt, me int: startPos) <- {
        me int: strLength <- logMgr.Mesg.logStr.size()
        if(strLength < startPos){
            me int: lenDiff <- startPos - strLength
            withEach i in RANGE(0..lenDiff){
                logMgr.Mesg.logStr <+- " "
            }
        }
        logMgr.Mesg.logStr <+- logTxt
    }
    void: logSegClear() <- {logMgr.Mesg.logStr <+- ""}
    void: logFlush() <- {me MutexMngr: MtxMgr{logMgr.Mesg.loggerMutex}; logMgr.writeToLog("MESG: "+logMgr.Mesg.logStr); logMgr.Mesg.logStr <- ""}
    //void: logFlush() <- {logMgr.writeToLog("MESG: "+logMgr.Mesg.logStr); logMgr.Mesg.logStr <- ""}
    //me void: assert(me string: condition) <- {}
}
