/////////// Add routines for Java
//TODO: make conversion for rand to GLOBAL.getRandInt & main return(0)
requirements = [
    [tagOneOf, Lang, [Java]],
    [require, CodeDog_platform_implementation]
]

interface={
    provides = [CodeDog_implementation]
    libFiles = []
    headers  = [java.lang.String, java.io.*, java.util.*,java.lang.Math.*, java.lang.Object, java.io.RandomAccessFile]
}


LibDescription ={
    useStatus   = dynamic
    description = 'Built in routines for Java'
}

initCode = ""
deinitCode = ""

struct GLOBAL{
    we GLOBAL: static_Global
    me Random: javaRandomVar

    me string: readFileAsString(me string: filePath)<- <%{
        try {
            DataInputStream dis = new DataInputStream(new FileInputStream(filePath));
            try {
                long len = new File(filePath).length();
                if (len > Integer.MAX_VALUE) return "";
                byte[] bytes = new byte[(int) len];
                dis.readFully(bytes);
                return new String(bytes, "UTF-8");
            } finally {
                dis.close();
            }
        } catch (IOException ioe) {
            System.out.println("Cannot read file " + ioe.getMessage());
            return "";
        }
    }%>

    me string: wideCharToMultibyte(me int:ch) <- <%{
        return ("");
    }%>

    void: trimLeftWS(their string: str)  <- <%{}%>
    void: trimRightWS(their string: str) <- <%{}%>
    me string: trimWS(their string: str) <- {
        trimLeftWS(str);
        trimRightWS(str)
        return(str)
    }
    me bool: doesFileExist(me string: filePath)<- <%{
        File f = new File(filePath);
        if(f.exists() && f.isFile()) {
            return true;
        }
        return false;

    }%>
    me string: replaceCharAt(me string: s, me int: pos, me char: c)<- <%{
       return s.substring(0,pos) + c + s.substring(pos+1);
    }%>
    me bool: isxdigit(me string: input) <- <%{
        try {
            Long.parseLong(input, 16);
            return true;
        }
        catch (NumberFormatException ex){return false;}
    }%>
    me void: print(me string: s)                                <- <%!%GSystem.out(%1)%>
    me void: exit(me int: val)                                  <- <%!%GSystem.exit(%1)%>
    me long: getCurrentTimeStamp()                              <- <%!%Gnew Date().getTime()%>
    me void: endFunc(me int: val)                               <- <%!%G %>
    me int: uniqueObjectID(their any:obj)                       <- <%!%GSystem.identityHashCode(%1)%>
    const int64: INT64_MAX                                     <- <%!%GLong.MAX_VALUE%>
    //const int64: INT64_MIN                                    <- <%!%GLLONG_MIN%>
    //const uint64: UINT64MAX                                   <- <%!%GLLONG_MAX%>
    //const uint64: UINT64MIN                                   <- <%!%GLLONG_MIN%>
    //const int32: INT_MAX                                      <- <%!%GLLONG_MAX%>
    //const int32: INT_MIN                                      <- <%!%GLLONG_MIN%>
    //const uint32: UINT_MAX                                    <- <%!%GLLONG_MAX%>
    //const uint32: UINT_MIN                                    <- <%!%GLLONG_MIN%>
    me timeOutID: callPeriodically(me string: varClass, me string: funcToCall, me int:microSecs): COMMAND_addImplements="Runnable:ToClass:%1" <- <%!%GScheduledExecutorService timerID=Executors.newSingleThreadScheduledExecutor(); timerID.scheduleAtFixedRate(%2, 0, %3, TimeUnit.MILLISECONDS)%>
}
struct GLOBAL{  /////////  STRING & CHAR CONVERTERS  ///////////////////
    me int: findString(me string: toSearch, me string: toFind)  <- <%!%G%1.indexOf(%2)%>
    me bool: isalpha(me char: ch)                               <- <%!%GCharacter.isLetter(%1)%>
    me bool: isalnum(me char: ch)                               <- <%!%GCharacter.isLetterOrDigit(%1)%>
    me bool: isdigit(me char: ch)                               <- <%!%GCharacter.isDigit(%1)%>
    me bool: isprint(me char: ch)                               <- <%!%GCharacter.isISOControl(%1)%>
    me bool: isspace(me char: ch)                               <- <%!%GCharacter.isWhitespace(%1)%>
    me char: toLower(me char: ch)                               <- {if(ch>="A" and ch<="Z"){ch <+- 32} return(ch)}
    me char: toUpper(me char: ch)                               <- {if(ch>="a" and ch<="z"){ch <-- 32} return(ch)}
}
struct GLOBAL{  /////////  MATH CONVERTERS  ////////////////////////////
    me int: abs(me int: val)                                    <- <%!%GMath.abs(%1)%>
    me int: atan2(me int: val1, me int: val2)                   <- <%!%GMath.atan2(%1, %2)%>
    me int: cos(me int: val)                                    <- <%!%GMath.cos(%1)%>
    me int: max(me int: val1, me int: val2)                     <- <%!%GMath.max(%1, %2)%>
    me int: min(me int: a, me int: b)                           <- <%!%GMath.min(%1, %2)%>
    me int: randInt(me int: val)                                <- <%!javaRandomVar.nextInt((int)(%1))%>
    me int: sin(me int: val)                                    <- <%!%GMath.sin(%1)%>
    me int: sqrt(me int: val)                                   <- <%!%GMath.sqrt(%1)%>
}
struct GLOBAL{  /////////  TYPE CONVERTERS  ////////////////////////////
    me float: convertToFloatVal()                               <- <%!%G (%1f)%>
    me int: convertToIntVal(me int: val)                        <- <%!%G (int)(%1)%>
    me timeValue: convertToL()                                  <- <%!%G%1L%>
    me timeValue: convertToLongVal()                            <- <%!%G%1.longValue()%>
    me timeValue: convertToTimeVal()                            <- <%!%G (long)(%1)%>
    me timeValue: double()                                      <- <%!%G(double)(%1)%>
    me int64: stoi(me string: str)                              <- <%!%GInteger.parseInt(%1)%>
    me long: stol(me string: S)                                 <- <%!%GLong.parseLong(%1)%>
    me int: toInt(me string: val)                               <- <%!%G Integer.parseInt(%1)%>
    me string: toString(me double: val)                         <- <%!%GDouble.toString(%1)%>
    me string: toString(me long: val)                           <- <%!%GLong.toString(%1)%>
    me string: toString(me int64: val)                          <- <%!%GString.valueOf(%1)%>
    me string: toString(me uint: val)                           <- <%!%GString.valueOf(%1)%>
    me string: toString(me int: val)                            <- <%!%GString.valueOf(%1)%>
    me string: toString(me uint64: val)                         <- <%!%GString.valueOf(%1)%>
}

struct timeValue{me long: timeValue}
struct DateValue{me long: DateValue}
struct timeOfDay{me long: timeOfDay}
struct DateTime{me long: DateTime}
struct random{me Random: random}
