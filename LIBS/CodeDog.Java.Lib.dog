/-///////// Add routines for Java
/-TODO: make conversion for rand to GLOBAL.getRandInt & main return(0)
requirements = [
    [tagOneOf, Lang, [Java]]
]

interface={
    provides = [CodeDog_implementation]
    libFiles = []
    headers  = [java.lang.String, java.io.*, java.util.logging.Level, java.util.logging.Logger, java.util.Random,
                java.util.Date, java.util.Map, java.util.TreeMap, java.util.ArrayList, java.util.Arrays,
                java.util.concurrent.*,java.lang.Math.*, java.util.Iterator, java.lang.Object, java.io.RandomAccessFile
               ]
}


LibDescription ={
    useStatus   = dynamic
    description = 'Built in routines for Java'
}

initCode = ""
deinitCode = ""


struct FileStream{
    me RandomAccessFile: RAFileStream <- NULL
    me bool: failureFlag <- false
    me void: open(me string: filename) <- <%{
        /-Log.d("GLOBAL", "    >>FileStream::open \n");
        try{
            RAFileStream = new  RandomAccessFile(filename, "rw"); 
            failureFlag=false;
        }catch(IOException e){failureFlag=true;}
    }%>
    me void: openAppend(me string: filename) <- <%{
    /-Log.d("GLOBAL", "    >>FileStream::openAppend \n");
    try{RAFileStream = new  RandomAccessFile(filename, "rw"); 
        RAFileStream.seek(RAFileStream.length()); 
        failureFlag=false;}
    catch(IOException e){failureFlag=true;}
    }%>
    me void: close() <- <%{try{RAFileStream.close();}catch(IOException e){failureFlag=true;}}%>
    me int:  getChar() <- <%{char ch=' '; try{ch = RAFileStream.readChar();}catch(IOException e){failureFlag=true;} return(ch);}%>
    me void: getLine(me string: S) <- <%{try{S = RAFileStream.readLine();}catch(IOException e){failureFlag=true;}}%>
    me void: write(me string: S) <- <%{try{RAFileStream.writeChars(S);}catch(IOException e){failureFlag=true;}}%>
    me bool: EOF() <- <%{boolean result=false; try{result=(RAFileStream.getFilePointer() < RAFileStream.length());}catch(IOException e){failureFlag=true;} return(result);}%>
    me bool: failure() <- <%{return(failureFlag);}%>
}

struct sessionFile{
    our FileStream: session <- NULL
    me void: openSession(me string: filename) <-{
    /-Log.d("GLOBAL", "    >>sessionFile::openSession \n");
    Allocate(session)
    session.openAppend(filename)
    }
    me void: closeSession() <- {session.close()}
    me void: writeEntry(me string: entry) <- {entry<-entry+"\n"; session.write(entry)}

    me bool: openToRead(me string: filename) <- {
        /-Log.d("GLOBAL", "    >>sessionFile::openToRead \n");
        Allocate(session)
        session.open(filename)
        if(session.failure()){print("Creating session file "+filename+"\n"); return(true)}
        return(false)
    }
    me string: readEntry() <- {me string: retVal; session.getLine(retVal); return(retVal)}
    me bool: eof() <- <%{
        boolean result = session.EOF();
        return(result);
    }%>
    me void: closeReading() <- {session.close()}
}

struct GLOBAL{
    we GLOBAL: static_Global
    me Random: javaRandomVar
    me string: readFileAsString(me string: filePath)<- <%{
        try {
            DataInputStream dis = new DataInputStream(new FileInputStream(filePath));
            try {
                long len = new File(filePath).length();
                if (len > Integer.MAX_VALUE) return "";
                byte[] bytes = new byte[(int) len];
                dis.readFully(bytes);
                return new String(bytes, "UTF-8");
            } finally {
                dis.close();
            }
        } catch (IOException ioe) {
            System.out.println("Cannot read file " + ioe.getMessage());
            return "";
        }
    }%>

    me bool: doesFileExist(me string: filePath)<- <%{
        File f = new File(filePath);
        if(f.exists() && f.isFile()) {
            return true;
        }
        return false;

    }%>
    me string: replaceCharAt(me string: s, me int: pos, me char: c)<- <%{
       return s.substring(0,pos) + c + s.substring(pos+1);
    }%>

    me int: randInt(me int: val) <- <%!javaRandomVar.nextInt((int)(%1))%>
    me int: abs(me int: val) <- <%!%GMath.abs(%1)%>
    me int: min(me int: a, me int: b) <- <%!%GMath.min(%1, %2)%>
    me void: print(me string: s)<- <%!%GSystem.out(%1)%>
    me void: exit(me int: val) <- <%!%GSystem.exit(%1)%>
    me bool: isdigit(me char: ch) <- <%!%GCharacter.isDigit(%1)%>
    me bool: isalpha(me char: ch) <- <%!%GCharacter.isLetter(%1)%>
    me bool: isspace(me char: ch) <- <%!%GCharacter.isWhitespace(%1)%>
    me bool: isalnum(me char: ch) <- <%!%GCharacter.isLetterOrDigit(%1)%>
    me int64: stoi(me string: str) <- <%!%GInteger.parseInt(%1)%>
    me bool: isprint(me char: ch) <- <%!%GCharacter.isISOControl(%1)%>
    me long: getCurrentTimeStamp() <- <%!%Gnew Date().getTime()%>
    me timeOutID: callPeriodically(me string: varClass, me string: funcToCall, me int:microSecs): COMMAND_addImplements="Runnable:ToClass:%1" <- <%!%GScheduledExecutorService timerID=Executors.newSingleThreadScheduledExecutor(); timerID.scheduleAtFixedRate(%2, 0, %3, TimeUnit.MILLISECONDS)%>
    me string: toString(me double: val) <- <%!%GDouble.toString(%1)%>
    me string: toString(me int: val) <- <%!%GInteger.toString(%1)%>
    me void: endFunc(me int: val) <- <%!%G %>
    me int: uniqueObjectID(their any:obj)  <- <%!%GSystem.identityHashCode(%1)%>
    me int: max(me int: val1, me int: val2) <- <%!%GMath.max(%1, %2)%>
    me int: sin(me int: val) <- <%!%GMath.sin(%1)%>
    me int: cos(me int: val) <- <%!%GMath.cos(%1)%>
    me int: atan2(me int: val1, me int: val2) <- <%!%GMath.atan2(%1, %2)%>
    me int: sqrt(me int: val) <- <%!%GMath.sqrt(%1)%>
    me timeValue: convertToTimeVal()                        <- <%!%G (long)(%1)%>
    me timeValue: convertToLongVal()                        <- <%!%G%1.longValue()%>
    me timeValue: convertToL()                              <- <%!%G%1L%>
    me int: convertToIntVal()                               <- <%!%G (int)(%1)%>
    me float: convertToFloatVal()                           <- <%!%G (%1f)%>
    me long: stol(me string: S)                             <- <%!%GLong.parseLong(%1)%>
}
struct timeValue{me long: timeValue}
struct DateValue{me long: DateValue}
struct timeOfDay{me long: timeOfDay}
struct DateTime{me long: DateTime}
struct random{me Random: random}
