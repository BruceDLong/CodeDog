//####### Native CodeDog library
LinuxTestBuild: Platform='Linux' Lang='CPP'  testMode='makeTests';

requirements = [
    [require, BigNumbers_implementation]
]
ProgramOrLibrary = "program"
TestSpec = "BigNumbersTest.dog"
//do ManageCmdLine(cmd)
struct GLOBAL{
    me BigInt: min(me BigInt: A, me BigInt: B) <-{
        if(A<=B){return(A)}
        return(B)
    }
    me BigInt: max(me BigInt: A, me BigInt: B) <-{
        if(A>=B){return(A)}
        return(B)
    }
    me bool: __lessThan(me FlexNum: LHS, me FlexNum: RHS) <- {return(LHS.val < RHS.val)}
    me bool: __lessOrEq(me FlexNum: LHS, me FlexNum: RHS) <- {return(LHS.val <= RHS.val)}
    me bool: __greaterThan(me FlexNum: LHS, me FlexNum: RHS) <- {return(LHS.val > RHS.val)}
    me bool: __greaterOrEq(me FlexNum: LHS, me FlexNum: RHS) <- {return(LHS.val >= RHS.val)}
    me bool: __isEqual(me FlexNum: LHS, me FlexNum: RHS) <- {return(LHS.val == RHS.val)}
    me bool: __isEqual(me FlexNum: LHS, me int: RHS) <- {return(LHS.val == RHS)}
    me bool: __notEqual(me FlexNum: LHS, me FlexNum: RHS) <- {return(LHS.val != RHS.val)}
    me string: toString(me FlexNum: FN)<-{return(FN.stringify())}
}
struct BigInt{}
struct BigFloat{
    me string: stringify()
}
struct BigFrac{}
struct FlexNum{
    //TODO: fix decPlaces
    me int: decPlaces <- -1
    me BigFrac: val

    void: setNumerator(me string: numerator)
    void: setDenominator(me string: denominator)
    me BigInt: getNumerator()
    me BigInt: getDenominator()
    void: normalize()

    me int: countDigits(me BigInt:num) <- {
        // TODO: make this use log10(num) + 1
        return(toString(num).size())
    }

    me FlexNum: __plus(me FlexNum: RHS) <- {
        me FlexNum: flexVal;
        flexVal.val         <- val + RHS.val
        me BigInt:flexDenom <- flexVal.getDenominator()
        flexVal.decPlaces   <- countDigits(flexDenom)
        return(flexVal)
    }
    me FlexNum: __plus(me int: RHS) <- {
        me FlexNum: flexVal;
        flexVal.val         <- val + RHS
        me BigInt:flexDenom <- flexVal.getDenominator()
        flexVal.decPlaces   <- countDigits(flexDenom)
        return(flexVal)
    }
    me FlexNum: __minus(me FlexNum: RHS) <- {
        // TODO: make this work for all cases
        me FlexNum: flexVal; flexVal.val <- val - RHS.val
        me BigInt:flexDenom <- flexVal.getDenominator()
        flexVal.decPlaces   <- countDigits(flexDenom)
        return(flexVal)
    }
    me FlexNum: __minus(me int: RHS) <- {
        // TODO: make this work for all cases
        me FlexNum: flexVal; flexVal.val <- val - RHS
        me BigInt:flexDenom <- flexVal.getDenominator()
        flexVal.decPlaces   <- countDigits(flexDenom)
        return(flexVal)
    }
    me FlexNum: __times(me FlexNum: RHS) <- {
        // TODO: make this work for all cases
        me FlexNum: flexVal; flexVal.val <- val * RHS.val
        me BigInt:flexDenom <- flexVal.getDenominator()
        flexVal.decPlaces   <- countDigits(flexDenom)
        return(flexVal)
    }
    me FlexNum: __times(me int: RHS) <- {
        // TODO: make this work for all cases
        me FlexNum: flexVal; flexVal.val <- val * RHS
        me BigInt:flexDenom <- flexVal.getDenominator()
        flexVal.decPlaces   <- countDigits(flexDenom)
        return(flexVal)
    }
    me FlexNum: __divide(me FlexNum: RHS) <- {
        me FlexNum: flexVal; flexVal.val <- val / RHS.val
        me BigInt:flexDenom <- flexVal.getDenominator()
        flexVal.decPlaces   <- countDigits(flexDenom)
        return(flexVal)
    }
    me FlexNum: __divide(me int: RHS) <- {
        me FlexNum: flexVal; flexVal.val <- val / RHS
        me BigInt:flexDenom <- flexVal.getDenominator()
        flexVal.decPlaces   <- countDigits(flexDenom)
        return(flexVal)
    }
    me FlexNum: __plusEqual(me FlexNum: RHS) <- {
        val <- val + RHS.val
        return(self)
    }
    me FlexNum: __plusEqual(me int: RHS) <- {
        val <- val + RHS
        return(self)
    }
    me FlexNum: __negate() <- {
        val <- - val
        return(self)
    }
    me string: stringify() <- {
        if(decPlaces == -1){
            return(toString(val))
        }
        me BigInt: N <- getNumerator()
        me BigInt: D <- getDenominator()
        me BigFloat: Q <- val
        me string: S   <- toString(Q)
        return(S)
    }
    void: fromString(me string: str) <- {
        me int: size <- str.size()
        me int: dotPos <- -1
        withEach idx in RANGE(0..size){
            if(str[idx]=="."){
                dotPos <- idx
                break()
            }
        }
        if(dotPos!=-1){
            decPlaces <- size-dotPos
            me string: numerator   <- str.subStr(0,dotPos)+ str.subStr(dotPos+1,size)
            me string: denominator <- "1"
            withEach n in RANGE(1..decPlaces){
                denominator <+- "0"
            }
            setNumerator(numerator)
            setDenominator(denominator)
        }
        else{
            val <- str
        }
    }
    // CONSTRUCTORS
    none: FlexNum(me string:str) <- {
        fromString(str)
    }
}
