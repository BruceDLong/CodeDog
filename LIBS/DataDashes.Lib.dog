// CodeDog graph dash for DashBoard

featuresNeeded = [Dashboard, Unicode]

// //// GRAPH SCALES
struct graphScale: inherits=dash{
    me bool:      isVisible
    me int:       ticksPerStep
    me bool:      textSlant
    me bool:      isDate
    me timeValue: step
    me GUI_Scalar:    tickStep
    me GUI_Scalar:       yOrig
    me GUI_Scalar:       xOrig
    me timeValue: lowVal
    me timeValue: hiVal
    me GUI_Scalar:       span
    me int:       tickOffset
    const int:    tickPadding  <- 8
    const int:    titlePadding <- 7
    me int:       zoomLvl
    me timeValue: divisor

    void: initScale(me string: titleStr, me bool: IsVisible, me int: TicksPerStep,  me bool: TextSlant, me bool: IsDate) <- {
        title        <- titleStr
        isVisible    <- IsVisible
        ticksPerStep <- TicksPerStep
        textSlant    <- TextSlant
        isDate       <- IsDate
    }
}

struct verticalScale: inherits=graphScale{
    void: draw(their GUI_ctxt: cr) <- {
        me GUI_Scalar:    XPoint  <- 0
        me GUI_Scalar:    YPoint  <- 0
        me deltaSize: size
        me int:       labelWidth <- 0
        me string:    label
        me string:    justify <- ""

        // AXIS VALUE LABELS
        withEach val in RANGE(0.. (hiVal-lowVal)/step+1){
            label <- dblToString(val*step+lowVal, 2)
            size <- getTextSize(label, styler.smallFont)
            YPoint <- yOrig-(val*step*span/(hiVal-lowVal)-size.height/3)
            if(textSlant){
                if (tickOffset > 0){XPoint <- xOrig+tickOffset+tickPadding+size.height/2}
                else               {XPoint <- xOrig+tickOffset-tickPadding; justify <- "right"}
                    size <- renderTextRotate(cr, label, styler.smallFont, XPoint, YPoint, -45, justify)
            }else{
                if (tickOffset > 0){XPoint <- xOrig+tickOffset+tickPadding}
                else               {XPoint <- xOrig+tickOffset-tickPadding-size.width}
                renderText(cr, label, styler.smallFont, XPoint, YPoint)
            }
            if(size.width > labelWidth){labelWidth <- size.width}
        }

        // AXIS TICK MARKS
        if(ticksPerStep>0){
            tickStep <- step/ticksPerStep
            cr.setLineWidth(1)
            withEach val in RANGE(0.. (hiVal-lowVal)/tickStep+1){
                if (tickOffset > 0){XPoint <- xOrig+3}
                else               {XPoint <- xOrig-3}
                YPoint <- yOrig - convertToGUIScalar(val)*tickStep*span/(hiVal-lowVal)
                cr.moveTo(XPoint, YPoint)
                cr.lineTo(XPoint+tickOffset, YPoint)
                }
            cr.strokeNow()
        }

        // SCALE TITLE
        me int: degree
        if (tickOffset > 0){XPoint <- xOrig+labelWidth+tickOffset+tickPadding+titlePadding; degree <- 90}
        else               {XPoint <- xOrig-labelWidth+tickOffset-tickPadding-titlePadding; degree <- -90}
        rotate(cr, XPoint, YPoint+span/2, degree)
        renderTextCentered(cr, title, styler.defaultFont, XPoint, YPoint+span/2)
        restore(cr)
        cr.strokeNow()
        width <- 40
    }

    void: setScale(me GUI_Scalar: Span, me timeValue: LowVal, me timeValue: HiVal, me int: Step, me GUI_Scalar: xPos, me GUI_Scalar: yPos, me int: TickOffset) <- {
        span         <- Span    // length of axis (width or height of graph)
        lowVal       <- LowVal
        hiVal        <- HiVal
        step         <- Step
        xOrig        <- xPos
        yOrig        <- yPos+span
        tickOffset   <- TickOffset
    }
}

struct horizontalScale: inherits=graphScale{
    void: draw(their GUI_ctxt: cr) <- {
        me GUI_Scalar:     XPoint <- 0
        me GUI_Scalar:     YPoint <- 0
        me deltaSize:  size
        me int:        labelHeight <- 0
        me int:        tickHeight  <- 0
        me string:     label
        me string:     justify <- ""
        me sysLocale:  loc <- unicodeMgr.SetLocale("en")
        me timeValue:  firstTick
        me timeValue:  remainder

        remainder <- hiVal % divisor
        firstTick <- hiVal - remainder - step*((hiVal-lowVal)/step-1)
        me string: firstTickHr <- unicodeMgr.getHour(firstTick, loc)

        if (step >= 1000*60*60*24) {
            while(firstTickHr != "24") {
                remainder <- remainder + 1000*60*60
                firstTick <- hiVal - remainder - step*((hiVal-lowVal)/step-1)
                firstTickHr <- unicodeMgr.getHour(firstTick, loc)
            }
        }

        // AXIS VALUE LABELS
        withEach val in RANGE(0.. (hiVal-lowVal)/step){
            if(isDate){label <- unicodeMgr.dateToIntlString(val*step+firstTick, hiVal-lowVal, loc)}
            else      {label <- dblToString(val*step+firstTick, 2)}
            size <- getTextSize(title, styler.smallFont)
            if (tickOffset > 0){tickHeight  <- tickOffset+tickPadding; YPoint <- yOrig+tickHeight}
            else               {tickHeight  <- tickOffset-tickPadding; YPoint <- yOrig+tickHeight+size.height}
            if(textSlant){
                if (tickOffset > 0){
                    XPoint <- xOrig+val*step*span/(hiVal-lowVal)-5
                    justify <- "right"
                    YPoint <- YPoint - 10
                }
                else{XPoint <- xOrig+val*step*span/(hiVal-lowVal)}
                size <- renderTextRotate(cr, label, styler.smallFont, XPoint, YPoint, -45, justify)
            }else{
                XPoint <- xOrig+(val*step + firstTick - lowVal)*span/(hiVal-lowVal)-5
                size <- renderTextCentered(cr, label, styler.smallFont, XPoint, YPoint+8)

            }
            cr.setLineWidth(1)
            cr.moveTo(XPoint, YPoint-10)
            cr.lineTo(XPoint, YPoint-4)
            cr.strokeNow()
            if(size.height > labelHeight){labelHeight <- size.height}
        }



        // SCALE TITLE
        size <- getTextSize(title, styler.defaultFont)
        if(tickOffset > 0){YPoint <- yOrig+tickHeight+labelHeight+titlePadding+titlePadding}
        else              {YPoint <- yOrig+tickHeight-labelHeight-titlePadding}
        renderText(cr, title, styler.defaultFont, span/2, YPoint)
        cr.strokeNow()
        height <- tickHeight+labelHeight+titlePadding+titlePadding
    }

    void: setScale(me GUI_Scalar: Span, me timeValue: LowVal, me timeValue: HiVal, me int: ZoomLvl, me GUI_Scalar: xPos, me GUI_Scalar: yPos, me int: TickOffset) <- {
        span         <- Span    // length of axis (width or height of graph)
        lowVal       <- LowVal
        hiVal        <- HiVal
        zoomLvl      <- ZoomLvl
        xOrig        <- xPos
        yOrig        <- yPos
        tickOffset   <- TickOffset
    me timeValue: t0  <- 1000*12
    me timeValue: t1  <- 1000*60*12
    me timeValue: t2  <- 1000*60*60
    me timeValue: t3  <- 1000*60*60*2
    me timeValue: t4  <- 1000*60*60*4
    me timeValue: t5  <- 1000*60*60*24
    me timeValue: t6  <- 1000*60*60*24*2
    me timeValue: t7  <- 1000*60*60*24*5
    me timeValue: t8  <- 1000*60*60*24*10
    me timeValue: t9  <- 1000*60*60*24*15
    me timeValue: t10 <- 1000*60*60*12

        me List<me timeValue>: stepTable    <- [t0,t1,t2,t3,t4, t5,t6,t7,t8,t9, 2592000000, 6307200000]
        me List<me timeValue>: divisorTable <- [t0,t1,t2,t3,t4,t10,t6,t7,t8,t9, 2592000000, 6307200000]

        step    <- stepTable[zoomLvl]
        divisor <- divisorTable[zoomLvl]
    }
}
// //// TOP BAR TOGGLES
struct circleButton: inherits=dash{
    me GUI_Scalar:    radius
    me string: symbol
    me double: stickLen

    me void: drawCircleBtn(their GUI_ctxt: cr) <- {
        if (symbol=="+") {
            cr.setLineWidth(1)
            cr.moveTo(posX + radius, posY + radius/4)
            cr.lineTo(posX + radius, posY + 7*radius/4)
            cr.strokeNow()
        }
        if (symbol=="+" or symbol=="-") {
            cr.setLineWidth(1)
            cr.moveTo(posX + radius/4, posY + radius)
            cr.lineTo(posX + 7*radius/4, posY + radius)
            cr.strokeNow()
        }
        if (symbol=="<") {
            cr.setLineWidth(1)
            cr.moveTo(posX + radius, posY + radius - stickLen * sqrt(2.0))
            cr.lineTo(posX + radius - stickLen * sqrt(2), posY + radius)
            cr.lineTo(posX + radius, posY + radius + stickLen * sqrt(2.0))
            cr.strokeNow()
        }
        if (symbol==">") {
            cr.setLineWidth(1)
            cr.moveTo(posX + radius, posY + radius - stickLen * sqrt(2.0))
            cr.lineTo(posX + radius + stickLen * sqrt(2), posY + radius)
            cr.lineTo(posX + radius, posY + radius + stickLen * sqrt(2.0))
            cr.strokeNow()
        }
        cr.circle(posX + radius, posY + radius, radius)
        cr.strokeNow()
    }

    me void: initCircleBtn(me GUI_Scalar: PosX, me GUI_Scalar: PosY, me GUI_Scalar: Radius, me string: Symbol) <- {
        posX   <- PosX
        posY   <- PosY
        radius <- Radius
        width  <- 2*radius
        height <- 2*radius
        symbol <- Symbol
        stickLen <- radius/3
    }

    // Click functionality is inside graph clicks
    me bool: primaryDn(their GUI_ButtonEvent: event) <- {
        if (isTouching(event.x, event.y)) {return(true)}
        else {return(false)}
    }
    me bool: primaryUp(their GUI_ButtonEvent: event) <- {
        if (isTouching(event.x, event.y)) {return(true)}
        else {return(false)}
    }
}

struct zoomWidget: inherits=dash{
    me circleButton: zoomInBtn
    me circleButton: zoomOutBtn
    me string:       label
    me GUI_Scalar:          radius
    me GUI_Scalar:          labelX
    me int:          maxLabelLength

    void: draw(their GUI_ctxt: cr) <- {
        zoomOutBtn.initCircleBtn(posX, posY, radius, "-")
        zoomOutBtn.drawCircleBtn(cr)
        labelX <- posX + 3*radius
        renderTextCentered(cr, label, styler.smallFont, labelX + maxLabelLength/2, posY + 3*radius/2)
        cr.strokeNow()
        zoomInBtn.initCircleBtn(labelX + maxLabelLength + radius, posY, radius, "+")
        zoomInBtn.drawCircleBtn(cr)
    }

    void: initZoomWidget(me GUI_Scalar: PosX, me GUI_Scalar: PosY, me string: Label, me GUI_Scalar: Radius, me int: MaxLabelLength) <- {
        posX  <- PosX
        posY  <- PosY
        label <- Label
        radius <- Radius
        maxLabelLength <- MaxLabelLength
    }
}

struct streamToggle: inherits=dash{
    me circleButton: left
    me circleButton: right
    me List<me string>: dataStreamsTitleTbl
    me string: dispMode
    me int: state
    me string: label
    me deltaSize: labelSize
    me int: radius
    me int: maxLabelLength
    me double: dataValue

    void: draw(their GUI_ctxt: cr) <- {
        if (state != 0) {
            renderTextCentered(cr, dblToString(dataValue, 0), styler.titleFont, posX + 3*radius + maxLabelLength/2, posY + 45)
            renderTextCentered(cr, dispMode, styler.smallFont, posX + 3*radius + maxLabelLength/2, posY + 45 + 15)
            if(dispMode == "Now"){
                me string: CIText <- " +- " + dblToString(30, 0)
                renderTextCentered(cr, CIText, styler.smallFont, posX + 3*radius + maxLabelLength/2+ 30, posY + 40)
            }
        }
        label <- dataStreamsTitleTbl[state]
        left.drawCircleBtn(cr)
        labelSize <- getTextSize(label, styler.smallFont)
        renderTextCentered(cr, label, styler.smallFont, posX + 3*radius + maxLabelLength/2, posY + labelSize.height)
        right.drawCircleBtn(cr)
        cr.strokeNow()
    }

    void: initStreamToggle(me GUI_Scalar: PosX, me GUI_Scalar: PosY, me List<me string>: DataStreamsTitleTbl, me int: State) <- {
        posX <- PosX
        posY <- PosY
        radius <- 10
        width  <- 140
        height <- 60
        maxLabelLength <- 75
        dataStreamsTitleTbl <- DataStreamsTitleTbl
        state <- State
        dispMode<-"Now"
        label <- dataStreamsTitleTbl[state]
        dataValue <- 0

        left.initCircleBtn(posX, posY, radius, "<")
        right.initCircleBtn(posX + 3*radius + maxLabelLength + radius, posY, radius, ">")
    }

    void: incrementStreamState(me int: Increment, me int: otherState) <- {
        if (state + Increment < 0) {state <- dataStreamsTitleTbl.size()-1}
        else if (state + Increment >= dataStreamsTitleTbl.size()) {state <- 0}
        else {state <- state + Increment}
        if (state == otherState) {incrementStreamState(Increment, otherState)}
    }

    void: nextDispMode() <- {
        if(dispMode=="Avg"){dispMode<-"Now"}
        else if(dispMode=="Now"){dispMode<-"Avg"}
    }

    // Click functionality is inside graph clicks
    me bool: primaryDn(their GUI_ButtonEvent: event) <- {
        if (isTouching(event.x, event.y)) {return(true)}
        else {return(false)}
    }
    me bool: primaryUp(their GUI_ButtonEvent: event) <- {
        if (isTouching(event.x, event.y)) {return(true)}
        else {return(false)}
    }
}

struct graphTitleWidget: inherits=dash{
    me string: titleTxt
    me bool:   isVisible

    void: draw(their GUI_ctxt: cr, me GUI_Scalar: PosX, me GUI_Scalar: PosY) <- {
        posX     <- PosX
        posY     <- PosY
        renderTextCentered(cr, titleTxt, styler.titleFont, posX, posY)
        cr.fillNow()
    }

    void: initGraphTitle(me string: TitleTxt, me bool: IsVisible) <- {
        titleTxt  <- TitleTxt
        isVisible <- IsVisible
        height <- 20    // This should be text height + padding
    }
}

struct timeStepInterval{their graph: parentWidget me timeValue: start me timeValue: end me timeValue: stepSize}

struct GraphDataStream {
    me string: title
    our Map<me timeValue, me datum>:: dataMap
    me cdColor: lineColor
    me cdColor: fillColor
    me bool: isVisible <- false
    me bool: hasGradient <- true
    me double: screenDataAvg

    void: clearInterval(me double: start, me double: end) <- {
        itr Map<me timeValue, me datum>: startItr <- dataMap.find(start)
        itr Map<me timeValue, me datum>: endItr   <- dataMap.find(end)
        dataMap.eraseInterval(startItr, endItr)
    }
}

struct DataGen{
    me int: lowVal
    me int: highVal
    our GraphDataStreamSources: dataStreamSrcs
}

struct GraphDataStreamSources{
    me List<our GraphDataStream>: dataStreams
    their DataGen: parentDataSource
    me timeStepInterval: requestedInterval
    me bool: dataRangeChangeRequested

    void: clearInterval(me double: start, me double: end) <- {
        withEach dataStream in dataStreams {
            dataStream.clearInterval(start, end)
        }
    }
}
struct dataCacheStream {  // Use this to gather data and transfer it to the GUI thread
    me string: title
    me Map<me timeValue,me datum>: dataMap
}
struct dataCacheStreams {
    me List<our dataCacheStream>: dataStreams
    void: addNewStream(me string: ID) <- {
        our dataCacheStream:: dcStream
        dcStream.title <- ID
        dataStreams.append(dcStream)
    }
    void: setDataPoint(me int: streamID, me timeValue: timeStamp, me datum: value) <- {
        dataStreams[streamID].dataMap[timeStamp] <- value
    }
}
struct dataPlotter {
    me datum:      prevY
    me GUI_Scalar: prevX
    me cdColor:    plotColor

    void: moveTo(their GUI_ctxt: cr, me GUI_Scalar: toX, me datum:toY) <- {
        prevY <- toY
        prevX <- toX
        if(prevY.confidenceInterval == 0){cr.moveTo(prevX, prevY.value)}
    }
    void: lineTo(their GUI_ctxt: cr, me GUI_Scalar:toX, me datum: toY) <- {
        if(prevY.confidenceInterval == 0){
            cr.setColor(plotColor)
            cr.lineTo(toX, toY.value)
        }
        else{
            me double: maxConfLvl   <- max(prevY.confidenceInterval, toY.confidenceInterval)
            me double: minConfLvl   <- min(prevY.confidenceInterval, toY.confidenceInterval)
            me int: numOfSegs       <- convertToIntVal(maxConfLvl/5)
            me double: maxAlpha     <- 1/(maxConfLvl/10)*256
            me double: alphaDelta   <- maxAlpha/numOfSegs*2
            me double: alpha        <- alphaDelta
            me int: widthOfLftSegs  <- convertToIntVal(toY.confidenceInterval/numOfSegs)
            me int: widthOfRtSegs   <- convertToIntVal(prevY.confidenceInterval/numOfSegs)
            me GUI_Scalar: crntLftY <- convertToGUIScalar(prevY.value - prevY.confidenceInterval/2)
            me GUI_Scalar: crntRtY  <- convertToGUIScalar(toY.value - toY.confidenceInterval/2)
            withEach seg in RANGE(0..numOfSegs){
                cr.setRGBA(plotColor.red, plotColor.green, plotColor.blue, alpha)
                cr.moveTo(prevX, crntLftY)
                cr.lineTo(toX, crntRtY)
                cr.lineTo(toX, crntRtY+widthOfRtSegs)
                cr.lineTo(prevX, crntLftY+widthOfLftSegs)
                cr.lineTo(prevX, crntLftY)
                cr.fillNow()
                crntLftY <- crntLftY + widthOfLftSegs
                crntRtY  <- crntRtY + widthOfRtSegs
                if (seg < numOfSegs/2){alpha <- alpha+alphaDelta}
                else {alpha <- alpha-alphaDelta}
            }
        }
        prevY <- toY
        prevX <- toX
    }
}
struct graph: inherits=dash COMMAND_addCallProxy=["bundledArgs:applyDataRange"]{
    our GraphDataStreamSources: dataStreamSrcs
    me List<me string>: dataStreamsTitleTable <- ["None"]
    me double:        screenDataTotal
    me int:          screenDataCount
    me timeValue:    timeInterval
    me timeValue:    crntRightSide
    me timeValue:    prevTimeGap
    me dataPlotter:  plotter

    me graphTitleWidget: graphTitle
    me verticalScale:   leftScale
    me horizontalScale: bottomScale
    me verticalScale:   rightScale
    me horizontalScale: topScale

    me mode[sAutomatic, sManual]:scrollMode
    me zoomWidget: zoomToggle
    me int: zoomLevel
    me timeValue: t0 <- 1000*60
    me timeValue: t1 <- 1000*60*60
    me timeValue: t2 <- 1000*60*60*6
    me timeValue: t3 <- 1000*60*60*12
    me timeValue: t4 <- 1000*60*60*24
    me timeValue: t5 <- 1000*60*60*24*7
    me timeValue: t6 <- 1000*60*60*24*14
    me List<me timeValue>: zoomTable <- [t0,t1,t2,t3,t4,t5,t6, 2592000000, 5184000000, 7776000000, 15552000000, 31536000000]
    me List<me string>: labelTable   <-   ["1 Minute","1 Hour","6 Hours","12 Hours","24 Hours","One Week","Two Weeks","30 Days","60 Days","90 Days","180 Days","One Year"]
    me streamToggle: streamToggle1
    me streamToggle: streamToggle2
    me bool: gradients

    void: update() <- {}

    void: setPos(me GUI_Scalar:x, me GUI_Scalar:y, me GUI_Scalar: extCursor) <- {
        posIsSet <- true
        extC     <- extCursor
        extX     <- posX+width
        extY     <- posY+height
    }

    void: draw(their GUI_ctxt: cr) <- {
        me timeValue:  rightGraphTime
        me timeValue:  leftGraphTime
        me bool:       firstTime
        me GUI_Scalar: XPoint
        me datum:      YPoint
        me GUI_Scalar: YOrig <- posY + height

        me GUI_Scalar: curX <- posX
        me GUI_Scalar: curY <- posY
        me GUI_Scalar: curW <- width
        me GUI_Scalar: curH <- height

        me timeValue: crntTimeStamp <- getCurrentTimeStamp()
        if (crntRightSide > crntTimeStamp and scrollMode != sAutomatic){
            prevTimeGap  <- crntTimeStamp
            scrollMode <- sAutomatic
        }
        if (scrollMode==sAutomatic) {
            crntRightSide  <- crntRightSide + (crntTimeStamp-prevTimeGap)
            prevTimeGap  <- crntTimeStamp
        }
        rightGraphTime <- crntRightSide
        leftGraphTime  <- crntRightSide - timeInterval

        cr.setColor(styler.primaryTextColor)
        if(graphTitle.isVisible) {
            graphTitle.draw(cr, curX + curW/2, curY)
            curY <- curY + graphTitle.height
            curH <- curH - graphTitle.height
        }

        if(leftScale.isVisible){
            leftScale.setScale(curH, 0, 400, 50, curX, curY, -4)
            leftScale.draw(cr)
            curX <- curX + leftScale.width
            curW <- curW - leftScale.width
        }
        if(topScale.isVisible){
            topScale.setScale(curW, 0, 100, zoomLevel, curX, curY, -4)
            topScale.draw(cr)
            curY <- curY + topScale.height
            curH <- curH - topScale.height
        }
        if(rightScale.isVisible){
            rightScale.setScale(curH, 0, 10000000, 50, curX+curW-50, curY, 4)
            rightScale.draw(cr)
            curW <- curW - rightScale.width
        }
        if(bottomScale.isVisible){
            bottomScale.setScale(curW, leftGraphTime, rightGraphTime, zoomLevel, curX, height-50, 4)
            bottomScale.draw(cr)
            curH <- curH - bottomScale.height
        }

        withEach dstream in RANGE(0.. dataStreamSrcs.dataStreams.size()) {
            if (streamToggle1.state == dstream + 1 or streamToggle2.state == dstream + 1) {dataStreamSrcs.dataStreams[dstream].isVisible <- true}
            else {dataStreamSrcs.dataStreams[dstream].isVisible <- false}
            if (streamToggle1.state == 0 or streamToggle2.state == 0) {dataStreamSrcs.dataStreams[dstream].hasGradient <- true}
            else {dataStreamSrcs.dataStreams[dstream].hasGradient <- false}
        }

        withEach dataStream in dataStreamSrcs.dataStreams{
            screenDataTotal <- 0
            screenDataCount <- 0
            XPoint          <- 0
            YPoint.value    <- 0

            if (dataStream.isVisible) {
                me double: dblWidth <- curW
                me double: dblHeight <- curH
                cr.setLineWidth(2)
         /*       firstTime      <- true

                ///// Gradient - requires duplicate 'invisible' data plot as boundary
                if (dataStream.hasGradient) {
                    withEach point in dataStream.dataMap from leftGraphTime to rightGraphTime {
                        XPoint <- (point_key-leftGraphTime)*dblWidth/timeInterval + curX
                        YPoint.value <- YOrig - (point.value - leftScale.lowVal)*dblHeight/(leftScale.hiVal - leftScale.lowVal)
                        if(firstTime){
                            cr.setColor(styler.bkGndColor)
                            cr.moveTo(XPoint, YOrig)
                            cr.lineTo(XPoint, YPoint)
                            firstTime<-false
                        } else {cr.lineTo(XPoint, YPoint)}
                    }
                    cr.lineTo(XPoint, YOrig)
                    their guiFillPattern: linGrad
                    linGrad.init(curX, YOrig-curH, curX, YOrig)
                    linGrad.AddColorStopRGBA(0, dataStream.lineColor, 255)
                    linGrad.AddColorStopRGBA(1.0, styler.bkGndColor, 255)
                    cr.setFillPattern(linGrad)
                    cr.fillNow()
                    cr.strokeNow()
                    linGrad.destroy()
                }*/

                ///// Visible data plot
                firstTime <- true
                if (dataStream.dataMap != NULL) {
                    withEach point in dataStream.dataMap from leftGraphTime to rightGraphTime {
                        XPoint        <- convertToGUIScalar((point_key-leftGraphTime)*dblWidth/timeInterval) + curX
                        YPoint.value  <- YOrig - convertToGUIScalar((point.value - leftScale.lowVal)*dblHeight)/convertToGUIScalar(leftScale.hiVal - leftScale.lowVal)
                        YPoint.confidenceInterval <- point.confidenceInterval
                        if(firstTime){
                            plotter.plotColor <- dataStream.lineColor
                            plotter.moveTo(cr, XPoint, YPoint)
                            firstTime<-false
                        } else {plotter.lineTo(cr, XPoint, YPoint)}
                        screenDataTotal <- screenDataTotal + point.value
                        screenDataCount <- screenDataCount + 1
                    }
                }
                cr.strokeNow()

                if (screenDataCount > 0) {dataStream.screenDataAvg <- screenDataTotal / screenDataCount}
                else {dataStream.screenDataAvg <- 0}
                if(streamToggle1.label == dataStream.title) {
                    if(streamToggle1.dispMode == "Avg"){streamToggle1.dataValue <- dataStream.screenDataAvg}
                    else if(streamToggle1.dispMode == "Now"){
                        me datum: getNow <- dataStream.dataMap.lower_bound(crntTimeStamp-1000).val
                        streamToggle1.dataValue <- getNow.value
                    }
                }
                else if(streamToggle2.label == dataStream.title) {
                    if(streamToggle2.dispMode == "Avg"){streamToggle2.dataValue <- dataStream.screenDataAvg}
                    else if(streamToggle2.dispMode == "Now"){
                        me datum: getNow <- dataStream.dataMap.lower_bound(crntTimeStamp-1000).val
                        streamToggle2.dataValue <- getNow.value
                    }
                }
            }
        }

        if (leftGraphTime < crntTimeStamp and rightGraphTime > crntTimeStamp){
            cr.setRGBA(125, 125, 200, 180)
            cr.setLineWidth(convertToFloatVal(0.75))
            me GUI_Scalar: nowX <- convertToGUIScalar((crntTimeStamp-leftGraphTime)*curW/timeInterval) + curX
            cr.moveTo(nowX, curY)
            cr.lineTo(nowX, curY+curH)
            cr.strokeNow()
        }

        cr.setColor(styler.primaryTextColor)
        cr.setLineWidth(1)
        zoomToggle.draw(cr)
        streamToggle1.draw(cr)
        streamToggle2.draw(cr)
    }


    void: requestDataRange(me timeValue: start, me timeValue: end, me timeValue: stepSize) <-{
        dataStreamSrcs.requestedInterval.parentWidget <- self
        dataStreamSrcs.requestedInterval.start        <- start
        dataStreamSrcs.requestedInterval.end          <- end
        dataStreamSrcs.requestedInterval.stepSize     <- stepSize
        if (stepSize==0) {print("\nInvalid Step size in graph.requestDataRange()\n"); exit(1);}
        dataStreamSrcs.dataRangeChangeRequested       <- true
    }
    void: applyDataRange(me timeStepInterval: req, our dataCacheStreams: newData) <- {
        withEach dcStream in newData.dataStreams{
            me string: streamID <- dcStream.title
            withEach graphDataCache in dataStreamSrcs.dataStreams{
                if(streamID == graphDataCache.title){
                    withEach dataPnt in dcStream.dataMap{
                        graphDataCache.dataMap[dataPnt_key] <- dataPnt
                    }
                    break()
                }
            }
        }
        crntRightSide <- req.end
        timeInterval  <- req.stepSize
        requestRedraw()
    }

    me void: initGraph(me string: titleStr, me GUI_Scalar: PosX, me GUI_Scalar: PosY, me bool: Gradients)<- {
        posX         <- PosX
        posY         <- PosY
        gradients    <- Gradients
        zoomLevel    <- 1
        title        <- 'Graph'

        prevTimeGap  <- 0

        withEach dataStream in dataStreamSrcs.dataStreams {
            dataStreamsTitleTable.append(dataStream.title)
        }

        timeInterval <- zoomTable[zoomLevel]
        zoomToggle.initZoomWidget(90, 5, labelTable[zoomLevel], 10, 75)
        crntRightSide <- getCurrentTimeStamp()
        prevTimeGap  <- crntRightSide

            leftScale.initScale("Blood Glucose Level (ml/dl)", true, 1, false, false)
            rightScale.initScale("rightScale!", false, 1, false, false)
            bottomScale.initScale("Time", true, 3, false, true)
            topScale.initScale("topScale", false, 1, false, false)
        graphTitle.initGraphTitle(titleStr, false)
        streamToggle1.initStreamToggle(250, 5, dataStreamsTitleTable, 1)
        streamToggle2.initStreamToggle(400, 5, dataStreamsTitleTable, 0)

        requestDataRange(crntRightSide-timeInterval, crntRightSide, timeInterval)
    }

    void: incrementZoomLevel(me int: change) <- {
        if (zoomLevel + change >= 0 and zoomLevel + change < zoomTable.size()) {
            zoomLevel <- zoomLevel + change
            me timeValue: tmpTimeInterval <- zoomTable[zoomLevel]
            zoomToggle.label <- labelTable[zoomLevel]
            requestDataRange(crntRightSide-tmpTimeInterval, crntRightSide, tmpTimeInterval)
        }
    }

    // Click and drag data horizontally
    me mode[still, fingerPressed, pullScrolling]: scrollState
    me GUI_Scalar: prevX
    me GUI_Scalar: deltaX <- 0
    me int: moveThreshold <- 2
    me GUI_Scalar: crntX
    me GUI_Scalar: crntY

    me bool: primaryDn(their GUI_ButtonEvent: event) <- {
        if (zoomToggle.zoomInBtn.primaryDn(event)) {}
        else if (zoomToggle.zoomOutBtn.primaryDn(event)) {}
        else {
            crntX <- event.x - posX
            crntY <- event.y - posY
            if (crntX <= 0 or crntX >= width or crntY <= 0 or crntY >= height) {return(false)}
            if (scrollState==still) {
                scrollState <- fingerPressed
                prevX <- event.x
            }
        }
        return(true)
    }

    me bool: primaryUp(their GUI_ButtonEvent: event) <- {
        me bool: retVal <- false
        if (zoomToggle.zoomInBtn.primaryUp(event)) {incrementZoomLevel(-1)}
        else if (zoomToggle.zoomOutBtn.primaryUp(event)) {incrementZoomLevel(1)}
        else if (streamToggle1.left.primaryUp(event)) {streamToggle1.incrementStreamState(-1, streamToggle2.state)}
        else if (streamToggle1.right.primaryUp(event)) {streamToggle1.incrementStreamState(1, streamToggle2.state)}
        else if (streamToggle1.primaryUp(event)) {streamToggle1.nextDispMode()}
        else if (streamToggle2.left.primaryUp(event)) {streamToggle2.incrementStreamState(-1, streamToggle1.state)}
        else if (streamToggle2.right.primaryUp(event)) {streamToggle2.incrementStreamState(1, streamToggle1.state)}
        else if (streamToggle2.primaryUp(event)) {streamToggle2.nextDispMode()}
        scrollState <- still
        return(retVal)
    }

    me bool: mouseMoved(their GUI_MotionEvent: event) <- {
        deltaX <- event.x - prevX
        prevX <- event.x
        if (scrollState==fingerPressed and abs(deltaX) > moveThreshold) {
            scrollState <- pullScrolling
            scrollMode <- sManual
            deltaX <- 0
        }
        if (scrollState==pullScrolling) {
            me timeValue: tmpCrntRightSide <- crntRightSide - convertToTimeVal(deltaX)*timeInterval/convertToTimeVal(width)
            requestDataRange(tmpCrntRightSide-timeInterval, tmpCrntRightSide, timeInterval)

            crntRightSide <- tmpCrntRightSide
            timeInterval  <- timeInterval
            requestRedraw()
        }
        return(true)
    }
}
struct graphWidget: inherits=DashboardWidget{
    void: requestRedraw() <- {
        markDirtyArea(canvas, 0,0, widgetWidth(canvas), widgetHeight(canvas))
    }
    their GUI_canvas: init(me string: label) <- {
        title   <- 'DashboardWidget.'+label
        canvas  <- thisApp.gui.newCanvas()
        canvas.setParent(self)
        thisApp.gui.setWidgetSize(canvas, 400, 500)  // This is to make ANdroid canvas size
        //    their scrollerWidget:: scrollView  <- ()
        //    their GUI_ScrollingWindow: scrollerFrame <- scrollView.makeScrollerWidget(canvas)
        //    managedWidget <- scrollerFrame
        //    managedWidget <- makeYStack("")
        //    addToContainer(managedWidget, canvas)
        managedWidget <- canvas
        EventDispatcher.registerWidgetForEventDispatcher(canvas, self)
        return(managedWidget)
    }
}
