// CodeDog GUI toolikt
requirements = [
    [require, GUI_ToolKit_implementation]
]

featuresNeeded = [Threads]

// Set up a complete application: fonts, colors, a window/frame with a menu, toolbar, app area and optionally a statusbar.
// Boilerplate details such as resizing windows, etc are taken care of in the best way for each platform.

struct cdColor{
    me uint: red
    me uint: green
    me uint: blue
    me uint: alpha <- 255
    none: cdColor(their cdColor: rgbPart, me uint: Alpha)<-{
        red   <- rgbPart.red
        green <- rgbPart.green
        blue  <- rgbPart.blue
        alpha <- Alpha
    }
}

struct deltaSize{me int: width    me int: height}
struct GUI_rect{me double: x1 me double: y1 me double: x2 me double: y2}
struct GUI_item{}
struct GUI_Frame{}
struct GUI_container{}
struct INK_Image{}
struct GUI_callback{}
struct GUI_Scalar{}
struct GUI_Text{}
//struct GDK_KEY_Down // TODO: check if this needs to be converted to codeDog type

struct fontSpec{
    me string: name
    me int: size
    me flag: scaled
    me int: pp  // The non-scaled value
    me int: height

    none: fontSpec(me string: initName, me string: initSize) <- {
        name      <- initName
        size      <- stoi(initSize)
        pp        <- size
        height    <- getTextSize("gyjqGYM", self).height
    }
}

struct Styler{
    #include LIBS/x11ColorsRGB.txt
}

struct GLOBAL{
    me APP: thisApp
    me Map<me string, me INK_Image>: InkImgCache
    me float: displayDensity
    me double: scaleFactor <- 1.0
    me int: windowW
    me int: windowH

    // Call setwindowMetrics() early in the top level draw() to populate window metrics
    void: setwindowMetrics()<-{windowW <- widgetWidth(drawing_area); windowH <- widgetHeight(drawing_area)}
}

///////// Widgets and events
struct GUI_WindowEvent{}
struct GUI_DataEvent{}
struct GUI_TimeEvent{}
struct GUI_UserEvent{}
struct GUI_DrawEvent{}

// decor(ations) are like light weight widgets. They have only draw().

struct decor{
    void: draw(their GUI_ctxt: cr) <- {}
}

struct arrow: inherits=decor{
    me GUI_Scalar: startX
    me GUI_Scalar: startY
    me GUI_Scalar: endX
    me GUI_Scalar: endY

    me void: draw(their GUI_ctxt: cr) <- {
        me double: tipLength <- 10
        me double: tipAngle <- 0.35

        me double: angle <- atan2(double(endY) - double(startY), double(endX) - double(startX)) + 3.14159265359

        me double: x1 <- double(endX) + tipLength * cos(angle - tipAngle)
        me double: y1 <- double(endY) + tipLength * sin(angle - tipAngle)
        me double: x2 <- double(endX) + tipLength * cos(angle + tipAngle)
        me double: y2 <- double(endY) + tipLength * sin(angle + tipAngle)

        cr.moveTo(startX, startY)
        cr.lineTo(endX, endY)
        cr.lineTo(x1, y1)
        cr.lineTo(x2, y2)
        cr.lineTo(endX, endY)
        cr.closePath()
        cr.fillKeep()
        cr.strokeNow()
    }

    /*none: arrow(me GUI_Scalar: StartX, me GUI_Scalar: StartY, me GUI_Scalar: EndX, me GUI_Scalar: EndY) <- {
        startX <- StartX
        startY <- StartY
        endX   <- EndX
        endY   <- EndY
    }*/
}

struct widget{
    me GUI_Scalar: posX    // x position of top left corner
    me GUI_Scalar: posY    // y position of top left corner
    me GUI_Scalar: width   // width of widget
    me GUI_Scalar: height  // height of widget
    me int: scale
    me bool: isHidden
    me bool: mouseIsOver

    void: draw(their GUI_ctxt: cr) <- {}
    me bool: handleAllClicks(their GUI_ButtonEvent: event) <- {return(false)}
    me bool: primaryClick(their GUI_ButtonEvent: event) <- {return(false)}
    me bool: primaryDblClick(their GUI_ButtonEvent: event) <- {return(false)}
    me bool: primaryDn(their GUI_ButtonEvent: event) <- {return(false)}
    me bool: primaryUp(their GUI_ButtonEvent: event) <- {return(false)}
    me bool: secondaryClick(their GUI_ButtonEvent: event) <- {return(false)}
    me bool: secondaryDblClick(their GUI_ButtonEvent: event) <- {return(false)}
    me bool: secondaryDn(their GUI_ButtonEvent: event) <- {return(false)}
    me bool: secondaryUp(their GUI_ButtonEvent: event) <- {return(false)}
    me bool: mouseMoved(their GUI_MotionEvent: event) <- {return(checkForMouseOver(event))}
    me bool: mouseDragged(their GUI_MotionEvent: event) <- {return(false)}
    me void: mouseEnter(their GUI_MotionEvent: event) <- {}
    me void: mouseExit(their GUI_MotionEvent: event) <- {}
    me bool: mouseWheel(their GUI_MotionEvent: event) <- {return(false)}
    me bool: fingerSqueeze(their GUI_PointerEvent: event) <- {return(false)}

    me bool: keyTyped(their GUI_KeyboardEvent: event) <- {return(false)}
    me bool: keyDown(their GUI_KeyboardEvent: event) <- {return(false)}
    me bool: keyUp(their GUI_KeyboardEvent: event) <- {return(false)}

    me bool: windowChange(their GUI_WindowEvent: event) <- {return(false)}
    me bool: dataUpdated(their GUI_DataEvent: event) <- {return(false)}         // This widget's data has been updated
    me bool: timerTick(their GUI_TimeEvent: event) <- {return(false)}           // Timer to change data
    me bool: tweenTick(their GUI_TimeEvent: event) <- {return(false)}           // Timer for state-change animation frame
    me bool: userEvent(their GUI_UserEvent: event) <- {return(false)}
    me bool: focused(their GUI_PointerEvent: event) <- {return(false)}
    me bool: unfocused(their GUI_PointerEvent: event) <- {return(false)}

    bool: isTouching(me GUI_Scalar: x, me GUI_Scalar: y) <- {
        return ((x >= posX) and (x < posX + width) and (y >= posY) and (y < posY + height))
    }

    me bool: checkForMouseOver(their GUI_MotionEvent: event) <- {
        me bool: isNowOver <- isTouching(event.x, event.y)
        if(!mouseIsOver and isNowOver){
            mouseIsOver <- true
            mouseEnter(event)
        } else if(mouseIsOver and !isNowOver){
            mouseIsOver <- false
            mouseExit(event)
            return(true) // return true anyhow so that child nodes will be notified.
        }
        return(isNowOver)
    }

    void: initialize(me int: PosX, me int: PosY, me GUI_Scalar: Width, me GUI_Scalar: Height, me int: Scale, me int: Alpha ) <- {
        posX   <- PosX
        posY   <- PosY
        width  <- Width
        height <- Height
        scale  <- Scale
    }
}
struct appComponentData{
    their appComponentGUI: guiMgr
    void: wizardFinished(me string: wizID) <- {print ("wizardFinished BASE: ", wizID, "\n")}
}
struct appComponentGUI{
    their appComponentGUI: parentGuiMgr
    me string: title
    void: setActiveChild(me int: N) <-{print ("setActiveChild BASE: \n")}
    void: getValue()   <- {print("getValue BASE: \n")}
    bool: isComplete() <- {print("isComplete BASE: \n");return(true)}
    void: save()       <- {print("save BASE:\n")}
    void: clickNext()  <- {print("clickNext BASE:\n")}
    void: clickBack()  <- {print("clickBack BASE:\n")}
    void: clear()      <- {print("clear BASE:\n")}
    void: load()       <- {} // {print("load BASE:\n")}
    void: onLoaded()   <- {} // {print("onLoaded BASE:\n")}
    void: onChanged()  <- {print("onChanged BASE:\n")}
    void: deleteIndex(me int: N) <- {print("deleteIndex BASE:\n")}
}

/////////////////////////////////  HANDLE EVENTS
struct GUI_MotionEvent{
    me uint: type
    me double: x
    me double: y
    me uint: state
    me uint: button
}
struct GUI_ButtonEvent{
    me uint: type
    me double: x
    me double: y
    me uint: state
    me uint: button
}
struct GUI_PointerEvent{
    me uint: type
    me double: x
    me double: y
    me uint: state
    me uint: button
}
struct GUI_KeyboardEvent{
    me uint: type
    me uint: state
    me uint: keyval
}
/////////////////////////////////  EVENT DISPATCHER
struct GUI_eventDispatcher{}
/////////////////////////////////  HANDLE GUI
struct GUI_canvas{}
struct GUI{
    me GUI_item: newCanvas()
    me void: setWidgetSize(me GUI_item: widget, me uint32: width, me uint32: height)
  //  me void: setCallback() <- {}
}
struct GUI_ctxt {
    //me void: fetchAreaToBeDrawn(me GUI_rect: area)
    me void: reset()
    me void: setRGBA(me double: red, me double: green, me double: blue, me double: alpha)
    me void: setRGB (me double: red, me double: green, me double: blue)
    me void: setColor(me cdColor: color)
    me void: setLineWidth(me double: width)
    me void: finishPDF()
    me void: setScale()
    me void: moveTo(me double: x, me double: y)
    me void: lineTo(me double: x, me double: y)
    me void: moveRel(me double: dx, me double: dy)
    me void: lineRel(me double: dx, me double: dy)
    me void: curveTo(me double: x1, me double: y1, me double: x2, me double: y2, me double: x3, me double: y3)
    me void: curveRel(me double: dx1, me double: dy1, me double: dx2, me double: dy2, me double: dx3, me double: dy3)
    me void: closePath()
    me void: rectangle()
    me void: paintNow()
    me void: strokeNow()
    me void: fillNow()
    me void: strokeKeep()
    me void: fillKeep()
    //me void: setFillPattern()
    me void: circle(me int: centerX, me int: centerY, me int: radius)
}

struct GLOBAL{

    me void: roundedRectangle(their GUI_ctxt: cr, me double: x, me double: y, me double: w, me double: h, me double: r) <- {
        cr.moveTo(x+r,y);                      //# Move to A
        cr.lineTo(x+w-r,y);                    //# Straight line to B
        cr.curveTo(x+w,y,x+w,y,x+w,y+r);       //# Curve to C, Control points are both at Q
        cr.lineTo(x+w,y+h-r);                  //# Move to D
        cr.curveTo(x+w,y+h,x+w,y+h,x+w-r,y+h); //# Curve to E
        cr.lineTo(x+r,y+h);                    //# Line to F
        cr.curveTo(x,y+h,x,y+h,x,y+h-r);       //# Curve to G
        cr.lineTo(x,y+r);                      //# Line to H
        cr.curveTo(x,y,x,y,x+r,y);             //# Curve to A;
    }

    me void: roundedTopRect(their GUI_ctxt: cr, me double: x, me double: y, me double: w, me double: h, me double: r) <- {
        cr.moveTo(x+r,y);                        //# Move to A
        cr.lineTo(x+w-r,y);                      //# Straight line to B
        cr.curveTo(x+w,y,x+w,y,x+w,y+r);         //# Curve to C, Control points are both at Q
        cr.lineTo(x+w,y+h);                      //# Move to D
        //cr.curveTo(x+w,y+h,x+w,y+h,x+w-r,y+h); //# Curve to E
        cr.lineTo(x,y+h);                        //# Line to F
        //cr.curveTo(x,y+h,x,y+h,x,y+h-r);       //# Curve to G
        cr.lineTo(x,y+r);                        //# Line to H
        cr.curveTo(x,y,x,y,x+r,y);               //# Curve to A;
    }

    me void: roundedBotmRect(their GUI_ctxt: cr, me double: x, me double: y, me double: w, me double: h, me double: r) <- {
        cr.moveTo(x,y);                        //# Move to A
        cr.lineTo(x+w,y);                      //# Straight line to B
        //cr.curveTo(x+w,y,x+w,y,x+w,y+r);     //# Curve to C, Control points are both at Q
        cr.lineTo(x+w,y+h-r);                  //# Move to D
        cr.curveTo(x+w,y+h,x+w,y+h,x+w-r,y+h); //# Curve to E
        cr.lineTo(x+r,y+h);                    //# Line to F
        cr.curveTo(x,y+h,x,y+h,x,y+h-r);       //# Curve to G
        cr.lineTo(x,y);                        //# Line to H
        //cr.curveTo(x,y,x,y,x+r,y);           //# Curve to A;
    }

}
/////////////////////////////////  INTER-THREAD COMMUNICATION
struct MessagePasser{}
struct workerMsgThread{}
struct APP {
    me GUI: gui
    me GUI_Frame: thisFrame
}
