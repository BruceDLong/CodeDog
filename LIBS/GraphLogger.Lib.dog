//####### Logger library

requirements = [
    [require, GraphLogger_implementation]
]
featuresNeeded = [List, Threads]

struct graphLogger{
    me List<me string>: items
    me Map<me string, me string>: rankSlots
    me Mutex: graphLoggerMutex

    me string: deQuote(me string: S) <-{
        me string: sOut
        withEach idx in RANGE(0..S.size()){
            if(S[idx]=="\""){sOut <+- "\\\""} else{sOut <+- S[idx]}
        }
        return(sOut)
    }
    void: addItem(me string: itemStr)<-{
        me MutexMngr: MtxMgr{graphLoggerMutex}
        itemStr <+- "\n"
        items.append(itemStr)
    }
    void: addNode(me string: nodeID, me string: label, me string: attrs) <-{
        me MutexMngr: MtxMgr{graphLoggerMutex}
        me string: nodeStr <- "    \""+deQuote(nodeID)+"\" "
        me string: labelStr
        if(label != ""){
            labelStr <- "label=\"" + deQuote(label) + "\" "
        }
        me string: attrStr <- labelStr+deQuote(attrs)
        if(attrStr!=""){ attrStr <-  " ["+attrStr+"]"}
        nodeStr <+- attrStr+";\n"
        items.append(nodeStr)
    }
    void: setNodeSlot(me string: nodeID, me string: slotID) <-{
        me MutexMngr: MtxMgr{graphLoggerMutex}
        me string: slot <- rankSlots[slotID]
        slot <+- "\""+nodeID+"\"; "
        rankSlots[slotID] <- slot
    }
    void: addArrow(me string: fromID, me string: toID, me string: label, me string: attrs) <-{
        me MutexMngr: MtxMgr{graphLoggerMutex}
        me string: edgeStr <- "    \""+deQuote(fromID)+"\" -> \"" + deQuote(toID) + "\""
        me string: labelStr
        if(label != ""){
            labelStr <- "label=\"" + deQuote(label) + "\" "
        }
        me string: attrStr <- labelStr+deQuote(attrs)
        if(attrStr!=""){ attrStr <-  " ["+attrStr+"]"}
        edgeStr <+- attrStr+";\n"
        items.append(edgeStr)
    }
    void: clear()<-{
        me MutexMngr: MtxMgr{graphLoggerMutex}
        items.clear();
        rankSlots.clear()
    }
    void: saveGraph(me string: graphName, me string: filename) <- {
        me MutexMngr: MtxMgr{graphLoggerMutex}
        me FileStream: out
        out.openNew(filename)
        me string: header <- "digraph \""+deQuote(graphName)+"\"{\n"
        out.write(header)
        withEach line in items{
            out.write(line)
        }
        withEach rankItem in rankSlots{
            me string: sameRank <- "{rank=same; " + rankItem.val + "}"
            out.write(sameRank)
        }
        me string: footer <- "}\n"
        out.write(footer)
        out.close()
    }
}

struct GLOBAL{
    me graphLogger: grapher
}
