//############  Add GUI-Toolkit features using Windows API (previously
//                  known as Win32)
requirements = [
    [tagOneOf, Platform, [Windows]]
]

interface={
    provides=[GUI_ToolKit_implementation]
    libFiles=[Gdi32, winuser]
    headers=[windows.h, windowsx.h, stdlib.h, string.h, tchar.h, direct.h, winuser.h, wingdi.h]
}

LibDescription ={
    useStatus   = dynamic
    description ='Windows API is a GUI Toolkit'
    features    =[GUI_ToolKit]
    platforms   =[Windows]
    bindings    =[C, CPP]
    CPUs        =[i386, amd64, arm7]
}

// Injecting some Windows specific code at the top
embedHigh = `
POINT _tagPOINT;
HPEN hPen;
HBRUSH hBrush;
COLORREF objectColor = RGB(0, 0, 0);
HWND hWnd;
// COLORREF brushColor = RGB(0, 0, 0);
TRIVERTEX vertex[2];
GRADIENT_RECT gRect;
int penWidth = 1;

wstring s2ws(const string& s) {
        int len;
        int slength = (int)s.length() + 1;
        len = MultiByteToWideChar(CP_ACP, 0, s.c_str(), slength, 0, 0);
        wchar_t* buf = new wchar_t[len];
        MultiByteToWideChar(CP_ACP, 0, s.c_str(), slength, buf, len);
        wstring r(buf);
        delete[] buf;
        return r;
    }

`

// Injecting some GUI minimal test code here
embedLow = `

//const char g_szClassName[] = "myWindowClass";


// The main window class name.
static TCHAR szWindowClass[] = _T("DesktopApp");

// The string that appears in the application's title bar.
static TCHAR szTitle[] = _T("MinimalGUI - Windows Version");

HINSTANCE hInst;

// Forward declarations of functions included in this code module:
LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);

int CALLBACK WinMain(
    _In_ HINSTANCE hInstance,
    _In_ HINSTANCE hPrevInstance,
    _In_ LPSTR     lpCmdLine,
    _In_ int       nCmdShow
)
{
    WNDCLASSEX wcex;

    wcex.cbSize = sizeof(WNDCLASSEX);
    wcex.style = CS_HREDRAW | CS_VREDRAW;
    wcex.lpfnWndProc = WndProc;
    wcex.cbClsExtra = 0;
    wcex.cbWndExtra = 0;
    wcex.hInstance = hInstance;
    wcex.hIcon = LoadIcon(hInstance, IDI_APPLICATION);
    wcex.hCursor = LoadCursor(NULL, IDC_ARROW);
    wcex.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);
    wcex.lpszMenuName = NULL;
    wcex.lpszClassName = szWindowClass;
    wcex.hIconSm = LoadIcon(wcex.hInstance, IDI_APPLICATION);

    if (!RegisterClassEx(&wcex))
    {
        MessageBox(NULL,
            _T("Call to RegisterClassEx failed!"),
            _T("Windows Desktop Guided Tour"),
            NULL);

        return 1;
    }
    initialize("");

    // Store instance handle in our global variable
    hInst = hInstance;

    // The parameters to CreateWindow explained:
    // szWindowClass: the name of the application
    // szTitle: the text that appears in the title bar
    // WS_OVERLAPPEDWINDOW: the type of window to create
    // CW_USEDEFAULT, CW_USEDEFAULT: initial position (x, y)
    // 500, 100: initial size (width, length)
    // NULL: the parent of this window
    // NULL: this application does not have a menu bar
    // hInstance: the first parameter from WinMain
    // NULL: not used in this application
    hWnd = CreateWindow(
        szWindowClass,
        szTitle,
        WS_OVERLAPPEDWINDOW,
        CW_USEDEFAULT, CW_USEDEFAULT,
        GetSystemMetrics(SM_CXSCREEN), GetSystemMetrics(SM_CYSCREEN),
        NULL,
        NULL,
        hInstance,
        NULL
    );

    if (!hWnd)
    {
        MessageBox(NULL, _T("Call to CreateWindow failed!"), _T("Windows Desktop Guided Tour"), NULL);
        return 1;
    }
    
    activate(&hWnd);

    // The parameters to ShowWindow explained:
    // hWnd: the value returned from CreateWindow
    // nCmdShow: the fourth parameter from WinMain
    ShowWindow(hWnd,
        nCmdShow);
    UpdateWindow(hWnd);

    // Main message loop:
    MSG msg;
    while (GetMessage(&msg, NULL, 0, 0))
    {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }
    deinitialize();
    return (int)msg.wParam;
}

LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
    PAINTSTRUCT ps;
    HDC hdc;

    switch (message)
    {
    case WM_PAINT: {
        hdc = BeginPaint(hWnd, &ps);
        BeginPath(hdc);
        EventDispatcher.topWidget->draw(&hdc);
        EndPath(hdc);
        EndPaint(hWnd, &ps);
        break; }
    case WM_DESTROY: {
        PostQuitMessage(0);
        break; }
    case WM_KEYUP:{
	GUI_KeyboardEvent event;
        event.state;
        event.keyval=LOWORD(wParam);
        break; }
    case WM_KEYDOWN:{
        break; }
    case WM_LBUTTONDOWN: {
        POINT winEvent;
        GUI_ButtonEvent event;
        event.x = GET_X_LPARAM(lParam) / scaleFactor;
        event.y = GET_Y_LPARAM(lParam) / scaleFactor;
        EventDispatcher.topWidget->primaryClick(&event);
        break; }
    case WM_RBUTTONDOWN: {
        GUI_ButtonEvent event;
        event.x = GET_X_LPARAM(lParam) / scaleFactor;
        event.y = GET_Y_LPARAM(lParam) / scaleFactor;
        EventDispatcher.topWidget->secondaryClick(&event);
        break; }

    case WM_MOUSEMOVE:{
	GUI_MotionEvent event;
        event.x = GET_X_LPARAM(lParam) / scaleFactor;
        event.y = GET_Y_LPARAM(lParam) / scaleFactor;
        EventDispatcher.topWidget.mouseMoved(&event);
	break; }
    case WM_CHAR:
        return 0L;
    default:
        return DefWindowProc(hWnd, message, wParam, lParam);
        break;
    }
    return 0;
}

`

/////////////////////////////////  STRUCT CONVERTERS
//struct GUI_rect{me double: x1 me double: y1 me double: x2 me double: y2}
struct GUI_offset{their GtkAdjustment:GUI_offset}
//struct GUI_item{their HWND: GUI_item}
//struct GUI_Frame{me HWND: GUI_Frame}
struct GUI_menuBar{their HWND: GUI_menuBar}
struct GUI_menu{their HWND: GUI_menu}
struct GUI_menuItem{their HWND: GUI_menuItem}
//struct GUI_canvas{their HWND: GUI_canvas}
//struct GUI_container{their HWND:GUI_container}
struct GUI_ScrollingWindow{their HWND: GUI_ScrollingWindow}
//struct INK_Image{their cairo_surface_t: INK_Image}      // How will the ink look?
//struct GUI_callback{me GCallback: GUI_callback}
//struct GUI_Scalar{me int: GUI_Scalar}
//struct GUI_Label{their textView: GUI_Label}
struct listWidget{their HWND: listWidget}


/////////////////////////////////  STRUCT CONVERTERS
struct GUI_rect{me double: x1 me double: y1 me double: x2 me double: y2}
struct GUI_item:                wraps = HWND ownerMe = me{}
struct GUI_Frame:               wraps = HWND ownerMe = me{}
struct GUI_container:           wraps = HWND ownerMe = me{}
struct INK_Image:               wraps = cairo_surface_t ownerMe = their{}      // How will the ink look?
struct GUI_callback:            wraps = GCallback ownerMe = their{}
struct GUI_Scalar:              wraps = int{}
struct GUI_Text:                wraps = HWND ownerMe = me{}
struct GUI_canvas:              wraps = HWND ownerMe = me{}
struct GUI_ctxt:                wraps = HDC ownerMe = me{}
/*
/////////////////////////////////  WIDGETS
struct GUI_storyBoard{
    their HWND: GUI_storyBoard
    me void: addPane(their GUI_Frame: frame) <- <%!gtk_stack_add_named((GtkStack*)%0, (HWND*)%1, %2)%>
}

struct intWidget{
    their HWND: box
    their HWND: dataLabel
    their HWND: dataValue

    me string: getValue() <- <%!gtk_spin_button_get_value_as_int ((GtkSpinButton*)%0)%>
    me void: setValue(me int: val) <- <%!gtk_spin_button_set_value ((GtkSpinButton*)%0, %1)%>

    their HWND: makeIntWidget(me string: name)  <- <%{
        HWND* box = gtk_box_new(GTK_ORIENTATION_HORIZONTAL, 0);
        dataLabel = gtk_label_new(name.data());
        gtk_label_set_width_chars((GtkLabel*)dataLabel, 15);
        gtk_label_set_xalign((GtkLabel*)dataLabel, 0.9);
        gtk_container_add(GTK_CONTAINER (box), dataLabel);
        dataValue = gtk_spin_button_new(NULL, 1, 0);
        gtk_container_add(GTK_CONTAINER (box), dataValue);
        return box;
    }%>
}
struct stringWidget{
    their HWND: box
    their HWND: dataLabel
    their HWND: dataValue

    me string: getValue() <- <%!gtk_entry_get_text((GtkEntry*)%0->dataValue)%>
    me void: setValue(me string: val) <- <%!gtk_entry_set_text((GtkEntry*)%0->dataValue, %1.data())%>
    their HWND: makeStringWidget(me string: name) <- <%{
        HWND* box = gtk_box_new(GTK_ORIENTATION_HORIZONTAL, 0);
        dataLabel = gtk_label_new(name.data());
        gtk_label_set_width_chars((GtkLabel*)dataLabel, 15);
        gtk_label_set_xalign((GtkLabel*)dataLabel, 0.9);
        gtk_container_add(GTK_CONTAINER (box), dataLabel);
        dataValue = gtk_entry_new();
        gtk_container_add(GTK_CONTAINER (box), dataValue);
        return box;
    } %>
}
struct enumWidget{
    their HWND: box
    their HWND: dataLabel
    their HWND: dataValue
    me List<me string>: options

    me string: getValue() <- <%!atoi(gtk_combo_box_text_get_active_text((GtkComboBoxText*)%0))%>
    me void: setValue(me int: val) <- {}

    their HWND: makeEnumWidget(me string: label, me List<me string>: Options)  <- <%{
        options = Options;
        box = gtk_box_new(GTK_ORIENTATION_HORIZONTAL, 0);
        dataLabel = gtk_label_new(label.data());
        gtk_label_set_width_chars((GtkLabel*)dataLabel, 15);
        gtk_label_set_xalign((GtkLabel*)dataLabel, 0.9);
        gtk_container_add(GTK_CONTAINER (box), dataLabel);
        dataValue = gtk_combo_box_text_new();
        int idx=0;
        for (string option : options){
            gtk_combo_box_text_append((GtkComboBoxText*)dataValue, to_string(idx).data(), option.data());
            idx+=1;
        }
        gtk_container_add(GTK_CONTAINER (box), dataValue);
        return box;
    }%>
}

struct boolWidget{

}
*/

/*
/////////////////////////////////  LIST EDITOR WIDGET
struct ListManagerBox{
    their ListWidgetManager: listWidgetMgr
    their HWND:         editorFrame
    their listWidget:        listWidget
    their HWND:         addBtn
    their HWND:         deleteBtn
    their HWND:         editBtn
    me int:                  crntIndex <- 0

    void: handleOnListClick(me int: idx) <- <% {
        cout << "List Clicked at index: "<< to_string(idx)<<"\n";
        crntIndex = idx;
        listWidgetMgr->setCurrentItem(crntIndex);
    } %>
    void: handleAdd() <- <% {
        cout << "Add Btn Clicked\n";
        listWidgetMgr->allocateNewCurrentItem();
        HWND* itemWidget = listWidgetMgr->makeEditableWidget();
        GtkDialogFlags flags = (GtkDialogFlags)(GTK_DIALOG_MODAL);
        HWND* AddItemDialog = gtk_dialog_new_with_buttons ("Add", (GtkWindow*)window, flags, "_OK", 1, "_Cancel", 0, NULL);
        HWND* contentArea = gtk_dialog_get_content_area((GtkDialog*)AddItemDialog);
        gtk_container_add (GTK_CONTAINER (contentArea), itemWidget);

        gtk_widget_show_all(AddItemDialog);
        int result = gtk_dialog_run ((GtkDialog*)AddItemDialog);
        if(result==1){
            cout<<"ACCEPTED "<<result<<"\n";
            listWidgetMgr->updateCrntFromEdited(itemWidget);
            listWidgetMgr->pushCrntToList();
            listWidgetMgr->pushCrntToListView();
        } else {
            cout<<"CANCELED "<<result<<"\n";
        }
        gtk_widget_destroy(AddItemDialog);

    } %>
    void: handleDelete() <- <% {
        cout << "Delete Btn Clicked\n";
    } %>
    void: handleEdit() <- <%{
        cout << "Edit Btn Clicked\n";
    }%>
    their HWND: init_dialog(their ListWidgetManager: LEWM) <- <% {
        listWidgetMgr = LEWM;
        listWidget = listWidgetMgr->makeListViewWidget();
        editorFrame = gtk_box_new(GTK_ORIENTATION_VERTICAL, 0);
        gtk_box_pack_start(GTK_BOX(editorFrame), listWidget, true, true, 0);

        HWND* btnBox = gtk_box_new(GTK_ORIENTATION_HORIZONTAL, 0);
        addBtn = gtk_button_new_with_label("Add");
        deleteBtn = gtk_button_new_with_label("Remove");
        editBtn = gtk_button_new_with_label("Edit");

        gtk_box_pack_start(GTK_BOX(btnBox), addBtn, true, true, 10);
        gtk_box_pack_start(GTK_BOX(btnBox), deleteBtn, true, true, 10);
        gtk_box_pack_start(GTK_BOX(btnBox), editBtn, true, true, 10);
        gtk_box_pack_start(GTK_BOX(editorFrame), btnBox, false, true, 0);

        g_signal_connect(G_OBJECT(listWidget), "row-selected", G_CALLBACK(ListEditorHandleListClick), this);
        g_signal_connect(G_OBJECT(addBtn), "clicked", G_CALLBACK(ListEditorHandleAdd), this);
        g_signal_connect(G_OBJECT(deleteBtn), "clicked", G_CALLBACK(ListEditorHandleDelete), this);
        g_signal_connect(G_OBJECT(editBtn), "clicked", G_CALLBACK(ListEditorHandleEdit), this);

        return editorFrame;
    } %>
}
*/


/////////////////////////////////  HIGHER LEVEL WIDGETS
struct GLOBAL{
    // Widgets
    //their HWND: makeBoolWidget(me string: label)        <- <%! %>
    //their HWND: makeFloatWidget(me string: label)       <- <%!%Ggtk_entry_new()%>
    //their HWND: makeNumRangeWidget(me string: label)    <- <%!%Ggtk_entry_new()%>
    //their HWND: makeRangeWidget(me string: label)       <- <%!%Ggtk_entry_new()%>
    //their HWND: makeTimeWidget(me string: label)        <- <%!%Ggtk_entry_new()%>
    //their HWND: makeDateWidget(me string: label)        <- <%!%Ggtk_entry_new()%>
    //their HWND: makeTimeWidget()        <- <%!%Ggtk_entry_new()%>
    //their HWND: makeDateWidget()        <- <%!%Ggtk_entry_new()%>
    me int: widgetHeight(their HWND: window) <- <%{
        RECT rect;
        GetClientRect(*drawing_area, &rect);
        int height = rect.bottom - rect.top;
        return height;
    }%>
    me int: widgetWidth(their HWND: window) <- <%{
        RECT rect;
        GetClientRect(*drawing_area, &rect);
        int width = rect.right - rect.left;
        return width;
    }%>


    their HWND: makeListWidget(me string: label)        <- <%!%Ggtk_list_box_new()%>
    their HWND: makeRowWidget(me string: label)         <- <%!%Ggtk_list_box_row_new()%>
    their HWND: makeYStack(me string: label)            <- <%!%Ggtk_box_new(GTK_ORIENTATION_VERTICAL, 0)%>
    their HWND: makeXStack(me string: label)            <- <%!%Ggtk_box_new(GTK_ORIENTATION_HORIZONTAL, 50)%>
    their HWND: makeZStack(me string: label)            <- <%!%Ggtk_notebook_new()%>
    their HWND: makeLabelWidget(me string: label)       <- <%!%Ggtk_label_new(%1)%>
    me void: setLabelWidth(their HWND: labelWidget, me int: width) <- <%!gtk_label_set_width_chars((GtkLabel*)%1, %2)%>
    me void: setListWidgetSelectionMode(their listWidget: listWid, me string: mode) <- <%!gtk_list_box_set_selection_mode((GtkListBox *)%1, GTK_SELECTION_SINGLE)%>
    me int: getListRowIndex() <- <%!%Ggtk_list_box_row_get_index((GtkListBoxRow *)%1)%>
    their HWND: getListRowSelected(their listWidget: listWid) <- <%!%G(HWND*)gtk_list_box_get_selected_row((GtkListBox *)%1)%>
    me HWND: __CreateWindowEx1() <- <%{return CreateWindowExA(WS_EX_MDICHILD, nullptr, nullptr, WS_CHILD, 0, 0, 0, 0, nullptr, nullptr, nullptr, nullptr);}%>
    their HWND: __CreateWindowEx() <- {
        their HWND:: drawingArea
        drawingArea <deep- __CreateWindowEx1();
        return (drawingArea);
    }

    /*
    their HWND: makeListEditorWidget(their HWND: listWidget) <- <%{
        HWND* box = gtk_box_new(GTK_ORIENTATION_VERTICAL, 0);
        gtk_box_pack_start(GTK_BOX(box), listWidget, true, true, 0);

        HWND* btnBox = gtk_box_new(GTK_ORIENTATION_HORIZONTAL, 0);
        HWND* addBtn = gtk_button_new_with_label("Add");
        HWND* delBtn = gtk_button_new_with_label("Remove");
        HWND* editBtn = gtk_button_new_with_label("Edit");

        gtk_box_pack_start(GTK_BOX(btnBox), addBtn, true, true, 10);
        gtk_box_pack_start(GTK_BOX(btnBox), delBtn, true, true, 10);
        gtk_box_pack_start(GTK_BOX(btnBox), editBtn, true, true, 10);
        gtk_box_pack_start(GTK_BOX(box), btnBox, false, true, 0);
        return box;
    }%>
    */
}
/*
struct GLOBAL{
    void: ListEditorHandleListClick(their GtkListBox: box, their GtkListBoxRow: row, their void: user_data) <- <% {
        ListManagerBox *listMgrBox =(ListManagerBox *)user_data;
        int idx = gtk_list_box_row_get_index(gtk_list_box_get_selected_row(box));
        listMgrBox->handleOnListClick(idx);
    } %>
    void: ListEditorHandleAdd(their HWND: wid, their ListManagerBox: listMgrBox) <- {
        listMgrBox.handleAdd()
    }
    void: ListEditorHandleDelete(their HWND: wid, their ListManagerBox: listMgrBox) <- {
        listMgrBox.handleDelete()
    }
    void: ListEditorHandleEdit(their HWND: wid, their ListManagerBox: listMgrBox) <- {
        listMgrBox.handleEdit()
    }
}
*/

/////////////////////////////////  HANDLE EVENTS


/////////////////////////////////  EVENT DISPATCHER
struct GUI_eventDispatcher{
    // Windows events are dispatched via one giant switch stmt. So this is fairly simple.
    their widget: topWidget
    me void: registerWidgetForEventDispatcher(their GUI_item: Widget, their widget: masterWidget) <- <%{topWidget = masterWidget;}%>
}

/////////////////////////////////   Event callbacks
struct GLOBAL{
    me GUI_eventDispatcher: EventDispatcher
}

/////////////////////////////////  HANDLE GUI
struct GUI_canvas: ownerMe = me{
    me void: setParent(our DashboardWidget: wid) <- <%!%G%>
}
struct GUI{
    //their GtkApplication: app

    me uint32: GUI_Init() <- {
        //app <- gtk_application_new (0, G_APPLICATION_FLAGS_NONE)
        //g_signal_connect (app, "activate", G_CALLBACK(activate), NULL)
        return(0)
    }
    me uint32: GUI_Run() <- <% {
        uint32_t status=0;
        //status = g_application_run( G_APPLICATION(app), 0, 0);
        return(status);
    } %>
    me void: GUI_Deinit() <- {
        //g_object_unref(app)
    }
}

// TURNING ON GUI w/ newCanvas and newScrollingWindow but commenting out everything else
// TODO: newCanvas
// TODO: newScrollingWindow
struct GUI{
    //me void: showWidget(me GUI_item: widget) <- <%!gtk_widget_show(%1)%>
    their GUI_item: newCanvas() <- <%!%G__CreateWindowEx()%>
    //me void: setWidgetSize(me GUI_item: widget, me uint32: width, me uint32: height) <- <%!%Ggtk_widget_set_size_request(%1, %2, %3)%>
    me void: setWidgetSize(their GUI_item: widget, me uint32: width, me uint32: height) <- <% {
        tagRECT crect;
        GetWindowRect(*widget, &crect);
        SetWindowPos(*widget, NULL, crect.left, crect.top, width, height, SWP_SHOWWINDOW);
        } %>
    me GUI_item: newScrollingWindow() <- <%!%Ggtk_scrolled_window_new(0, 0)%>
    //me void: addToContainer(me GUI_container: container, me GUI_item: widget) <-<%!%Ggtk_container_add(GTK_CONTAINER(%1), %2)%>
    //me void: addToContainerAndExpand(me GUI_container: container, me GUI_item: widget) <-<%!%Ggtk_box_pack_start(GTK_BOX(%1), %2, TRUE, TRUE, 0)%>
    //me void: addToContainerAndExpand(me GUI_container: container, me GUI_item: widget) <-<%%>
    //me void: addMenuBar(me GUI_menuBar: menubar) <- <%!%G %>
    //me void: create_MenuItem(me GUI_menu: ParentMenu, me string: label)<- <%!%Gcreate_MenuItem(%1, %2)%>
    //me void: create_TopSubMenu(me GUI_menuBar: ParentMenu, me string: label)<- <%!%Gcreate_SubMenu(%1, %2)%>
    //me void: create_SubMenu(me GUI_menu: ParentMenu, me string: label)<- <%!%Gcreate_SubMenu(%1, %2)%>
    //me void: setCallback() <- <%!%Gg_signal_connect(%1, %2, %3, %4)%>
    //me GUI_ctxt: newPDF_ctxt(me sting: filename, me double: inchesWide, me double: inchesHigh) <- <%!%Gcairo_create(cairo_pdf_surface_create(%1.data(), %2*70, %3*70))%>
}

struct GUI_ctxt: wraps = HDC ownerMe = me {
    me GUI_ctxt: HDC
    me void: reset() <- <%!BeginPath(%0)%>
    // me void: setRGBA(me double: red, me double: green, me double: blue, me double: alpha) <- <%!Color(%3, %0, %1, %2)%>          // Input RGBA, Color(alpha, red, green, blue)
    me void: setRGB (me double: red, me double: green, me double: blue) <- <%!%GobjectColor = RGB(%1, %2, %3)%>
    me void: setColor(me cdColor: color) <- <%!setRGB(%1.red, %1.green, %1.blue)%>
    me void: setLineWidth(me double: width) <- <%!%G
        penWidth = %1;
        hPen = CreatePen(PS_SOLID, penWidth, objectColor);
        SelectObject(*cr, hPen);
    %>      // maybe separate out an updatePen function?
    me void: setRoundLineCap() <- <%!pen.SetStartCap(LineCapRound); pen.SetEndCap(LineCapRound)%>
    me void: setEdgedLineCap() <- <%!pen.SetStartCap(LineCapFlat); pen.SetEndCap(LineCapFlat)%>
    me void: moveTo(me double: x, me double: y) <- <%!MoveToEx(*%0, %1, %2, NULL)%>          // (x, y, [speed])
    me void: lineTo(me double: x, me double: y) <- <%!LineTo(*%0, %1, %2)%>          // (hdc, xEnd, yEnd) , uses current pen
    me void: moveRel(me double: dx, me double: dy) <- <%!
        GetCurrentPositionEx(cr, &_tagPOINT);
        MoveToEx(%0, _tagPOINT.x + %1, _tagPOINT.y + %2, NULL)
    %>
    me void: lineRel(me double: dx, me double: dy) <- <%!
        GetCurrentPositionEx(cr, &_tagPOINT);
        LineTo(%0, _tagPOINT.x + %1, _tagPOINT.y + %2)
    %>
    me void: closePath() <- <%!CloseFigure(*%0)%>
    me void: rectangle() <- <%!Rectangle(*%0, %1, %2, %1+%3, %2+%4)%>
    me void: paintNow() <- <%!
        RECT clientSize;
        HBRUSH backgroundBrush;
        GetClientRect(*hWnd, &clientSize);
        backgroundBrush = CreateSolidBrush(RGB(122,122,0));
        FillRect(%0, &clientSize, backgroundBrush);%>
    me void: strokeNow() <- <%!
        EndPath(*%0);
        hPen = CreatePen(PS_SOLID, penWidth, objectColor);
        SelectObject(*cr, hPen);
        StrokePath(*%0);
        DeleteObject(hPen);
        BeginPath(*%0)
    %>
    me void: fillNow() <- <%!
        EndPath(*%0);
        hBrush = CreateSolidBrush(objectColor);
        SelectObject(*cr, hBrush);
        FillPath(*%0);
        DeleteObject(hBrush);
        BeginPath(*%0)
    %>                  // Don't need CloseFigure
    me void: strokeAndFillPath() <- <%!
        EndPath(*%0);
        hBrush = CreateSolidBrush(objectColor);
        SelectObject(*cr, hBrush);
        StrokeAndFillPath(*%0);
        DeleteObject(hBrush);
        BeginPath(*%0)
    %>
    // GRADIENT IS NOT YET FUNCTIONAL
    me void: setFillPattern() <- <%!
        vertex[0].x = 900;
        vertex[0].y = 100;
        vertex[0].Red = 0x0000;
        vertex[0].Green = 0x8000;
        vertex[0].Blue = 0x8000;
        vertex[0].Alpha = 0x0000;
        vertex[1].x = 1300;
        vertex[1].y = 500;
        vertex[1].Red = 0x0000;
        vertex[1].Green = 0xd000;
        vertex[1].Blue = 0xd000;
        vertex[1].Alpha = 0x0000;

        gRect.UpperLeft = 0;
        gRect.LowerRight = 1;

        GradientFill(%0, vertex, 2, &gRect, 1, GRADIENT_FILL_RECT_V);
    %>
}
/* GRADIENT BRIEFLY WORKED ON, PUT OFF AS FROTH
struct guiFillPattern{
    // their
    me void: init() <- <%!
        vertex[0].x = %1;
        vertex[0].y = %2;
        vertex[1].x = %3;
        vertex[1].y = %4;
    %>
    me void: AddColorStop(me double: offset, their cdColor: color) <- <%!
        if(%1 == 0) {
            vertex[0].red = %2.red;
            vertex[0].green = %2.green;
            vertex[0].blue = %2.blue;
            vertex[0].alpha = 0x0000;
        } else {
            vertex[1].red = $2.red;
            vertex[1].green = %2.green;
            vertex[1].blue = %2.blue;
            vertex[1].alpha = 0x0000;
        }
    %>
}*/

/* GTK VERSION FOR REFERENCE
    // FROTH me void: fetchAreaToBeDrawn(me GUI_rect: area) <- <%!cairo_clip_extents(%0, &%1.x1, &%1.y1, &%1.x2, &%1.y2)%>
    // --- me void: reset() <- <%!%G %>
    // ** me void: setRGBA(me double: red, me double: green, me double: blue, me double: alpha) <- <%!cairo_set_source_rgba(%0, (double)%1 /256, (double)%2 /256, (double)%3 /256, (double)%4 /256)%>
    // --- +++ me void: setRGB (me double: red, me double: green, me double: blue) <- <%!cairo_set_source_rgb(%0, (double)%1 /256, (double)%2 /256, (double)%3 /256)%>
    // --- me void: setColor(me cdColor: color) <- <%!cairo_set_source_rgb(%0, (double)%1.red /256, (double)%1.green /256, (double)%1.blue /256)%>
    // --- +++ me void: setLineWidth(me double: width) <- <%!cairo_set_line_width(%0, %1)%>         // Why two inputs?
    // FROTH me void: finishPDF() <- <%!cairo_surface_finish(cairo_get_group_target(%0))%>
    // FROTH me void: setScale() <- <%!cairo_scale(%0, %1, %2)%>
    // --- +++ me void: lineTo(me double: x, me double: y) <- <%!cairo_line_to(%0, %1, %2)%>
    // --- +++ me void: moveTo(me double: x, me double: y) <- <%!cairo_move_to(%0, %1, %2)%>
    // --- +++ me void: lineRel(me double: dx, me double: dy) <- <%!cairo_rel_line_to(%0, %1, %2)%>
    // --- +++ me void: moveRel(me double: dx, me double: dy) <- <%!cairo_rel_move_to(%0, %1, %2)%>
    // ** me void: curveTo(me double: x1, me double: y1, me double: x2, me double: y2, me double: x3, me double: y3) <- <%!cairo_curve_to(%0, %1, %2, %3, %4, %5, %6)%>
    // ** me void: curveRel(me double: dx1, me double: dy1, me double: dx2, me double: dy2, me double: dx3, me double: dy3) <- <%!cairo_rel_curve_to(%0, %1, %2, %3, %4, %5, %6)%>
    // --- +++ me void: closePath() <- <%!cairo_close_path(%0)%>
    // --- me void: rectangle() <- <%!cairo_rectangle(%0, %1, %2, %3, %4)%>
    // --- +++ me void: paintNow() <- <%!cairo_paint(%0)%>
    // --- +++ me void: strokeNow() <- <%!cairo_stroke(%0)%>
    // --- +++ me void: fillNow() <- <%!cairo_fill(%0)%>
    // CUT me void: strokeKeep() <- <%!cairo_stroke_preserve(%0)%>
    // CUT me void: fillKeep() <- <%!cairo_fill_preserve(%0)%>
    // ** me void: setFillPattern() <- <%!cairo_set_source(%0, %1)%>

struct guiFillPattern{
    their cairo_pattern_t: guiFillPattern
    me void: init() <- <%!%0 = cairo_pattern_create_linear(%1, %2, %3, %4)%>
    me void: AddColorStopRGBA(me double: offset, their cdColor: color, me int: alpha) <- <%!cairo_pattern_add_color_stop_rgba(%0, %1, (double)%2.red/265, (double)%2.green/256, (double)%2.blue/256, (double)%3/256)%>
    me void: AddColorStop(me double: offset, their cdColor: color) <- <%!cairo_pattern_add_color_stop_rgb(%0, %1, (double)%2.red/256, (double)%2.green/256, (double)%2.blue/256)%>
}
*/

/*
///////////////////////////////// TIME
struct tm{
    me tm: tm
    me int: tm_hour
    me int: tm_min
    me int: tm_sec
}

struct timeStringer{
    me tm: timeRec
    me none: timeStringer() <- <%{
        time_t rawtime;
        time (&rawtime);
        timeRec = *localtime(&rawtime);
    } %>

    me string: time12Hour() <- <%{
        string AmPm = "am";
        int hours = timeRec.tm_hour;
        if (hours>=12) {hours = hours-12; AmPm="pm";}
        if (hours==0) {hours = 12;}
        string SH = (to_string(hours)+":");
        int min = timeRec.tm_min;
        if (min<10){SH = SH+"0";}
        SH = SH + to_string(min);

        SH=SH+":";
        int sec = timeRec.tm_sec;
        if (sec<10){SH = SH+"0";}
        SH = SH + to_string(sec);
        SH=SH+AmPm;
        return(SH);
    } %>
}
*/

/////////////////////////////////  G L O B A L
struct GLOBAL{
    // TIME ROUTINES:
    me int64: getCurrentTimeStamp() <- <%!_time64(NULL)%>

    // DRAWING ROUTINES:
    me deltaSize: renderText(their GUI_ctxt: cr, me string: text, me fontSpec: font, me double: x, me double: y) <- <%{
        HFONT hFont;

        std::wstring stemp = s2ws(font.name);
        LPCWSTR fontNamePtr = stemp.c_str();
        std::wstring stemp2 = s2ws(text);
        LPCWSTR outputTextPtr = stemp2.c_str();

        BeginPath(*cr);
        hFont = CreateFontW(font.size, 0, 0, 0, FW_DONTCARE, FALSE, FALSE, FALSE, DEFAULT_CHARSET, OUT_TT_ONLY_PRECIS,
            CLIP_DEFAULT_PRECIS, CLEARTYPE_QUALITY, VARIABLE_PITCH, fontNamePtr);
        SelectObject(*cr, hFont);

        SetBkMode(*cr, TRANSPARENT);
        //SetTextColor(*cr, RGB(0, 0, 0));

        EndPath(*cr);
        TextOutW(*cr, 50, 50, outputTextPtr, text.length());
        DeleteObject(hFont);
        return 0;
    } %>


    me deltaSize: getTextSize(their GUI_ctxt: cr, me string: text, their fontSpec: font) <- <%{
	LPSIZE sz;
	int strsLen = text.size();
	GetTextExtentPoint32(*cr, text.data(), strsLen, sz);
        deltaSize size;
        size.width=sz.cx;
	size.height=sz.cy;
        return(size);
    } %>

    me deltaSize: getTextSizeX1024(their GUI_ctxt: cr, me string: text, their fontSpec: font) <- <%{
	LPSIZE sz;
	int strsLen = text.size();
	GetTextExtentPoint32(*cr, text.data(), strsLen, sz);
        deltaSize size;
        size.width=sz.cx;
	size.height=sz.cy;
        return(size);
    } %>
/*


    me void: displayImage(me GUI_ctxt: cr, me string: filename, me double: x, me double: y, me double: scale) <- <%{
        filename = "./assets/" + filename;
        map< string, cairo_surface_t* >::iterator picPtr=InkImgCache.find(filename);
        cairo_surface_t* pic=0;
        if (picPtr==InkImgCache.end()) {
            pic=cairo_image_surface_create_from_png(filename.data());
            InkImgCache[filename]=pic;
            }
        else pic=picPtr->second;

        cairo_save(cr);
        cairo_scale(cr,1/scale,1/scale);
        cairo_set_source_surface(cr,pic,x*scale,y*scale);
        cairo_paint(cr);
        cairo_restore(cr);
    } %>

// GUI INTERFACE:

// Surface to store current scribbles
their cairo_surface_t: surface <- 0

me void: close_window() <- {
  if (surface){
    cairo_surface_destroy(surface)
  }

  gtk_main_quit()
}

me GUI_menuItem: create_MenuItem(me GUI_menu: ParentMenu, me string: label) <- <%{
    HWND *menuitem;

    menuitem = gtk_menu_item_new_with_label (label.data());
    //gtk_menu_item_set_submenu (GTK_MENU_ITEM (menuitem), SubMenu);
    gtk_menu_shell_append (GTK_MENU_SHELL (ParentMenu), menuitem);
    gtk_widget_show (menuitem);

  return menuitem;
} %>

me GUI_menu: create_SubMenu(me GUI_menu: ParentMenu, me string: label) <- <%{
    HWND *SubMenu = gtk_menu_new ();
    HWND *menuitem;

    menuitem = gtk_menu_item_new_with_label (label.data());
    gtk_menu_item_set_submenu (GTK_MENU_ITEM (menuitem), SubMenu);
    gtk_menu_shell_append (GTK_MENU_SHELL (ParentMenu), menuitem);
    gtk_widget_show (menuitem);

  return SubMenu;
} %>
*/
}

//~ me int: widgetHeight() <- <%!gtk_widget_get_allocated_height(%1)%>
//~ me int: widgetWidth() <- <%!gtk_widget_get_allocated_width(%1)%>

//~ me void: showWidget(me GUI_item: widget) <-  <%!gtk_widget_show(%1)%>
//~ me void: markDirtyArea(me GUI_item: widget, me int32: x, me int32: y, me int32: width, me int32: height) <- <%!gtk_widget_queue_draw_area(%1, %2, %3, %4, %5)%>
//~ me GUI_item: newCanvas() <- <%!gtk_drawing_area_new()%>
//~ me void: setWidgetSize(me GUI_item: widget, me uint32: width, me uint32: height) <- <%!gtk_widget_set_size_request(%1, %2, %3)%>
//~ me void: addToContainer(me GUI_container: container, me GUI_item: widget) <- <%!gtk_container_add(GTK_CONTAINER (%1), %2)%>
//~ me int64: ticksPerSec() <- <%!%GG_USEC_PER_SEC%>

struct GLOBAL{ // Constants
    const int: KEY_HOME         <- <%!VK_HOME%>
    const int: KEY_END          <- <%!VK_END%>
    const int: KEY_ESCAPE       <- <%!VK_ESCAPE%>
    const int: KEY_TAB          <- <%!VK_TAB%>
    const int: KEY_INSERT       <- <%!VK_INSERT%>
    const int: KEY_DELETE       <- <%!VK_DELETE%>
    const int: KEY_PAGEUP       <- <%!VK_PRIOR%>
    const int: KEY_PAGEDOWN     <- <%!VK_NEXT%>
    const int: KEY_PAUSE        <- <%!VK_PAUSE%>
    const int: KEY_RETURN       <- <%!VK_RETURN%>
    const int: KEY_UP           <- <%!VK_UP%>
    const int: KEY_DOWN         <- <%!VK_DOWN%>
    const int: KEY_LEFT         <- <%!VK_LEFT%>
    const int: KEY_RIGHT        <- <%!VK_RIGHT%>
    const int: KEY_BACKSPACE    <- <%!VK_BACK%>
    const int: KEY_F1           <- <%!VK_F1%>
    const int: KEY_F2           <- <%!VK_F2%>
    const int: KEY_F3           <- <%!VK_F3%>
    const int: KEY_F4           <- <%!VK_F4%>
    const int: KEY_F5           <- <%!VK_F5%>
    const int: KEY_F6           <- <%!VK_F6%>
    const int: KEY_F7           <- <%!VK_F7%>
    const int: KEY_F8           <- <%!VK_F8%>
    const int: KEY_F9           <- <%!VK_F9%>
    const int: KEY_F10          <- <%!VK_F10%>
    const int: KEY_F11          <- <%!VK_F11%>
    const int: KEY_F12          <- <%!VK_F12%>
    const int: KP_0             <- <%!VK_NUMPAD0%>
    const int: KP_1             <- <%!VK_NUMPAD1%>
    const int: KP_2             <- <%!VK_NUMPAD2%>
    const int: KP_3             <- <%!VK_NUMPAD3%>
    const int: KP_4             <- <%!VK_NUMPAD4%>
    const int: KP_5             <- <%!VK_NUMPAD5%>
    const int: KP_6             <- <%!VK_NUMPAD6%>
    const int: KP_7             <- <%!VK_NUMPAD7%>
    const int: KP_8             <- <%!VK_NUMPAD8%>
    const int: KP_9             <- <%!VK_NUMPAD9%>
    const int: KP_PLUS          <- <%!VK_ADD%>
    const int: KP_MINUS         <- <%!VK_SUBTRACT%>
    const int: KP_MULTIPLY      <- <%!VK_MULTIPLY%>
    const int: KP_DIVIDE        <- <%!VK_DIVIDE%>
    const int: KP_PERIOD        <- <%!VK_DECIMAL%>
    //~ const int: KP_ENTER         <- <%!GDK_KEY_KP_Enter%>
    //~ const int: KP_DELETE        <- <%!GDK_KEY_KP_Delete%>
    //~ const int: KP_UP            <- <%!GDK_KEY_KP_Up%>
    //~ const int: KP_DOWN          <- <%!GDK_KEY_KP_Down%>
    //~ const int: KP_LEFT          <- <%!GDK_KEY_KP_Left%>
    //~ const int: KP_RIGHT         <- <%!GDK_KEY_KP_Right%>
    //~ const int: KP_HOME          <- <%!GDK_KEY_KP_Home%>
    //~ const int: KP_END           <- <%!GDK_KEY_KP_End%>
    //~ const int: KP_PAGEUP        <- <%!GDK_KEY_KP_Page_Up%>
    //~ const int: KP_PAGEDOWN      <- <%!GDK_KEY_KP_Page_Down%>

    // Use these to match lowercase OR CTRL via keyTyped.state
    const int: KEY_a            <- <%!GDK_KEY_a%>
    const int: KEY_b            <- <%!GDK_KEY_b%>
    const int: KEY_c            <- <%!GDK_KEY_c%>
    const int: KEY_d            <- <%!GDK_KEY_d%>
    const int: KEY_e            <- <%!GDK_KEY_e%>
    const int: KEY_f            <- <%!GDK_KEY_f%>
    const int: KEY_g            <- <%!GDK_KEY_g%>
    const int: KEY_h            <- <%!GDK_KEY_h%>
    const int: KEY_i            <- <%!GDK_KEY_i%>
    const int: KEY_j            <- <%!GDK_KEY_j%>
    const int: KEY_k            <- <%!GDK_KEY_k%>
    const int: KEY_l            <- <%!GDK_KEY_l%>
    const int: KEY_m            <- <%!GDK_KEY_m%>
    const int: KEY_n            <- <%!GDK_KEY_n%>
    const int: KEY_o            <- <%!GDK_KEY_o%>
    const int: KEY_p            <- <%!GDK_KEY_p%>
    const int: KEY_q            <- <%!GDK_KEY_q%>
    const int: KEY_r            <- <%!GDK_KEY_r%>
    const int: KEY_s            <- <%!GDK_KEY_s%>
    const int: KEY_t            <- <%!GDK_KEY_t%>
    const int: KEY_u            <- <%!GDK_KEY_u%>
    const int: KEY_v            <- <%!GDK_KEY_v%>
    const int: KEY_w            <- <%!GDK_KEY_w%>
    const int: KEY_x            <- <%!GDK_KEY_x%>
    const int: KEY_y            <- <%!GDK_KEY_y%>
    const int: KEY_z            <- <%!GDK_KEY_z%>

    const int: KEY_A            <- <%!0x41%>
    const int: KEY_B            <- <%!0x42%>
    const int: KEY_C            <- <%!0x43%>
    const int: KEY_D            <- <%!0x44%>
    const int: KEY_E            <- <%!0x45%>
    const int: KEY_F            <- <%!0x46%>
    const int: KEY_G            <- <%!0x47%>
    const int: KEY_H            <- <%!0x48%>
    const int: KEY_I            <- <%!0x49%>
    const int: KEY_J            <- <%!0x4A%>
    const int: KEY_K            <- <%!0x4B%>
    const int: KEY_L            <- <%!0x4C%>
    const int: KEY_M            <- <%!0x4D%>
    const int: KEY_N            <- <%!0x4E%>
    const int: KEY_O            <- <%!0x4F%>
    const int: KEY_P            <- <%!0x50%>
    const int: KEY_Q            <- <%!0x51%>
    const int: KEY_R            <- <%!0x52%>
    const int: KEY_S            <- <%!0x53%>
    const int: KEY_T            <- <%!0x54%>
    const int: KEY_U            <- <%!0x55%>
    const int: KEY_V            <- <%!0x56%>
    const int: KEY_W            <- <%!0x57%>
    const int: KEY_X            <- <%!0x58%>
    const int: KEY_Y            <- <%!0x59%>
    const int: KEY_Z            <- <%!0x5A%>


    /// MASKS for event.state
    const int: SHIFT_MASK       <- <%!GDK_SHIFT_MASK%>
    const int: CONTROL_MASK     <- <%!GDK_CONTROL_MASK%>
}
/////////// Application areas

struct GLOBAL {
    //their HWND: window
    me void: activate(their HWND: frame) <- <%{thisApp.createAppArea(frame);}%>
}
