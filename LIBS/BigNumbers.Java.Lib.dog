/////////// Add routines for Java
requirements = [
    [tagOneOf, Lang, [Java]]
]

interface={
    provides = [BigNumbers_implementation]
    libFiles = []
    headers  = [java.math.BigInteger, java.math.BigDecimal]
}

LibDescription ={
    useStatus   = dynamic
    description = 'Built in routines for Java'
}

struct BigInt: wraps = BigInteger{
    //me int64: convertToIntVal()            <- <%!%>
    me int: hexNumToBigInt(me string: val) <- <%{}%>            // TODO: for Proteus codeGen
    me int: binNumToBigInt(me string: val) <- <%{}%>            // TODO: for Proteus codeGen
    //me int: decNumToBigInt(me string: val) <- <%!%>
}
struct BigFloat: wraps = TODO{
    //me double: convertToFloat()              <- <%!%>
    //me int: hexNumToBigFloat(me string: val) <- <%!%>
    //me int: binNumToBigFloat(me string: val) <- <%!%>
    //me int: decNumToBigFloat(me string: val) <- <%!%>
}

struct BigFrac: wraps = TODO{
    //me double: convertToFloat()             <- <%!%>
    //me double: normalize()                  <- <%!%>
    //me int: hexNumToBigFrac(me string: val) <- <%!%>
    //me int: binNumToBigFrac(me string: val) <- <%!%>
    //me int: decNumToBigFrac(me string: val) <- <%!%>
}
struct FlexNum{
    me double: convertToFloat()  <- <%{}%>                      // TODO: for Proteus codeGen
    //void: normalize()            <- <%{}%>
    //void: setNumerator(me string: numerator)     <- <%{}%>
    //void: setDenominator(me string: denominator) <- <%{}%>
    //me BigInt: getNumerator()    <- <%{}%>
    //me BigInt: getDenominator()  <- <%{}%>
    // CONSTRUCTORS
    //none: FlexNum(me BigInt:num) <- <%{}%>
    //none: FlexNum(me int64:num)  <- <%{}%>
    //none: FlexNum(me uint64:num) <- <%{}%>
    //none: FlexNum(me double:num) <- <%{}%>
    //none: FlexNum(me float:num)  <- <%{}%>
}
