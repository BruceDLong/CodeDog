$schema: 'https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json'
name: 'CodeDog Programming Language'
patterns:
    -
        include: '#comments'
    -
        include: '#comment-inline'
    -
        include: '#operators'
    -
        include: '#strings'
    -
        include: template-type
    -
        include: '#numbers'
    -
        include: '#control-statements'
    -
        include: '#reserved-words'
    -
        include: '#keywords'
    -
        include: '#numeric-literal'
repository:
    reserved-words:
        name: entity.name.function.member.dog
        match: \b(Forward|Backward|Preorder|Inorder|Postorder|BreadthFirst|auto|break|bool|case|char|and|or|const|me|my|our|their|we|withEach|print|WHILE|in|RANGE|continue|do|double|else|but|flag|mode|float|for|if|uint32|int32|uint64|int64|model|struct|string|int|uint|long|return|switch|typedef|void|false|NULL|true|List|Opt|Map|inherits)\b
    control-statements:
        name: keyword.control.flow.dog
        match: \b(Title|Platform|LinuxBuild|SwingBuild|AndroidBuild|iPhoneBuild|BuildCmd|FileName|Version|CopyrightMesg|Authors|Description|LicenseText|featuresNeeded|runCode|CPU|Lang|optimize|IncludePlatform|Singlefile|Realtime|noWorstCase|codeGenStyle|RamAvailable|CPU-Feature|CPU-Version|Rebug|Release|bits32|bits64|L1Cache|L2Cache|LittleEndian|BigEndian|Memory|Speed|Power|ProgramOrLibrary)\b
        patterns:
            -
                begin: '(?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))(return)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))'
                beginCaptures:
                    '0': {name: keyword.control.flow.dog}
                end: '(?=[;}]|$|;|^\s*$|(?:^\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var|Title|BuildCmd|FileName|Version|CopyrightMesg|Authors|Description|LicenseText|featuresNeeded|runCode|CPU|Lang|optimize|IncludePlatform|Singlefile|Realtime|noWorstCase|codeGenStyle|RamAvailable|CPU-Feature|CPU-Version|Rebug|Release|bits32|bits64|L1Cache|L2Cache|LittleEndian|BigEndian|Memory|Speed|Power|ProgramOrLibrary)\b))'
                patterns:
                    - {include: '#expression'}
    operators:
        name: operator.dog
        patterns:
            -
                match: '%=|\+=|-=|\*=|(?<!\()/='
                name: keyword.operator.assignment.compound.dog
    numbers:
        patterns:
            -
                name: keyword.other.unit.suffix.integer.dog
                match: '(^-?[0-9][0-9\.]+$)'
    expression:
        patterns:
            -
                include: '#reserved-words'
            -
                include: '#numbers'
            -
                include: '#paren-expression'
            -
                include: '#strings'
            -
                include: '#operators'
            -
                include: '#control-statements'
            -
                include: template-type
            -
                include: numeric-literal
    paren-expression:
        patterns:
            -
                captures:
                    '1': {name: entity.name.function.dog}
                match: '\b(\w+)(?:\s+([-a-zA-Z0-0_]+))?\s*(\()'
                name: punctuation.definition.parameters.dog
                patterns:
                    - {include: '#expression'}
    comment-inline:
        patterns:
            -
                match: '^\s\*\s+'
            -
                begin: '/\*'
                captures:
                    '0': {name: punctuation.definition.comment.dog}
                end: '\*/'
                name: comment.block.dog
            -
                begin: '(^[ \t]+)?(?==//)'
                beginCaptures:
                    '0': {name: entity.name.tag.inline.dog}
                    '1': {name: punctuation.definition.bracket.angle.begin.dog}
                    '2': {name: punctuation.definition.bracket.angle.end.dog}
                end: '(?!\G)'
                patterns:
                    - {begin: //, beginCaptures: {'0': {name: punctuation.defintion.comment.dog}}, end: \n, name: comment.line.double-slash.dog}
    comments:
        patterns:
            -
                name: comment.block.documentation.dog
                begin: '/\*\*(?!/)'
                beginCaptures:
                    '0': {name: punctuation.definition.comment.dog}
                end: '\*/'
                endCaptures:
                    '0': {name: punctuation.definition.comment.dog}
                patterns:
                    - {include: '#docblock'}
            -
                name: comment.block.dog
                begin: '(/\*)(?:\s*((@)internal)(?=\s|(\*/)))?'
                beginCaptures:
                    '1': {name: punctuation.definition.comment.dog}
                    '2': {name: storage.type.internaldeclaration.dog}
                    '3': {name: punctuation.decorator.internaldeclaration.dog}
                end: '\*/'
                endCaptures:
                    '0': {name: punctuation.definition.comment.dog}
            -
                begin: '(^[ \t]+)?((//)(?:\s*((@)internal)(?=\s|$))?)'
                beginCaptures:
                    '1': {name: punctuation.whitespace.comment.leading.dog}
                    '2': {name: comment.line.double-slash.dog}
                    '3': {name: punctuation.definition.comment.dog}
                    '4': {name: storage.type.internaldeclaration.dog}
                    '5': {name: punctuation.decorator.internaldeclaration.dog}
                end: '(?=$)'
                contentName: comment.line.double-slash.dog
    keywords:
        patterns:
            -
                name: keyword.control.dog
                match: \b(if|while|for|return)\b
    strings:
        patterns:
            -
                include: '#qstring-single'
            -
                include: '#qstring-double'
            -
                include: '#template'
            -
                include: '#backticks'
    backticks:
        name: string.quoted.single.dog
        begin: '`'
        beginCaptures:
            '0':
                name: punctuation.definition.string.begin.dog
        end: '(\`)|((?:[^\\\n])$)'
        endCaptures:
            '1':
                name: punctuation.definition.string.end.dog
            '2':
                name: invalid.illegal.newline.dog
        patterns:
            -
                include: '#string-character-escape'
    qstring-double:
        name: string.quoted.double.dog
        begin: '"'
        beginCaptures:
            '0':
                name: punctuation.definition.string.begin.dog
        end: '(")|((?:[^\\\n])$)'
        endCaptures:
            '1':
                name: punctuation.definition.string.end.dog
            '2':
                name: invalid.illegal.newline.dog
        patterns:
            -
                include: '#string-character-escape'
    qstring-single:
        name: string.quoted.single.dog
        begin: ''''
        beginCaptures:
            '0':
                name: punctuation.definition.string.begin.dog
        end: '(\'')|((?:[^\\\n])$)'
        endCaptures:
            '1':
                name: punctuation.definition.string.end.dog
            '2':
                name: invalid.illegal.newline.dog
        patterns:
            -
                include: '#string-character-escape'
    string-character-escape:
        name: constant.character.escape.dog
        match: '\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|u\{[0-9A-Fa-f]+\}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)'
    numeric-literal:
        patterns:
            -
                name: constant.numeric.hex.dog
                match: '\b(?<!\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\b(?!\$)'
                captures:
                    '1': {name: storage.type.numeric.bigint.dog}
            -
                name: constant.numeric.binary.dog
                match: '\b(?<!\$)0(?:b|B)[01][01_]*(n)?\b(?!\$)'
                captures:
                    '1': {name: storage.type.numeric.bigint.dog}
            -
                name: constant.numeric.octal.dog
                match: '\b(?<!\$)0(?:o|O)?[0-7][0-7_]*(n)?\b(?!\$)'
                captures:
                    '1': {name: storage.type.numeric.bigint.dog}
            -
                match: "(?x)\n(?<!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$)"
                captures:
                    '0': {name: constant.numeric.decimal.dog}
                    '1': {name: meta.delimiter.decimal.period.dog}
                    '2': {name: storage.type.numeric.bigint.dog}
                    '3': {name: meta.delimiter.decimal.period.dog}
                    '4': {name: storage.type.numeric.bigint.dog}
                    '5': {name: meta.delimiter.decimal.period.dog}
                    '6': {name: storage.type.numeric.bigint.dog}
                    '7': {name: storage.type.numeric.bigint.dog}
                    '8': {name: meta.delimiter.decimal.period.dog}
                    '9': {name: storage.type.numeric.bigint.dog}
                    '10': {name: meta.delimiter.decimal.period.dog}
                    '11': {name: storage.type.numeric.bigint.dog}
                    '12': {name: meta.delimiter.decimal.period.dog}
                    '13': {name: storage.type.numeric.bigint.dog}
                    '14': {name: storage.type.numeric.bigint.dog}
scopeName: source.dog
