#!/usr/bin/env python3
# CodeDog Program Maker
import sys;  sys.dont_write_bytecode = True
import progSpec
import codeDogParser
import buildDog
import TestDog


##########  Library Shells
import libraryMngr
import codeGenerator
import xlator_CPP
import xlator_Java
#import xlator_JavaScript
import xlator_Swift


import re
import os
import errno
import platform
import copy
import atexit
from progSpec import cdlog, cdErr
from os.path import abspath
from timeit import default_timer as timer

if sys.version_info[0] < 3:
    print("\n\nERROR: CodeDog must be used with Python 3\n")
    exit(1)

codeDogVersion = '2.0'


if(len(sys.argv) < 2):
    print("\n    usage: codeDog [-v] filename\n")
    exit(1)
arg1 = sys.argv[1]
if arg1=="-v" or arg1=='--version':
    print("\n    CodeDog application compiler version "+ codeDogVersion+"\n")
    exit(1)
if arg1[0]=='-':
    print("Unsupported argument:", arg1)
    exit(1)
atexit.register(progSpec.whenExit)
sys.setrecursionlimit(5000)
startTime = timer()

def GenerateProgram(classes, buildTags, tagsList, libsToUse):
    result='No Language Generator Found for '+buildTags['Lang']
    langGenTag = buildTags['Lang']
    if(langGenTag == 'CPP'):
        langName='C + +'
        xlator = xlator_CPP.fetchXlators()
    elif(langGenTag == 'Java'):
        langName='J A V A'
        xlator = xlator_Java.fetchXlators()
    elif(langGenTag == 'Swift'):
        langName='S W I F T'
        xlator = xlator_Swift.fetchXlators()
    else:
        cdErr( "ERROR: No language generator found for ".format( langGenTag))
        exit(1)
    result=codeGenerator.generate(classes, tagsList, libsToUse, langName, xlator)
    return result

def GenerateSystem(classes, buildSpecs, tags, macroDefs):
    cdlog(0, "\n######################   G E N E R A T I N G   P R O G R A M   S P E C I F I C A T I O N")
    count=0
    for buildSpec in buildSpecs:
        count+=1
        buildName=buildSpec[0]
        buildTags=buildSpec[1]
        buildTags['buildName']= buildName
        testMode=progSpec.fetchTagValue([tags, buildTags], 'testMode')
        progSpec.MarkItems=True
        if testMode=='makeTests' or testMode=='runTests':
            cdlog(1, "GENERATING: Test Program")
            testTagStore=TestDog.generateTestCode(classes, buildTags, tags, macroDefs)
            cdlog(1, "Test Program Finished")
            tagsList=[tags, buildTags, testTagStore]
        else:
            tagsList=[tags, buildTags]
        #print("BUILDTAGS:", buildTags)
        cdlog(0, "\n######################   G E N E R A T I N G   S O U R C E   C O D E   S Y S T E M   {}   o f   {}...   ({})".format(count, len(buildSpecs), buildName))
        libsToUse=libraryMngr.ChooseLibs(classes, buildTags, tags)
        fileSpecs = GenerateProgram(classes, buildTags, tagsList, libsToUse)
        print("Marker: Code Gen Successful")

        #GenerateBuildSystem()###################################################
        fileName   = progSpec.fetchTagValue(tagsList, 'FileName')
        labelName  = progSpec.fetchTagValue(tagsList, 'Title')
        launchIconName = progSpec.fetchTagValue(tagsList, 'LaunchIcon')
        programOrLibrary = progSpec.fetchTagValue(tagsList, 'ProgramOrLibrary')
        langGenTag = buildTags['Lang']
        libFiles=[]
        tagsFromLibFiles = libraryMngr.getTagsFromLibFiles()
        packageData = []
        for lib in libsToUse:
            if 'interface' in tagsFromLibFiles[lib] and 'libFiles' in tagsFromLibFiles[lib]['interface']:
                tmpLibFiles = tagsFromLibFiles[lib]['interface']['libFiles']
                libFiles+=tmpLibFiles
                if 'packages' in tagsFromLibFiles[lib]['interface']:
                    packageData = tagsFromLibFiles[lib]['interface']['packages']

        #TODO: need debug mode and minimum version
        platform=progSpec.fetchTagValue([tags, buildTags], 'Platform')
        #cdlog(1, "\nWRITING {} FILE(S) AND COMPILING...".format(len(fileSpecs)))
        buildDog.build("-g", '14',  fileName, labelName, launchIconName, libFiles, buildName, platform, fileSpecs, programOrLibrary, packageData)
        print("Marker: Build Successful")
        progSpec.rollBack(classes, tags)
    # GenerateDocuments()


#############################################    L o a d / P a r s e   P r o g r a m   S p e c

cdlog(0, "\n######################   P R O C E S S I N G   M A I N   P R O G R A M   ######################")
libraryMngr.findLibraryFiles()

filename = abspath(os.getcwd()) + "/" + arg1
[ProgSpec, objNames, macroDefs] = [ {}, [], {} ]
[tagStore, buildSpecs, classes, newClasses] = codeGenerator.loadProgSpecFromDogFile(filename, ProgSpec, objNames, {}, macroDefs)
print("Marker: Parse Successful")
tagStore['dogFilename']=filename
if len(buildSpecs)==0: cdErr('No Build specification was found')
macroDefs= {}
GenerateSystem(classes, buildSpecs, tagStore, macroDefs)
cdlog(0, "\n######################   D O N E")
endTime = timer()
cdlog(0, "\nTIME: {0:.2f} seconds".format(endTime-startTime))
progSpec.noError=True
